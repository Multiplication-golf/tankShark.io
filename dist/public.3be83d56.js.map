{"mappings":"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","sources":["<anon>","public/script-client.js"],"sourcesContent":["// LOL, you little kids can't mess with my game\n(async function() {\n    /* Warning! DO NOT TOUCH */ const isCrazyGames = false;\n    if (isCrazyGames) {\n        // document.getElementsByTagName(\"body\")[0].innerHTML +=\n        //   '<script src=\"https://sdk.crazygames.com/crazygames-sdk-v3.js\"></script>';\n        try {\n            await window.CrazyGames.SDK.init();\n        } catch  {\n            console.error(\"SOMETHING went wrong, reloading to try again\");\n            setTimeout(()=>{\n                window.location.href = \"/\";\n            }, 5000);\n        }\n        const available = window.CrazyGames.SDK.user.isUserAccountAvailable;\n        if (available) {\n            const crazyUserObject = await window.CrazyGames.SDK.user.getUser().username;\n            document.getElementById(\"username\").value = await window.CrazyGames.SDK.user.getUser().username;\n        }\n    }\n    if (isCrazyGames) try {\n        await window.CrazyGames.SDK.banner.requestResponsiveBanner(\"adbox\");\n    } catch (e) {\n        console.log(\"Error on request responsive banner\", e);\n    }\n    var badgelevels = {};\n    var badgesToLoad = [\n        \"1.webp\",\n        \"2.webp\",\n        \"3.webp\",\n        \"4.webp\",\n        \"5.webp\",\n        \"6.webp\",\n        \"7.webp\",\n        \"8.webp\",\n        \"9.webp\",\n        \"10.webp\"\n    ];\n    badgesToLoad.forEach((badge)=>{\n        var img = new Image();\n        img.src = window.location.href !== \"http://127.0.0.1:5501/public/index.html\" ? `/badges/${badge}` : `/public/badges/${badge}`;\n        badgelevels[`/badges/${badge}`] = img;\n    });\n    function getMousePos(canvas, evt) {\n        return {\n            x: evt.clientX,\n            y: evt.clientY\n        };\n    }\n    function getMiddleOfElement(element) {\n        const rect = element.getBoundingClientRect();\n        const middleX = rect.left + rect.width / 2;\n        const middleY = rect.top + rect.height / 2;\n        return {\n            x: middleX,\n            y: middleY\n        };\n    }\n    const getMouseAngle = (canvas, x, y)=>{\n        var elePos = getMiddleOfElement(canvas);\n        return Math.atan2(y - elePos.y, x - elePos.x);\n    };\n    function getCookie(cname) {\n        let name1 = cname + \"=\";\n        let decodedCookie = decodeURIComponent(document.cookie);\n        let ca = decodedCookie.split(\";\");\n        for(let i = 0; i < ca.length; i++){\n            let c = ca[i];\n            while(c.charAt(0) == \" \")c = c.substring(1);\n            if (c.indexOf(name1) == 0) return c.substring(name1.length, c.length);\n        }\n        return \"\";\n    }\n    var username;\n    const images = [];\n    const imagePaths = [\n        \"0.webp\",\n        \"1.webp\",\n        \"2.webp\",\n        \"3.webp\",\n        \"4.webp\",\n        \"5.webp\",\n        \"6.webp\",\n        \"7.webp\",\n        \"8.webp\",\n        \"9.webp\",\n        \"10.webp\"\n    ]; // Array of image paths\n    imagePaths.forEach((path)=>{\n        const img = new Image();\n        img.src = (window.location.href !== \"https://tankshark.fun/\" ? \"/public/skins/\" : \"/skins/\") + path;\n        images.push(img);\n    });\n    var inverted = {};\n    images.forEach((image___, i)=>{\n        inverted[`${i}.png`] = image___;\n    });\n    function loadProto() {\n        // Define the schema directly as a JSON object\n        const schema = {\n            nested: {\n                GameObject: {\n                    fields: {\n                        angle: {\n                            type: \"float\",\n                            id: 1\n                        },\n                        color: {\n                            type: \"string\",\n                            id: 2\n                        },\n                        health: {\n                            type: \"float\",\n                            id: 3\n                        },\n                        maxhealth: {\n                            type: \"int32\",\n                            id: 4\n                        },\n                        size: {\n                            type: \"float\",\n                            id: 5\n                        },\n                        type: {\n                            type: \"string\",\n                            id: 6\n                        },\n                        weight: {\n                            type: \"float\",\n                            id: 7\n                        },\n                        x: {\n                            type: \"float\",\n                            id: 8\n                        },\n                        y: {\n                            type: \"float\",\n                            id: 9\n                        },\n                        transparency: {\n                            type: \"float\",\n                            id: 10\n                        },\n                        randomID: {\n                            type: \"double\",\n                            id: 11\n                        }\n                    }\n                },\n                GameObjectList: {\n                    fields: {\n                        objects: {\n                            rule: \"repeated\",\n                            type: \"GameObject\",\n                            id: 1\n                        }\n                    }\n                }\n            }\n        };\n        // ignore error; does not interfer with aplication\n        const root = protobuf.Root.fromJSON(schema);\n        const GameObjectList = root.lookupType(\"GameObjectList\");\n        return GameObjectList;\n    }\n    // Function to decode the Protobuf message and return the type and data\n    function decodeMessage(event) {\n        var GameObjectList = loadProto();\n        if (!event.data) throw new Error(\"event.data is missing\");\n        const buffer = new Uint8Array(event.data);\n        const message = GameObjectList.decode(buffer);\n        return message;\n    }\n    var canSeeChat = true;\n    var darkMode = false;\n    var canSeeLeaderBoard = true;\n    var canSeeNames = true;\n    function ongame() {\n        let getIP = document.getElementById(\"IP\").value;\n        const socket = new /*skill issus are comming to my server mohaa ha ha*/ WebSocket(getIP);\n        socket.binaryType = \"arraybuffer\";\n        let playerId = null; // Connect to the server\n        var canvas = document.createElement(\"canvas\");\n        const Ghostcanvas = document.getElementById(\"ghostCanvas\");\n        const ctx = canvas.getContext(\"2d\", {\n            willReadFrequently: true\n        });\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        document.getElementById(\"game\").appendChild(canvas);\n        canvas.id = \"myCanvas\";\n        canvas.style[\"z-index\"] = \"5\";\n        canvas.style.position = \"absolute\";\n        canvas.style.top = \"0\";\n        canvas.style.left = \"0\";\n        canvas.itemprop = \"gamePlatform\";\n        document.getElementsByTagName(\"body\")[0].style.cursor = window.location.href !== \"https://tankshark.fun/\" ? `url('${window.location.origin}/public/targetpointer1.cur'), auto` : `url('${window.location.origin}/targetpointer1.cur'), auto`;\n        var pi180 = Math.PI / 180;\n        let lastTime = performance.now();\n        let frameTimes = [];\n        let fps = 0;\n        var tankmeta = {\n            basic: {\n                \"size-m\": 1,\n                \"speed-m\": 1,\n                \"damage-m\": 1,\n                \"health-m\": 1,\n                \"regen-m\": 1,\n                fov: 1,\n                \"BodyDamage-m\": 1,\n                \"reaload-m\": 1,\n                upgradeLevel: 15,\n                upgrades: {},\n                cannons: []\n            }\n        };\n        var gridDark = document.getElementById(\"gridDark\");\n        var gridLight = document.getElementById(\"gridLight\");\n        var HANDSHAKE = {\n            null: [\n                {\n                    null: null\n                }\n            ],\n            null: [\n                {\n                    null: null\n                }\n            ],\n            null: [\n                {\n                    null: \"LOL\"\n                }\n            ]\n        };\n        var food_list = [];\n        // 🎮 Player-Related Variables\n        var players = {};\n        var playerX = canvas.width / 2;\n        var playerY = canvas.height / 2;\n        var playerHealth = 100;\n        var maxhealth = 100;\n        var playerHealTime = 0;\n        var playerReheal = 1;\n        var playerSpeed = 10;\n        var privateteamlist = [];\n        var playerSize = 1;\n        var playerBaseSize = 40;\n        var bodyDamage = 3;\n        var __type__ = \"basic\";\n        var selected_class = null;\n        var level = 0;\n        var upgradePoints = 0;\n        var maxUP = 8;\n        var dead = false;\n        var joinedTeam = false;\n        var teamOn = null;\n        var owner_of_team = false;\n        var score = 0;\n        var announcements = [];\n        var playerMessages = [];\n        var messaging = false;\n        var blinking = false;\n        // 🕹️ Movement & Controls\n        var canmove = true;\n        var canKeyPress = true;\n        var speedBoost = 1;\n        var canFire = true;\n        var canFire2 = true;\n        var keysPressed = {};\n        var movementTimeouts = [];\n        var autoRotating = false;\n        var lockautoRotating = false;\n        var autoAngle = 0;\n        var MouseX_ = 0;\n        var MouseY_ = 0;\n        var MouseX = 0;\n        var MouseY = 0;\n        var firingIntervals = {};\n        var firingInterval = null;\n        // 💥 Combat & Weapons\n        var bullets = [];\n        var zlevelbullets = [];\n        var roads = [];\n        var autoFiring = false;\n        var autoIntevals = [];\n        var baseFireInterval = 750;\n        var cannonFireData = [\n            true\n        ];\n        var bullet_damage = 10;\n        var bullet_speed = 4;\n        var bullet_size = 15;\n        var bullet_pentration = 2;\n        var cannonWidth = [\n            0\n        ];\n        var drones = 0;\n        var autocannons = [];\n        // 🗺️ Map & Environment\n        var mapLeft = -5000;\n        var mapRight = 5000;\n        var mapTop = -5000;\n        var mapBottom = 5000;\n        var boundrectcanvas = Ghostcanvas.getBoundingClientRect();\n        var cavansX = 0;\n        var cavansY = 0;\n        var canW = canvas.width;\n        var canH = canvas.height;\n        var FOV = 1; // sensitive\n        var gridDarkstyle = gridDark.style;\n        var gridLightstyle = gridLight.style;\n        var sqrt23 = Math.sqrt(3) / 2;\n        var pi = Math.PI;\n        var pentarotate = 0;\n        // 🛡️ UI & Interface\n        var state = \"start\";\n        var statecycle = 0;\n        var progress = 0.0;\n        var setprogress = 0;\n        var barWidth = 0.3125 * canvas.width;\n        var barHeight = 0.02909796314 * canvas.height;\n        var borderRadius = 10;\n        var teampanelopen = false;\n        var leader_board = [];\n        var badge = \"\";\n        var img = null;\n        // 🎯 Buttons & Controls\n        var button475 = 0.24739583333 * canvas.width;\n        var button462_5 = 0.24088541666 * canvas.width;\n        var button375 = 0.1953125 * canvas.width;\n        var button40 = 0.03100775193 * canvas.height;\n        var button10 = 0.00969932104 * canvas.height;\n        var nolist = [\n            3,\n            5,\n            7,\n            8,\n            10,\n            11,\n            13\n        ];\n        // 🕰️ Timers & Intervals\n        var Regenspeed = 30;\n        var firingIntervals = {};\n        var firingInterval = null;\n        var autoIntevals = [];\n        var movementTimeouts = [];\n        // 👾 Enemies, Bosses, & NPCs\n        var bosses = [];\n        var explosions = [];\n        var requests = [];\n        // 🏢 Teams & Multiplayer\n        var pubteams = [];\n        var teamOver = false;\n        var userId = getCookie(\"userId\");\n        var typedtext = \"\";\n        var radiusConfig = {};\n        // 🧠 Miscellaneous / Game Logic\n        var vertices = [];\n        var errors = 0;\n        var cannonFireData = [\n            true\n        ];\n        var cannonWidth = [\n            0\n        ];\n        var sqrt23 = Math.sqrt(3) / 2;\n        var squareColor = \"grey\";\n        var nolist = [\n            3,\n            5,\n            7,\n            8,\n            10,\n            11,\n            13\n        ];\n        var __reload__ = 1;\n        var colorUpgrades = [];\n        var teamColorUpgrades = [];\n        var scaleUp = 0;\n        var state = \"start\";\n        var statecycle = 0;\n        var progress = 0.0;\n        var pentarotate = 0;\n        var requests = [];\n        var imgsrcs = [\n            \"assets/dislike.webp\",\n            \"assets/like.webp\"\n        ];\n        var minimapLevels = [];\n        var levels = {\n            0: 15\n        };\n        var socialContainer = document.getElementById(\"socialContainer\");\n        let statsTree = {\n            Health: 1,\n            \"Body Damage\": 1,\n            Regen: 1,\n            \"Bullet Pentration\": 1,\n            \"Bullet Speed\": 1,\n            \"Bullet Damage\": 1,\n            \"Bullet Reload\": 1,\n            Speed: 1\n        };\n        function waitpls() {\n            setTimeout(()=>{\n                canKeyPress = true;\n            }, 300);\n            canKeyPress = false;\n        }\n        socialContainer.style.display = \"none\";\n        function send(type, data) {\n            if (socket.readyState === WebSocket.OPEN) try {\n                socket.send(JSON.stringify({\n                    type: type,\n                    data: data\n                }));\n            } catch (e) {\n                if (errors > 2) return;\n                setTimeout(()=>{\n                    window.location.reload();\n                }, 2500);\n                alert(\"There is an error or socket disconnection. Please report this if the error is not related to a closing state error.\");\n                alert(\"error\", e);\n            }\n            else {\n                setTimeout(()=>{\n                //window.location.reload();\n                }, 1);\n                setTimeout(()=>{\n                    alert(`There is a disconnection. ${socket.readyState}`);\n                }, 0);\n                console.log(type, data);\n                errors++;\n            }\n        }\n        const getCannonAngle = ()=>{\n            return Math.atan2(MouseY_ - window.innerHeight / 2, MouseX_ - window.innerWidth / 2);\n        };\n        function mix(rgb, rgb2, percent, ...otherrgbs) {\n            let _return = false;\n            rgb.forEach((f)=>{\n                if (typeof f !== \"number\") _return = true;\n            });\n            rgb2.forEach((f)=>{\n                if (typeof f !== \"number\") _return = true;\n            });\n            if (rgb.length !== 3 || rgb2.length !== 3) _return = true;\n            if (_return) throw new Error(\"Bad rgbs\");\n            var newrgb = rgb.map((c, i)=>{\n                return c = rgb2[i] * percent + c * (1 - percent);\n            });\n            otherrgbs.forEach((rgb, i)=>{\n                mix(rgb, otherrgbs[i], percent);\n            });\n            return newrgb;\n        }\n        function setCookie(cname, cvalue, exdays) {\n            const d = new Date();\n            d.setTime(d.getTime() + exdays * 86400000);\n            let expires = \"expires=\" + d.toUTCString();\n            document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n        }\n        setCookie(\"score\", 25000000, 100);\n        function levelUpgrader(tankdata) {\n            var out = false;\n            if (tankdata[\"upgrades\"] == undefined) return;\n            for(let i = 0; i < Object.keys(tankdata[\"upgrades\"]).length; i++){\n                var KEY = Object.keys(tankdata[\"upgrades\"])[i];\n                if (level >= tankdata[\"upgrades\"][KEY][\"level\"] - 1) {\n                    if (out === false) {\n                        var tankstiles = document.getElementById(\"tanktiles\");\n                        tankstiles.style.display = \"block\";\n                        tankstiles.style.left = 0;\n                        tankstiles.style.animation = \"2s 1 move\";\n                        tankstiles.innerHTML = \"\";\n                        out = true;\n                    }\n                    var upgrade = tankdata[\"upgrades\"][KEY];\n                    var img__ = document.createElement(\"img\");\n                    var tileImg = upgrade.img;\n                    tankstiles.appendChild(img__);\n                    img__.src = \"tanktiles/\" + tileImg + \".png\";\n                    img__.style = \"width: 6vw; height: 6vw; margin: 10px; z-index: 100;\";\n                    img__.addEventListener(\"click\", function(evt) {\n                        evt.stopPropagation();\n                        tankstiles.style.display = \"none\";\n                        __type__ = Object.keys(tankdata[\"upgrades\"])[i];\n                        players[playerId].__type__ = __type__;\n                        tankdata = tankmeta[__type__];\n                        var tankdatacannon__ = tankdata[\"cannons\"];\n                        playerSize *= tankdata[\"size-m\"];\n                        playerSpeed *= tankdata[\"speed-m\"];\n                        bullet_damage *= tankdata[\"damage-m\"];\n                        playerReheal *= tankdata[\"regen-m\"];\n                        bodyDamage *= tankdata[\"BodyDamage-m\"];\n                        maxhealth *= tankdata[\"health-m\"];\n                        if (playerHealth > maxhealth) playerHealth = maxhealth;\n                        if (tankdata[\"AutoRoting\"]) {\n                            autoRotating = true;\n                            lockautoRotating = true;\n                        }\n                        if (tankdata.fov !== 0) scaleby(tankdata.fov);\n                        send(\"typeChange\", {\n                            health: playerHealth,\n                            speed: playerSpeed,\n                            size: playerSize,\n                            bodyDamage: bodyDamage,\n                            __type__: __type__,\n                            state: state,\n                            statecycle: statecycle,\n                            playerHealTime: playerHealTime,\n                            maxhealth: maxhealth,\n                            playerReheal: playerReheal,\n                            FOV: scaleFactor,\n                            Regenspeed: Regenspeed,\n                            statsTree: {\n                                Health: statsTree.Health,\n                                \"Body Damage\": statsTree[\"Body Damage\"],\n                                Regen: statsTree.Regen,\n                                \"Bullet Pentration\": statsTree[\"Bullet Pentration\"],\n                                \"Bullet Speed\": statsTree[\"Bullet Speed\"],\n                                \"Bullet Damage\": statsTree[\"Bullet Damage\"],\n                                \"Bullet Reload\": statsTree[\"Bullet Reload\"],\n                                Speed: statsTree.Speed\n                            }\n                        });\n                        setTimeout(()=>{\n                            cannonWidth = [];\n                            cannonFireData = [];\n                            for(let i = 0; i < Object.keys(tankdatacannon__).length; i++){\n                                cannonWidth.push(0);\n                                cannonFireData.push(true);\n                            }\n                            autocannons.forEach((popcannon)=>{\n                                if (popcannon.playerid === playerId) {\n                                    send(\"deletAuto\", {\n                                        CannonID: popcannon.CannonID\n                                    });\n                                    clearInterval(popcannon);\n                                    popcannon = null;\n                                }\n                            });\n                            for(const cannon_ in tankdatacannon__){\n                                let cannon = tankdatacannon__[cannon_];\n                                if (cannon.type === \"autoCannon\" || cannon.type === \"SwivelAutoCannon\") {\n                                    let autoID = Math.random() * 1000 + Math.random() * 1000;\n                                    send(\"autoCannonADD\", {\n                                        CannonID: autoID,\n                                        angle: 0,\n                                        _type_: cannon.type,\n                                        cannonWidth: 0\n                                    });\n                                    let cannon__ = cannon;\n                                    let tankdata = tankmeta[__type__];\n                                    let _CAN = {\n                                        CannonID: autoID,\n                                        angle: 0,\n                                        _type_: cannon.type,\n                                        cannonWidth: 0\n                                    };\n                                    function cannonINT() {\n                                        var __tankdata__ = tankmeta[__type__];\n                                        if (_CAN.playerid === playerId) {\n                                            let cannon;\n                                            let index = 0;\n                                            for(const ___cannon___ in __tankdata__.cannons){\n                                                let cannon___ = __tankdata__.cannons[___cannon___];\n                                                if (index === cannon__.autoindex) cannon = cannon___;\n                                                index++;\n                                            }\n                                            var offSet_x = tankdatacannon__[cannon_][\"offSet-x\"];\n                                            if (tankdatacannon__[cannon_][\"offSet-x\"] === \"playerX\") offSet_x = playerSize * playerBaseSize * FOV;\n                                            if (tankdatacannon__[cannon_][\"offSet-x-multpliyer\"]) offSet_x *= -1;\n                                            let angle0 = getCannonAngle();\n                                            if (tankdatacannon__[cannon_].type === \"SwivelAutoCannon\") var [x, y] = rotatePointAroundPlayer(offSet_x, 0, angle0 * (180 / Math.PI));\n                                            //ctx.translate((canW / 2)+x,y+canH / 2);\n                                            if (tankdatacannon__[cannon_].type === \"SwivelAutoCannon\") send(\"Autofire\", {\n                                                playerX: playerX + x,\n                                                playerY: playerY + y,\n                                                cannon: cannon__,\n                                                bullet_damage: bullet_damage,\n                                                bullet_speed: bullet_speed,\n                                                bullet_size: bullet_size,\n                                                bullet_pentration: bullet_pentration,\n                                                extracannon_: cannon_,\n                                                _cannon: _CAN\n                                            });\n                                            if (tankdatacannon__[cannon_].type === \"autoCannon\") send(\"Autofire\", {\n                                                playerX: playerX - offSet_x,\n                                                playerY: playerY,\n                                                cannon: cannon__,\n                                                bullet_damage: bullet_damage,\n                                                bullet_speed: bullet_speed,\n                                                bullet_size: bullet_size,\n                                                bullet_pentration: bullet_pentration,\n                                                extracannon_: cannon_,\n                                                _cannon: _CAN\n                                            });\n                                        }\n                                        setTimeout(()=>{\n                                            cannonINT();\n                                        }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\n                                    }\n                                    setTimeout(()=>{\n                                        cannonINT();\n                                    }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\n                                    autoIntevals.push({\n                                        cannonINT: cannonINT,\n                                        autoID: autoID\n                                    });\n                                }\n                            }\n                        }, 100);\n                    });\n                }\n            }\n        }\n        function levelHANDLER() {\n            setprogress = (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\n            setprogress = setprogress === 0 || Number.isNaN(setprogress) ? 1 : setprogress;\n            if (score / levels[level] >= 1) {\n                upgradePoints += 1;\n                // Add transition property\n                let tankdata = tankmeta[__type__];\n                levelUpgrader(tankdata);\n                level += 1;\n                progress = 0;\n                setprogress = (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\n                playerSize += playerSize * 0.005;\n                send(\"Sizeup\", {\n                    plus: playerSize * 0.005\n                });\n                scaleby(scaleUp);\n                while(score / levels[level] >= 1){\n                    level += 1;\n                    upgradePoints += 1;\n                    playerSize += playerSize * 0.005;\n                    send(\"Sizeup\", {\n                        plus: playerSize * 0.005\n                    });\n                    scaleby(scaleUp);\n                    progress = 0;\n                    setprogress = (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\n                    let tankdata = tankmeta[__type__];\n                    levelUpgrader(tankdata);\n                }\n            }\n        }\n        function buildTeamList() {\n            if (!joinedTeam) pubteams.forEach((team)=>{\n                var teamcontainer = document.getElementById(\"teamcontainer\");\n                var item = document.createElement(\"div\");\n                var downArrow = document.createElement(\"img\");\n                downArrow.src = \"assets/expand.png\";\n                item.classList.add(\"team\");\n                item.innerText = team.name;\n                teamcontainer.appendChild(item);\n                item.appendChild(downArrow);\n                var infoConteiner = document.createElement(\"div\");\n                var info = document.createElement(\"p\");\n                info.innerText = `\n          Team type: ${team.govType}\n          Taxes: \n          Flat rate ${team.simpleTax}\n          Player based rate ${team.playerTax}\n          ScheduledBased based rate ${team.ScheduledBasedTax} per ${team.ScheduledBasedTaxInterval * 60000} minet interval\n          `;\n                if (team.govType === \"Constitutional\") info.innerText += `${team.constitution}`;\n                infoConteiner.classList.add(\"team\");\n                infoConteiner.style.height = \"50%\";\n                infoConteiner.style.overflow = \"auto\";\n                infoConteiner.style.display = \"none\";\n                teamcontainer.appendChild(infoConteiner);\n                infoConteiner.appendChild(info);\n                downArrow.style.width = \"1.6em\";\n                downArrow.style.height = \"1.3em\";\n                downArrow.style[\"margin-top\"] = \"0px\";\n                downArrow.style[\"margin-bottom\"] = \"-5px\";\n                downArrow.style[\"margin-right\"] = \"3px\";\n                downArrow.style.float = \"right\";\n                let isDown = false;\n                const demotePlayer = ()=>{\n                    downArrow.style.rotate = isDown ? \"180deg\" : \"0deg\";\n                    infoConteiner.style.display = isDown ? \"none\" : \"block\";\n                    isDown = !isDown;\n                };\n                downArrow.addEventListener(\"click\", demotePlayer);\n                const addSelected = ()=>{\n                    Array.from(teamcontainer.children).forEach((child)=>{\n                        child.classList.remove(\"glow\");\n                    });\n                    item.classList.add(\"glow\");\n                    selected_class = team.teamID;\n                };\n                item.addEventListener(\"click\", addSelected);\n            });\n            else {\n                let MYteam = pubteams.find((team)=>{\n                    return team.teamID === players[playerId].team;\n                });\n                if (MYteam.lowerLevelPlayers) var amLower = MYteam.lowerLevelPlayers.includes({\n                    id: playerId,\n                    username: username\n                });\n                else var amLower = false;\n                MYteam.players.forEach((player)=>{\n                    var teamcontainer = document.getElementById(\"teamcontainer\");\n                    var item = document.createElement(\"div\");\n                    item.classList.add(\"team\");\n                    if (player.id === MYteam.owner.id) item.innerText = player.username + \" -\";\n                    else item.innerText = player.username;\n                    if (player.id === MYteam.owner.id) {\n                        var crown = document.createElement(\"img\");\n                        crown.src = \"assets/crownIcon.png\";\n                        item.appendChild(crown);\n                        crown.style.width = \"1.6em\";\n                        crown.style.height = \"1.3em\";\n                        crown.style[\"margin-left\"] = \"5px\";\n                        crown.style[\"margin-top\"] = \"0px\";\n                        crown.style[\"margin-bottom\"] = \"-5px\";\n                    }\n                    teamcontainer.appendChild(item);\n                    if (MYteam.owner.id === playerId && player.id !== MYteam.owner.id && MYteam.powers.canKick) {\n                        const addKick = ()=>{\n                            if (teamOver) return;\n                            teamOver = true;\n                            var kick = document.createElement(\"img\");\n                            kick.src = \"assets/kickButton.png\";\n                            kick.style.width = \"1.5em\";\n                            kick.style.height = \"1.5em\";\n                            kick.style[\"text-align\"] = \"left\";\n                            kick.addEventListener(\"click\", ()=>{\n                                send(\"kickplayer\", {\n                                    id: player.id,\n                                    team: MYteam.teamID\n                                });\n                            });\n                            item.appendChild(kick);\n                            item.addEventListener(\"mouseleave\", ()=>{\n                                teamOver = false;\n                                item.children[0].remove();\n                            });\n                        };\n                        item.addEventListener(\"mouseover\", addKick);\n                        if (added) {\n                            var kick = document.createElement(\"img\");\n                            kick.src = \"assets/kickButton.png\";\n                            kick.style.width = \"1.5em\";\n                            kick.style.height = \"1.5em\";\n                            kick.style[\"text-align\"] = \"left\";\n                            kick.addEventListener(\"click\", ()=>{\n                                send(\"kickplayer\", {\n                                    id: player.id,\n                                    team: MYteam.teamID\n                                });\n                            });\n                            item.appendChild(kick);\n                        }\n                    }\n                    if (MYteam.owner.id === playerId || amLower) {\n                        var canPremote = amLower ? MYteam.powers.lowerlevelpowers.canDedicatePower : MYteam.powers.canDedicatePower;\n                        var canDemote = amLower ? MYteam.powers.lowerlevelpowers.canDededicatePower : MYteam.powers.canDededicatePower;\n                        if (canPremote && MYteam.owner.id !== player.id) {\n                            if (MYteam.lowerLevelPlayers) {\n                                if (!MYteam.lowerLevelPlayers.includes(player)) {\n                                    var premoteArrow = document.createElement(\"img\");\n                                    premoteArrow.src = \"assets/premoteArrow.png\";\n                                    item.appendChild(premoteArrow);\n                                    premoteArrow.style.width = \"1.6em\";\n                                    premoteArrow.style.height = \"1.3em\";\n                                    premoteArrow.style[\"margin-left\"] = \"5px\";\n                                    premoteArrow.style[\"margin-top\"] = \"0px\";\n                                    premoteArrow.style[\"margin-bottom\"] = \"-5px\";\n                                    premoteArrow.style[\"float\"] = \"right\";\n                                    const addplayer = ()=>{\n                                        send(\"premotePlayer\", {\n                                            premote: player,\n                                            MYteamID: MYteam.teamID\n                                        });\n                                        premoteArrow.removeEventListener(\"click\", addplayer);\n                                    };\n                                    premoteArrow.addEventListener(\"click\", addplayer);\n                                }\n                            }\n                        }\n                        if (canDemote && MYteam.owner.id !== player.id) {\n                            if (MYteam.lowerLevelPlayers) {\n                                if (MYteam.lowerLevelPlayers.includes(player)) {\n                                    var demoteArrow = document.createElement(\"img\");\n                                    demoteArrow.src = \"assets/demoteArrow.png\";\n                                    item.appendChild(premoteArrow);\n                                    demoteArrow.style.width = \"1.6em\";\n                                    demoteArrow.style.height = \"1.3em\";\n                                    demoteArrow.style[\"margin-left\"] = \"5px\";\n                                    demoteArrow.style[\"margin-top\"] = \"0px\";\n                                    demoteArrow.style[\"margin-bottom\"] = \"-5px\";\n                                    premdemoteArrowoteArrow.style[\"float\"] = \"right\";\n                                    const addplayer = ()=>{\n                                        send(\"demotePlayer\", {\n                                            premote: player,\n                                            MYteamID: MYteam.teamID\n                                        });\n                                        demoteArrow.removeEventListener(\"click\", addplayer);\n                                    };\n                                    demoteArrow.addEventListener(\"click\", addplayer);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n        document.getElementsByClassName(\"outer-box\")[0].classList.add(\"outer-onwer-box\");\n        document.getElementsByClassName(\"inner-box\")[0].classList.add(\"inner-onwer-box\");\n        document.getElementById(\"upgradesBox\").style.display = \"block\";\n        document.getElementById(\"HomeBaseUpgrade\").addEventListener(\"click\", ()=>{\n            document.getElementById(\"confermationScreen\").style.display = \"flex\";\n        });\n        document.getElementById(\"placeNo\").addEventListener(\"click\", ()=>{\n            document.getElementById(\"confermationScreen\").style.display = \"none\";\n        });\n        document.getElementById(\"placeYes\").addEventListener(\"click\", ()=>{\n            document.getElementById(\"confermationScreen\").style.display = \"none\";\n            send(\"requestUpgrade\", {\n                upgradeType: \"buildBase\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeHealth\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Health\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeBodyDamage\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Body Damage\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeRegen\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Regen\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeBulletPentration\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Bullet Pentration\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeBulletSpeed\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Bullet Speed\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeBulletDamage\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Body Damage\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeBulletReload\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Bullet Reload\",\n                teamId: teamOn\n            });\n        });\n        document.getElementById(\"upgradeSpeed\").addEventListener(\"click\", ()=>{\n            send(\"requestUpgrade\", {\n                upgradeType: \"statUpgrade\",\n                stat: \"Speed\",\n                teamId: teamOn\n            });\n        });\n        var postText = document.getElementById(\"posttext\");\n        document.getElementById(\"postBite\").addEventListener(\"click\", ()=>{\n            send(\"postBite\", {\n                message: postText.value,\n                teamID: teamOn\n            });\n            postText.value = \"\";\n        });\n        window.onbeforeunload = (evt)=>{\n            if (!confirm(\"Reloading will not save your progress!\")) {\n                evt.preventDefault();\n                evt.returnValue = \"\";\n            }\n        };\n        socket.onopen = function() {\n            setTimeout(()=>{\n                console.time(\"preconnect\");\n                if (isCrazyGames) var teamKey = window.CrazyGames.SDK.game.getInviteParam(\"teamId\");\n                if (isCrazyGames) window.CrazyGames.SDK.game.loadingStart();\n                let resolveDraw, rejectDraw;\n                let resolveDraw2, rejectDraw2;\n                let resolveDraw3, rejectDraw3;\n                let resolveDraw4, rejectDraw4;\n                var configPromise = new Promise((resolve, reject)=>{\n                    resolveDraw = resolve;\n                    rejectDraw = reject;\n                });\n                var tankmetaPromise = new Promise((resolve, reject)=>{\n                    resolveDraw2 = resolve;\n                    rejectDraw2 = reject;\n                });\n                var levelPromise = new Promise((resolve, reject)=>{\n                    resolveDraw3 = resolve;\n                    rejectDraw3 = reject;\n                });\n                var IDPromise = new Promise((resolve, reject)=>{\n                    resolveDraw4 = resolve;\n                    rejectDraw4 = reject;\n                });\n                var recivedData = [\n                    configPromise,\n                    tankmetaPromise,\n                    levelPromise,\n                    IDPromise\n                ];\n                Promise.allSettled(recivedData).then(()=>{\n                    console.timeEnd(\"preconnect\");\n                    scaleby(0);\n                    document.getElementById(\"full-screen\").style.display = \"none\";\n                    draw();\n                    if (isCrazyGames) window.CrazyGames.SDK.game.loadingStop();\n                });\n                if (!isCrazyGames) {\n                    const urlParams = new URLSearchParams(location);\n                    var teamKey = urlParams.get(\"team\");\n                }\n                const playerData = {\n                    id: null,\n                    x: playerX,\n                    y: playerY,\n                    health: playerHealth,\n                    speed: playerSpeed,\n                    size: playerSize,\n                    bodyDamage: bodyDamage,\n                    cannonW: cannonWidth,\n                    cannonH: 0,\n                    __type__: __type__,\n                    cannon_angle: getCannonAngle(),\n                    score: score,\n                    username: username,\n                    level: level,\n                    state: state,\n                    statecycle: statecycle,\n                    playerHealTime: playerHealTime,\n                    maxhealth: maxhealth,\n                    playerReheal: playerReheal,\n                    FOV: scaleFactor,\n                    canvasW: canvas.width,\n                    canvasH: canvas.height,\n                    MouseX: MouseX_,\n                    Regenspeed: Regenspeed,\n                    MouseY: MouseY_,\n                    screenWidth: canvas.width,\n                    screenHeight: canvas.height,\n                    visible: true,\n                    team: teamOn,\n                    userId: userId,\n                    autoFiring: autoFiring,\n                    skin: skin,\n                    isCrazy: isCrazyGames,\n                    teamKey: teamKey,\n                    statsTree: {\n                        Health: 1,\n                        \"Body Damage\": 1,\n                        Regen: 1,\n                        \"Bullet Pentration\": 1,\n                        \"Bullet Speed\": 1,\n                        \"Bullet Damage\": 1,\n                        \"Bullet Reload\": 1,\n                        Speed: 1\n                    }\n                };\n                send(\"newPlayer\", playerData);\n                send(\"HANDSHAKE\", {});\n                img = new Image();\n                img.onload = function() {\n                    ctx.drawImage(img, canvas.width / 2, canvas.height - 60);\n                };\n                img.src = `https://deip-io3.glitch.me${badge}?nocache=${Date.now()}`;\n                socket.onmessage = function(event) {\n                    var type;\n                    var data;\n                    try {\n                        const message = JSON.parse(event.data);\n                        type = message.type;\n                        data = message.data;\n                    } catch  {\n                        function f() {\n                            const message = decodeMessage(event);\n                            type = message.type;\n                            data = message.data;\n                            food_list = message.objects;\n                        }\n                        f();\n                        return;\n                    }\n                    switch(type){\n                        case \"newId\":\n                            playerId = data;\n                            resolveDraw4();\n                            break;\n                        case \"playerUpdated\":\n                            players[data.id] = data; // Update the local player data\n                            console.log(\"Player updated:\", data); // Log the update\n                            break;\n                        case \"new_X_Y\":\n                            if (data.id !== playerId) return;\n                            cavansX = data.x;\n                            playerY += data.y;\n                            cavansY = data.y;\n                            playerX += data.x;\n                            break;\n                        case \"explosionUpdate\":\n                            explosions = data;\n                            break;\n                        case \"CannonWidthUpdate\":\n                            var cannon = autocannons.find((cannon_)=>cannon_.CannonID === data.CannonID);\n                            cannon.cannonWidth = data.cannonWidth;\n                            break;\n                        case \"minimapUpdate\":\n                            minimapLevels = data;\n                            break;\n                        case \"Config\":\n                            baseFireInterval = data.baseFireInterval;\n                            scaleUp = data.scaleUp;\n                            radiusConfig = data.colorGradeint;\n                            playerBaseSize = data.playerBaseSize;\n                            var gridDark = document.getElementById(\"gridDark\");\n                            var gridLight = document.getElementById(\"gridLight\");\n                            for(let i = 0; i < data.map.size / 500; i++)for(let j = 0; j < data.map.size / 500; j++){\n                                const div = document.createElement(\"div\");\n                                const img = document.createElement(\"img\");\n                                img.style.width = \"100%\";\n                                img.style.height = \"100%\";\n                                img.src = \"backgrounds/hexlight.webp\";\n                                let divstyle = div.style;\n                                divstyle.width = \"999px\";\n                                divstyle.height = \"999px\";\n                                divstyle.backgroundColor = \"white\";\n                                divstyle.border = \"1px solid black\";\n                                div.appendChild(img);\n                                gridLight.appendChild(div);\n                            }\n                            for(let t = 0; t < data.map.size / 500; t++)for(let k = 0; k < data.map.size / 500; k++){\n                                const div = document.createElement(\"div\");\n                                const img = document.createElement(\"img\");\n                                img.style.width = \"100%\";\n                                img.style.height = \"100%\";\n                                img.src = \"backgrounds/hexdark.webp\";\n                                let divstyle = div.style;\n                                divstyle.width = \"999px\";\n                                divstyle.height = \"999px\";\n                                divstyle.backgroundColor = \"white\";\n                                divstyle.border = \"1px solid black\";\n                                div.appendChild(img);\n                                gridDark.appendChild(div);\n                            }\n                            resolveDraw();\n                            break;\n                        case \"requests\":\n                            {\n                                function requester() {\n                                    var conteiner = document.getElementById(\"requestJoin\");\n                                    if (requests.length <= 0) {\n                                        conteiner.style.display = \"none\";\n                                        return;\n                                    }\n                                    var allowYes = document.getElementById(\"allowYes\");\n                                    var allowNo = document.getElementById(\"allowNo\");\n                                    conteiner.style.display = \"block\";\n                                    if (conteiner.children[1]) conteiner.children[1].remove();\n                                    var newname = document.createElement(\"p\");\n                                    newname.style = \"color: #00ffff; font-size: 16px\";\n                                    newname.innerText = players[requests[0].requester].username;\n                                    conteiner.appendChild(newname);\n                                    var yes, no;\n                                    yes = ()=>{\n                                        send(\"allowYes\", requests[0]);\n                                        requests.shift();\n                                        allowNo.removeEventListener(\"click\", no);\n                                        requester();\n                                    };\n                                    no = ()=>{\n                                        send(\"allowNo\", requests[0]);\n                                        requests.shift();\n                                        allowYes.removeEventListener(\"click\", yes);\n                                        requester();\n                                    };\n                                    allowYes.addEventListener(\"click\", yes, {\n                                        once: true\n                                    });\n                                    allowNo.addEventListener(\"click\", no, {\n                                        once: true\n                                    });\n                                }\n                                requests = data;\n                                requester();\n                                break;\n                            }\n                        case \"RETURNtankmeta\":\n                            tankmeta = data;\n                            resolveDraw2();\n                            break;\n                        case \"NewMessages\":\n                            playerMessages = data;\n                            break;\n                        case \"playerMessage\":\n                            {\n                                playerMessages.push({\n                                    text: data.text,\n                                    exspiretime: data.exspiretime,\n                                    id: data.id,\n                                    hidetime: data.hidetime\n                                });\n                                let index_ = playerMessages.indexOf({\n                                    text: data.text,\n                                    exspiretime: data.exspiretime,\n                                    id: data.id,\n                                    hidetime: data.hidetime\n                                });\n                                setTimeout(()=>{\n                                    playerMessages = playerMessages.splice(0, index_);\n                                }, data.exspiretime);\n                                break;\n                            }\n                        case \"Levels\":\n                            levels = data;\n                            resolveDraw3();\n                            break;\n                        case \"handshake\":\n                            HANDSHAKE = data;\n                            break;\n                        case \"updaterHeal\":\n                            if (!players[data.id]) return;\n                            players[data.id].playerHealTime = data.HEALTime;\n                            break;\n                        case \"playerHeal\":\n                            players[data.id].health = data.HEALTH;\n                            if (data.id === playerId) playerHealth = data.HEALTH;\n                            break;\n                        case \"statsTreeRestart\":\n                            players[data.id].statsTree = data.stats;\n                            break;\n                        case \"autoCannonUPDATE-ADD\":\n                            autocannons = data;\n                            break;\n                        case \"badgeToplayer\":\n                            badge = data.badge;\n                            img.src = `https://deip-io3.glitch.me${badge}?nocache=${Date.now()}`;\n                            break;\n                        case \"announcements\":\n                            announcements = data;\n                            break;\n                        case \"boardUpdate\":\n                            leader_board = data.leader_board;\n                            break;\n                        case \"autoCannonUPDATE-ANGLE\":\n                            autocannons.forEach((cannon_ooo)=>{\n                                if (cannon_ooo.CannonID === data.cannon_ID) cannon_ooo.angle = data.angle;\n                            });\n                            break;\n                        case \"playerMoved\":\n                            players[data.id].x = data.x;\n                            players[data.id].y = data.y;\n                            break;\n                        case \"playerCannonUpdated\":\n                            try {\n                                if (data.receiver) {\n                                    if (data.receiver === playerId) players[data.id].cannon_angle = data.cannon_angle;\n                                } else players[data.id].cannon_angle = data.cannon_angle;\n                            } catch  {}\n                            break;\n                        case \"playerLeft\":\n                            players = Object.entries(players).reduce((newPlayers, [key, value])=>{\n                                if (key !== data[\"playerID\"]) newPlayers[key] = value;\n                                return newPlayers;\n                            }, {});\n                            break;\n                        case \"playerDied\":\n                            if (data[\"playerID\"] === playerId) {\n                                setTimeout(()=>{\n                                    document.getElementById(\"die\").style.display = \"block\";\n                                    document.getElementById(\"container\").style.display = \"none\";\n                                    document.getElementById(\"tanktiles\").style.display = \"none\";\n                                    if (isCrazyGames) window.CrazyGames.SDK.game.gameplayStop();\n                                }, 10);\n                                dead = true;\n                                clearInterval(healer);\n                                autoIntevals;\n                                autoIntevals.forEach((timeout)=>{\n                                    clearTimeout(timeout);\n                                });\n                                autoIntevals = [];\n                                fireOnce = ()=>{};\n                                FireIntervale = ()=>{};\n                                canvas = document.getElementById(\"myCanvas\");\n                                canvas.style[\"z-index\"] = \"5\";\n                                let respawn = document.createElement(\"button\");\n                                send = (type, data)=>{};\n                                respawn.innerHTML = \"Respawn\";\n                                respawn.style.position = \"absolute\";\n                                respawn.style.top = \"calc(50vh - 50px)\";\n                                respawn.style.left = \"calc(50vw - 100px)\";\n                                respawn.style.width = \"200px\";\n                                respawn.style.height = \"100px\";\n                                respawn.style[\"z-index\"] = \"12\";\n                                document.getElementsByTagName(\"body\")[0].style.cursor = \"auto\";\n                                document.getElementById(\"game\").appendChild(respawn);\n                                const reload = ()=>{\n                                    if (isCrazyGames) {\n                                        const callbacks = {\n                                            adFinished: ()=>{\n                                                socket.close();\n                                                ongame();\n                                            },\n                                            adError: (error)=>{\n                                                socket.close();\n                                                ongame();\n                                            },\n                                            adStarted: ()=>{}\n                                        };\n                                        window.CrazyGames.SDK.ad.requestAd(\"midgame\", callbacks);\n                                    } else {\n                                        socket.close();\n                                        ongame();\n                                    }\n                                };\n                                respawn.addEventListener(\"click\", reload);\n                            } else if (data[\"rewarder\"] === playerId && data.reward) score += data.reward;\n                            players = Object.entries(players).reduce((newPlayers, [key, value])=>{\n                                if (key !== data[\"playerID\"]) newPlayers[key] = value;\n                                return newPlayers;\n                            }, {});\n                            break;\n                        case \"bossUpdate\":\n                            bosses = data;\n                            break;\n                        case \"playerDamaged\":\n                            players[data.player1.id].health = data.player1.health;\n                            if (data.player2.id === playerId) {\n                                playerHealth = data.player2.health;\n                                playerHealTime = 0;\n                                state = \"damaged\";\n                                statecycle = 0;\n                                send(\"statechange\", {\n                                    state: state,\n                                    statecycle: statecycle\n                                });\n                                setTimeout(()=>{\n                                    state = \"normal\";\n                                    statecycle = 0;\n                                    send(\"statechange\", {\n                                        state: state,\n                                        statecycle: statecycle\n                                    });\n                                }, 1000);\n                            }\n                            if (data.player1.id === playerId) {\n                                playerHealth = data.player1.health;\n                                playerHealTime = 0;\n                                state = \"damaged\";\n                                statecycle = 0;\n                                send(\"statechange\", {\n                                    state: state,\n                                    statecycle: statecycle\n                                });\n                                setTimeout(()=>{\n                                    state = \"normal\";\n                                    statecycle = 0;\n                                    send(\"statechange\", {\n                                        state: state,\n                                        statecycle: statecycle\n                                    });\n                                }, 1000);\n                            }\n                            players[data.player2.id].health = data.player2.health;\n                            break;\n                        case \"bulletUpdate\":\n                            bullets = data;\n                            break;\n                        case \"roadUpdate\":\n                            roads = data;\n                            break;\n                        case \"playerJoined\":\n                            console.log(data);\n                            players[data.id] = data; // Update the local player list\n                            if (playerId !== data.id) send(\"updatePlayer\", {\n                                id: playerId,\n                                x: playerX,\n                                y: playerY,\n                                health: playerHealth,\n                                speed: playerSpeed,\n                                size: playerSize,\n                                bodyDamage: bodyDamage,\n                                cannonW: cannonWidth,\n                                cannonH: 0,\n                                __type__: __type__,\n                                cannon_angle: getCannonAngle(),\n                                score: score,\n                                username: username,\n                                level: level,\n                                state: state,\n                                statecycle: statecycle,\n                                playerHealTime: playerHealTime,\n                                maxhealth: maxhealth,\n                                playerReheal: playerReheal,\n                                FOV: scaleFactor,\n                                canvasW: canvas.width,\n                                canvasH: canvas.height,\n                                MouseX: MouseX_,\n                                Regenspeed: Regenspeed,\n                                MouseY: MouseY_,\n                                screenWidth: canvas.width,\n                                screenHeight: canvas.height,\n                                autoFiring: autoFiring,\n                                skin: skin,\n                                statsTree: {\n                                    Health: 1,\n                                    \"Body Damage\": 1,\n                                    Regen: 1,\n                                    \"Bullet Pentration\": 1,\n                                    \"Bullet Speed\": 1,\n                                    \"Bullet Damage\": 1,\n                                    \"Bullet Reload\": 1,\n                                    Speed: 1\n                                },\n                                team: teamOn,\n                                userId: userId\n                            });\n                            setTimeout(()=>{\n                                send(\"healrate\", {\n                                    playerReheal: playerReheal\n                                });\n                            }, 3000);\n                            break;\n                        case \"playerScore\":\n                            players[data[\"bulletId\"]].score += data[\"socrepluse\"];\n                            if (data[\"bulletId\"] === playerId) score = players[data[\"bulletId\"]].score;\n                            levelHANDLER();\n                            if (data.kill && isCrazyGames) window.CrazyGames.SDK.game.happytime();\n                            break;\n                        case \"dronekilled\":\n                            if (data.droneID === playerId) drones -= 1;\n                            break;\n                        case \"colorUpgrades\":\n                            colorUpgrades = data;\n                            break;\n                        case \"teamColorUpgrades\":\n                            teamColorUpgrades = data;\n                            break;\n                        case \"UpdateStatTree\":\n                            if (data.StatUpgradetype === \"Health\") {\n                                players[data.id].health = players[data.id].health / 2 * data.levelmultiplyer;\n                                players[data.id].maxhealth = players[data.id].maxhealth * data.levelmultiplyer;\n                                if (data.id === playerId) {\n                                    playerHealth = players[data.id].health / 2 * data.levelmultiplyer;\n                                    maxhealth = players[data.id].maxhealth * data.levelmultiplyer;\n                                }\n                            }\n                            if (data.StatUpgradetype === \"Body Damage\") {\n                                players[data.id].bodyDamage *= data.levelmultiplyer;\n                                if (data.id === playerId) bodyDamage *= data.levelmultiplyer;\n                            } else if (data.StatUpgradetype === \"Speed\") players[data.id].speed *= data.levelmultiplyer;\n                            else if (data.StatUpgradetype === \"Bullet Reload\") {\n                                if (data.id === playerId) __reload__ /= data.levelmultiplyer;\n                            }\n                            break;\n                        case \"healerRestart\":\n                            players[data.id].Regenspeed = data.Regenspeed;\n                            if (data.id === playerId) Regenspeed = data.Regenspeed;\n                            break;\n                        case \"pubteamlist\":\n                            pubteams = data;\n                            var teamcontainer = document.getElementById(\"teamcontainer\");\n                            teamcontainer.innerHTML = \"\";\n                            buildTeamList();\n                            break;\n                        case \"privateteamlist\":\n                            privateteamlist = data;\n                            var teamcontainer = document.getElementById(\"teamcontainer\");\n                            teamcontainer.innerHTML = \"\";\n                            buildTeamList();\n                            break;\n                        case \"JoinTeamSuccess\":\n                            if (data.id === playerId) {\n                                joinedTeam = true;\n                                socialContainer.style.display = \"block\";\n                            }\n                            if (isCrazyGames) {\n                                const link = window.CrazyGames.SDK.game.inviteLink({\n                                    teamId: data.teamId\n                                });\n                            }\n                            break;\n                        case \"playerJoinedTeam\":\n                            players[data.id].team = data.teamId;\n                            if (data.id === playerId && data.teamId !== null) {\n                                joinedTeam = true;\n                                socialContainer.style.display = \"block\";\n                                if (isCrazyGames) {\n                                    const link = window.CrazyGames.SDK.game.inviteLink({\n                                        teamId: data.teamId\n                                    });\n                                }\n                                teamOn = data.teamId;\n                            }\n                            if (data.id === playerId && data.teamId === null) {\n                                joinedTeam = false;\n                                socialContainer.style.display = \"none\";\n                                if (isCrazyGames) window.CrazyGames.SDK.game.hideInviteButton();\n                                owner_of_team = false;\n                                teamOn = null;\n                            }\n                            break;\n                        case \"newOwner\":\n                            if (data.teamID === teamOn) owner_of_team = true;\n                            break;\n                        case \"bulletDamage\":\n                            if (players[data.playerID]) {\n                                bullets = data.BULLETS; // Check if the player exists\n                                players[data.playerID].health = data.playerHealth;\n                                if (data.playerID == playerId) {\n                                    playerHealth = data.playerHealth;\n                                    send(\"playerHealintterupted\", {});\n                                    playerHealTime = 0;\n                                    state = \"damaged\";\n                                    send(\"statechange\", {\n                                        state: state,\n                                        statecycle: statecycle\n                                    });\n                                    setTimeout(()=>{\n                                        state = \"normal\";\n                                        send(\"statechange\", {\n                                            state: state,\n                                            statecycle: statecycle\n                                        });\n                                    }, 1000);\n                                }\n                            } else console.warn(\"Received bulletDamage for an unknown player:\", data.playerID);\n                            break;\n                        case \"bulletHeal\":\n                            if (players[data.playerID]) {\n                                players[data.playerID].health = data.playerHealth;\n                                if (data.playerID === playerId) playerHealth = data.playerHealth;\n                            } else console.warn(\"Received bulletDamage for an unknown player:\", data.playerID);\n                            break;\n                        case \"shapeDamage\":\n                            if (players[data.PlayerId]) {\n                                players[data.PlayerId].health -= data.playerDamage;\n                                if (data.PlayerId == playerId) {\n                                    state = \"damaged\";\n                                    //statecycle = 0;\n                                    send(\"statechange\", {\n                                        state: state,\n                                        statecycle: statecycle\n                                    });\n                                    setTimeout(()=>{\n                                        state = \"normal\";\n                                        //statecycle = 0;\n                                        send(\"statechange\", {\n                                            state: state,\n                                            statecycle: statecycle\n                                        });\n                                    }, 1000);\n                                    playerHealth -= data.playerDamage;\n                                    playerHealTime = 0;\n                                    send(\"playerHealintterupted\", {});\n                                }\n                            } else console.warn(\"Received shapeDamage for an unknown player:\", data.PlayerId);\n                            break;\n                        case \"bouceBack\":\n                            {\n                                if (data.playerID !== playerId) return;\n                                canmove = false;\n                                movementTimeouts.forEach((timeout)=>{\n                                    if (!timeout.bouceBack) clearTimeout(timeout.timeout);\n                                });\n                                movementTimeouts = [];\n                                let playerSpeed2 = playerSpeed * 2;\n                                for(let i = 0; i < playerSpeed / 2; i++){\n                                    let timeout = setTimeout(()=>{\n                                        movePlayer(-(data.response.x * 1.1 / playerSpeed2), -(data.response.y * 1.1 / playerSpeed2));\n                                        if (i < playerSpeed / 2) canmove = true;\n                                    }, 85 * i);\n                                    movementTimeouts.push({\n                                        timeout: timeout,\n                                        bouceBack: true\n                                    });\n                                }\n                                break;\n                            }\n                        case \"type_Change\":\n                            players[data.id] = data;\n                            break;\n                        case \"postBiteMessage\":\n                            console.log(data);\n                            data.forEach((message)=>{\n                                var socialContainer = document.getElementById(\"socialContainer\");\n                                socialContainer.innerHTML = `\n                  <div class=\"con-435874358\">\n                    <div class=\"social-con\">\n                      <div class=\"socialLevelDiv\" id=\"social\">\n                        <div class=\"socialContainer\">\n                          <div class=\"flexbuild\">\n                            <textarea\n                              cols=\"30\"\n                              class=\"textsocial\"\n                              id=\"posttext\"\n                              maxlength=\"256\"\n                            ></textarea>\n                            <button class=\"post-button\" id=\"postBite\">Post a bite</button>\n                          </div>\n                          <a style=\"font-size: 10px\" href=\"/posting-policy.html\"\n                            >By posting your are agreeing to Tankshark's Posting Policy\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                `;\n                                var socialBox = document.getElementById(\"social\");\n                                var contentdiv = document.createElement(\"div\");\n                                var pContent = document.createElement(\"p\");\n                                contentdiv.classList.add(\"message\");\n                                pContent.innerText = `${message.username}: ${message.message}`;\n                                contentdiv.appendChild(pContent);\n                                pContent.style.display = \"block\";\n                                for(let i = 0; i < 2; i++){\n                                    var imgDiv = document.createElement(\"div\");\n                                    var imglike = document.createElement(\"img\");\n                                    imglike.src = imgsrcs[i];\n                                    contentdiv.appendChild(imgDiv);\n                                    imglike.classList.add(\"like-dislike-img\");\n                                    imgDiv.classList.add(\"like-dislike-div\");\n                                    imglike.addEventListener(\"click\", ()=>{\n                                        send(\"likeDislike\", {\n                                            id: message.id,\n                                            type: i\n                                        });\n                                    });\n                                    imgDiv.appendChild(imglike);\n                                    imgDiv.style.display = \"inline-block\";\n                                    var gentratedNames = ()=>{\n                                        var namestring = \"\";\n                                        if (i === 0) message.dislikers.forEach((name1)=>{\n                                            namestring += name1 + \"\\n\";\n                                        });\n                                        if (i === 1) message.likers.forEach((name1)=>{\n                                            namestring += name1 + \"\\n\";\n                                        });\n                                        return namestring;\n                                    };\n                                }\n                                contentdiv.innerHTML += `<style>.like-dislike-div:hover::after {content: \"${gentratedNames()}\" !important}</style>`;\n                                socialBox.insertBefore(contentdiv, socialBox.children[0]);\n                            });\n                            break;\n                        case \"statechangeUpdate\":\n                            if (!players[data.playerID]) return;\n                            players[data.playerID].state = data.state;\n                            if (data.playerID === playerId) state = data.state;\n                            break;\n                        case \"statecycleUpdate\":\n                            if (!players[data.playerID]) return;\n                            players[data.playerID].statecycle = data.statecycle;\n                            if (data.playerID === playerId) statecycle = data.statecycle;\n                            break;\n                        case \"playerCannonWidthUpdate\":\n                            players[data.id].cannonW = data.cannonW;\n                            break;\n                        case \"playerCannonUpdatedInactive\":\n                            MouseX_ = data.MouseX_;\n                            MouseY_ = data.MouseY_;\n                            autoAngle = data.autoAngle;\n                            break;\n                        case \"newid\":\n                            userId = data.newid;\n                            setCookie(\"userId\", userId, 365);\n                            break;\n                        case \"playerSpeedBoost\":\n                            if (data.id === playerId) speedBoost = data.speedMultiplyer;\n                            break;\n                        default:\n                            console.log(\"Empty action received.\", type);\n                            break;\n                    }\n                };\n                var miniMapButton = document.getElementById(\"miniMap\");\n                var buyMiniMap = ()=>{\n                    send(\"requestUpgrade\", {\n                        upgradeType: \"miniMap\",\n                        teamId: teamOn\n                    });\n                };\n                miniMapButton.addEventListener(\"click\", buyMiniMap);\n                const windowSateChange = ()=>{\n                    send(\"windowStateChange\", {\n                        vis: document.visibilityState,\n                        id: playerId\n                    });\n                };\n                document.addEventListener(\"visibilitychange\", windowSateChange);\n                const movePlayer = (dx, dy, last, i)=>{\n                    dx *= speedBoost;\n                    dy *= speedBoost;\n                    movementTimeouts.shift();\n                    if (!canmove) return;\n                    cavansX += dx;\n                    playerY += dy;\n                    cavansY += dy;\n                    playerX += dx;\n                    if (i in nolist) return; // just roll with it\n                    send(\"playerMoved\", {\n                        x: playerX,\n                        y: playerY,\n                        dx: dx,\n                        dy: dy,\n                        last: last\n                    });\n                };\n                const healer = setInterval(()=>{\n                    playerHealTime += 1;\n                    send(\"AddplayerHealTime\", {\n                        playerHealTime: playerHealTime,\n                        maxhealth: maxhealth\n                    });\n                }, 1000);\n                function setCookie(cname, cvalue, exdays) {\n                    const d = new Date();\n                    d.setTime(d.getTime() + exdays * 86400000);\n                    let expires = \"expires=\" + d.toUTCString();\n                    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n                }\n                const typing = (event)=>{\n                    keysPressed[event.key] = true;\n                    if (messaging) {\n                        if (!keysPressed[\"Backspace\"] && !keysPressed[\"Delete\"] && !keysPressed[\"Enter\"] && typedtext.length < 35) typedtext += event.key;\n                        else typedtext = typedtext.slice(0, -1);\n                    }\n                    if (keysPressed[\"Enter\"]) {\n                        if (messaging && typedtext !== \"\") {\n                            send(\"playerSend\", {\n                                text: typedtext\n                            });\n                            typedtext = \"\";\n                        }\n                        if (!messaging) {\n                            function blink() {\n                                blinking = !blinking;\n                                if (messaging) setTimeout(()=>{\n                                    blink();\n                                }, 530);\n                            }\n                            setTimeout(()=>{\n                                blink();\n                            }, 530);\n                        }\n                        messaging = !messaging;\n                    }\n                };\n                if (window.outerHeight > window.outerWidth) {\n                    var mouseUpPress = false;\n                    document.getElementById(\"keyscontainer\").style.display = \"block\";\n                    document.getElementById(\"up\").addEventListener(\"touchstart\", ()=>{\n                        mouseUpPress = true;\n                        if (!messaging) keysPressed[\"ArrowUp\"] = true;\n                    });\n                    document.getElementById(\"up\").addEventListener(\"touchend\", ()=>{\n                        mouseUpPress = false;\n                        delete keysPressed[\"ArrowUp\"];\n                    });\n                    var mouseDownPress = false;\n                    document.getElementById(\"down\").addEventListener(\"touchstart\", ()=>{\n                        mouseDownPress = true;\n                        if (!messaging) keysPressed[\"ArrowDown\"] = true;\n                    });\n                    document.getElementById(\"down\").addEventListener(\"touchend\", ()=>{\n                        mouseDownPress = false;\n                        delete keysPressed[\"ArrowDown\"];\n                    });\n                    var mouseLeftPress = false;\n                    document.getElementById(\"left\").addEventListener(\"touchstart\", ()=>{\n                        mouseLeftPress = true;\n                        if (!messaging) keysPressed[\"ArrowLeft\"] = true;\n                    });\n                    document.getElementById(\"left\").addEventListener(\"touchend\", ()=>{\n                        mouseDownPress = false;\n                        delete keysPressed[\"ArrowLeft\"];\n                    });\n                    var mouseRightPress = false;\n                    document.getElementById(\"right\").addEventListener(\"touchstart\", ()=>{\n                        mouseRightPress = true;\n                        if (!messaging) keysPressed[\"ArrowRight\"] = true;\n                    });\n                    document.getElementById(\"right\").addEventListener(\"touchend\", ()=>{\n                        mouseRightPress = false;\n                        delete keysPressed[\"ArrowRight\"];\n                    });\n                }\n                document.addEventListener(\"keydown\", typing);\n                document.addEventListener(\"keyup\", (event)=>{\n                    delete keysPressed[event.key];\n                });\n                const mousemove = (evt)=>{\n                    var mousepos = getMousePos(window, evt);\n                    if (!autoRotating && !lockautoRotating) {\n                        MouseX_ = mousepos.x;\n                        MouseY_ = mousepos.y;\n                        let __angle__ = getCannonAngle();\n                        send(\"playerCannonMoved\", {\n                            cannon_angle: __angle__,\n                            MouseX: MouseX_,\n                            MouseY: MouseY_\n                        });\n                    }\n                    MouseX = mousepos.x;\n                    MouseY = mousepos.y;\n                };\n                document.addEventListener(\"mousemove\", mousemove);\n                function generateRandomNumber(min, max) {\n                    return Math.random() * (max - min) + min;\n                }\n                const createTeam = ()=>{\n                    var teamname = document.getElementById(\"teamname\").value;\n                    var checked, checked2, checked3;\n                    var checked = document.getElementById(\"hidden\").checked;\n                    var checked2 = document.getElementById(\"private\").checked;\n                    var checked3 = document.getElementById(\"teamScore\").checked;\n                    var description = document.getElementById(\"teamDescription\").value;\n                    var govType = document.querySelector('input[name=\"teamType\"]:checked').value;\n                    var ScheduledBasedTax = document.getElementById(\"ScheduledBased\").value;\n                    var ScheduledBasedTaxInterval = document.getElementById(\"time-select\").value;\n                    var description = document.getElementById(\"Simple\").value;\n                    document.getElementById(\"teambox\").style.display = \"none\";\n                    joinLeave.innerText = \"Leave\";\n                    createDelete.innerText = \"Delete\";\n                    send(\"newTeamCreated\", {\n                        private: checked2,\n                        hidden: checked,\n                        name: teamname,\n                        description: description,\n                        govType: govType,\n                        createTeamScore: checked3,\n                        simpleTax: document.getElementById(\"Simple\").value,\n                        playerTax: document.getElementById(\"scoreBased\").value,\n                        ScheduledBasedTax,\n                        ScheduledBasedTaxInterval\n                    });\n                    owner_of_team = true;\n                };\n                document.getElementById(\"teamButton\").addEventListener(\"click\", createTeam);\n                function bounceBackAndRecoil(i, Bsize, Bspeed, anlge_) {\n                    cannonWidth[i] = cannonWidth[i] || 0;\n                    for(let t = 0; t < 10; t++){\n                        setTimeout(()=>{\n                            cannonWidth[i] -= 1;\n                            send(\"playerCannonWidth\", {\n                                cannonW: cannonWidth\n                            });\n                        }, 10 * t);\n                        setTimeout(()=>{\n                            cannonWidth[i] += 1;\n                            send(\"playerCannonWidth\", {\n                                cannonW: cannonWidth\n                            });\n                        }, 20 * t); // Updated to prevent overlap\n                    }\n                    let recoilX = -(Bsize / 10 * Bspeed * Math.cos(anlge_));\n                    let recoilY = -(Bsize / 10 * Bspeed * Math.sin(anlge_));\n                    for(let i = 0; i < playerSpeed; i++)setTimeout(()=>{\n                        movePlayer(recoilX / 15, recoilY / 15, i == playerSpeed - 1);\n                    }, 15 * i);\n                }\n                function fireOnce(evt, directer) {\n                    let tankdata = tankmeta[__type__];\n                    let tankdatacannon = tankdata.cannons;\n                    if (!autoFiring && !directer) {\n                        if (evt.button === 2) return;\n                    }\n                    var angle = getCannonAngle();\n                    tankdatacannon.forEach((cannon, i)=>{\n                        if (!cannonFireData[i]) return;\n                        cannonFireData[i] = false;\n                        setTimeout(()=>{\n                            if (cannon.type === \"autoCannon\" || cannon.type === \"SwivelAutoCannon\") return;\n                            if (!directer && cannon.type === \"directer\") return;\n                            let bullet_size_l = bullet_size * cannon[\"bulletSize\"];\n                            let randomNumber = generateRandomNumber(-0.2, 0.2);\n                            if (cannon[\"type\"] === \"basicCannon\" || cannon[\"type\"] === \"trap\") {\n                                var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\n                                var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-height\"];\n                                var angle_ = angle + cannon[\"offset-angle\"];\n                            } else if (cannon[\"type\"] === \"trapezoid\") {\n                                var angle_ = angle + cannon[\"offset-angle\"] + randomNumber;\n                                var xxx = cannon[\"cannon-width-top\"];\n                                var yyy = cannon[\"cannon-height\"] - bullet_size_l * 2 - cannon[\"cannon-width-top\"] / 2 * Math.random();\n                            } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\n                                var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\n                                var yyy = cannon[\"cannon-height\"] - bullet_size_l / 2;\n                                var angle_ = angle + cannon[\"offset-angle\"];\n                            } else if (cannon[\"type\"] === \"rocketer\") {\n                                var xxx = cannon[\"cannon-width-bottom\"] + bullet_size_l / 2;\n                                var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-width-bottom\"];\n                                var angle_ = angle + cannon[\"offset-angle\"];\n                            } else {\n                                var xxx = cannon[\"cannon-height\"] + bullet_size_l / 2;\n                                var yyy = 0;\n                                var angle_ = angle + cannon[\"offset-angle\"];\n                            }\n                            let rotated_offset_x = (cannon[\"offSet-x\"] + xxx) * Math.cos(angle_) - (cannon[\"offSet-y\"] + yyy) * Math.sin(angle_);\n                            let rotated_offset_y = (cannon[\"offSet-x\"] + xxx) * Math.sin(angle_) + (cannon[\"offSet-y\"] + yyy) * Math.cos(angle_);\n                            let bullet_start_x = playerX + rotated_offset_x;\n                            let bullet_start_y = playerY + rotated_offset_y;\n                            let identdfire = Date.now() + Math.random();\n                            let bullet_speed__ = bullet_speed * cannon[\"bulletSpeed\"];\n                            bounceBackAndRecoil(i, bullet_size_l, bullet_speed__, angle_);\n                            let vertices = 0;\n                            if (cannon[\"type\"] === \"basicCannon\" || cannon[\"type\"] === \"trapezoid\") {\n                                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 6);\n                                var type = \"basic\";\n                                var health = 8;\n                            } else if (cannon[\"type\"] === \"trap\") {\n                                var bulletdistance = bullet_speed__ * 70 * (bullet_size / 20);\n                                var type = \"trap\";\n                                var health = 10;\n                                const rawvertices = calculateTriangleVertices(bullet_start_x, bullet_start_y, bullet_size_l, 0);\n                                vertices = rawvertices;\n                            } else if (cannon[\"type\"] === \"directer\") {\n                                var bulletdistance = 100;\n                                var type = \"directer\";\n                                var health = 10;\n                                const rawvertices = calculateTriangleVertices(bullet_start_x, bullet_start_y, bullet_size_l, 0);\n                                vertices = rawvertices;\n                            } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\n                                var bulletdistance = bullet_speed__ * 105 * (bullet_size / 6);\n                                var type = \"AutoBullet\";\n                                var health = 8;\n                            } else if (cannon[\"type\"] === \"rocketer\") {\n                                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\n                                var type = \"rocketer\";\n                                var health = 9;\n                            } else if (cannon[\"type\"] === \"paver\") {\n                                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\n                                var type = \"roadMap\";\n                                var health = 6;\n                            }\n                            let cannon_life = cannon[\"life-time\"] || 0;\n                            let bullet = {\n                                type: type,\n                                bullet_distance: bulletdistance,\n                                speed: bullet_speed__,\n                                size: bullet_size_l,\n                                angle: angle_,\n                                bullet_damage: bullet_damage * cannon[\"bulletSize\"],\n                                distanceTraveled: 0,\n                                vertices: vertices,\n                                bullet_pentration: bullet_pentration * cannon[\"bullet_pentration\"],\n                                x: bullet_start_x,\n                                y: bullet_start_y,\n                                lifespan: cannon_life,\n                                parentindex: i,\n                                health: health,\n                                xstart: playerX,\n                                ystart: playerY,\n                                uniqueid: identdfire,\n                                cannonIndex: i\n                            };\n                            send(\"bulletFired\", bullet);\n                        }, cannon.delay * 1000);\n                        if (!(cannonFireData[i] || tankmeta.dronetanks.includes(__type__))) setTimeout(()=>{\n                            cannonFireData[i] = true;\n                        }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\n                    });\n                }\n                function FireIntervale(evt) {\n                    let tankdata = tankmeta[__type__];\n                    let tankdatacannon = tankdata[\"cannons\"];\n                    if (autoFiring) return;\n                    if (!autoFiring && evt) {\n                        if (evt.button === 2) return;\n                    }\n                    tankdatacannon.forEach((cannon, i)=>{\n                        firingInterval = setInterval((event = evt, MouseY__ = MouseY_, MouseX__ = MouseX_)=>{\n                            canFire2 = false;\n                            let angle = getCannonAngle();\n                            if (autoFiring) return;\n                            let tankdatacannondata = tankdatacannon[i];\n                            setTimeout(()=>{\n                                if (cannon.type === \"autoCannon\" || cannon.type === \"SwivelAutoCannon\") return;\n                                let bullet_size_l = bullet_size * cannon[\"bulletSize\"];\n                                let randomNumber = generateRandomNumber(-0.2, 0.2);\n                                if (cannon[\"type\"] === \"basicCannon\" || cannon[\"type\"] === \"trap\") {\n                                    var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\n                                    var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-height\"];\n                                    var angle_ = angle + cannon[\"offset-angle\"];\n                                } else if (cannon[\"type\"] === \"trapezoid\") {\n                                    var angle_ = angle + cannon[\"offset-angle\"] + randomNumber;\n                                    var xxx = cannon[\"cannon-width-top\"] - bullet_size_l * 1.5;\n                                    var yyy = cannon[\"cannon-height\"] - bullet_size_l * 2 - cannon[\"cannon-width-top\"] / 2 * Math.random();\n                                } else if (cannon[\"type\"] === \"directer\") {\n                                    var bulletdistance = 100;\n                                    var type = \"directer\";\n                                    var health = 10;\n                                    const rawvertices = calculateTriangleVertices(bullet_start_x, bullet_start_y, bullet_size_l, 0);\n                                    vertices = rawvertices;\n                                } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\n                                    var xxx = cannon[\"cannon-width\"] - bullet_size_l * 1.5;\n                                    var yyy = cannon[\"cannon-height\"] - bullet_size_l * 2;\n                                    var angle_ = angle + cannon[\"offset-angle\"];\n                                } else if (cannon[\"type\"] === \"rocketer\") {\n                                    var xxx = cannon[\"cannon-width-bottom\"] + bullet_size_l * 2;\n                                    var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-width-bottom\"];\n                                    var angle_ = angle + cannon[\"offset-angle\"];\n                                } else {\n                                    var xxx = cannon[\"cannon-width-top\"] / 2;\n                                    var yyy = cannon[\"cannon-width-top\"] / 2;\n                                    var angle_ = angle + cannon[\"offset-angle\"];\n                                }\n                                let rotated_offset_x = (cannon[\"offSet-x\"] + xxx) * Math.cos(angle_) - (cannon[\"offSet-y\"] + yyy) * Math.sin(angle_);\n                                let rotated_offset_y = (cannon[\"offSet-x\"] + xxx) * Math.sin(angle_) + (cannon[\"offSet-y\"] + yyy) * Math.cos(angle_);\n                                let bullet_start_x = playerX + rotated_offset_x;\n                                let bullet_start_y = playerY + rotated_offset_y;\n                                // lol\n                                let identdfire = Date.now() + Math.random();\n                                let bullet_speed__ = bullet_speed * cannon[\"bulletSpeed\"];\n                                bounceBackAndRecoil(i, bullet_size_l, bullet_speed__, angle_);\n                                let vertices = 0;\n                                if (cannon[\"type\"] === \"basicCannon\" || cannon[\"type\"] === \"trapezoid\") {\n                                    var bulletdistance = bullet_speed__ * 100 * (bullet_size / 6);\n                                    var type = \"basic\";\n                                    var health = 8;\n                                } else if (cannon[\"type\"] === \"trap\") {\n                                    var bulletdistance = bullet_speed__ * 70 * (bullet_size / 20);\n                                    var type = \"trap\";\n                                    var health = 10;\n                                    const rawvertices = calculateTriangleVertices(bullet_start_x, bullet_start_y, bullet_size_l, 0);\n                                    vertices = rawvertices;\n                                } else if (cannon[\"type\"] === \"directer\") {\n                                    var bulletdistance = 100;\n                                    var type = \"directer\";\n                                    var health = 10;\n                                    bullet_speed__ += 10;\n                                    const rawvertices = calculateTriangleVertices(bullet_start_x, bullet_start_y, bullet_size_l, 0);\n                                    vertices = rawvertices;\n                                } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\n                                    var bulletdistance = bullet_speed__ * 105 * (bullet_size / 6);\n                                    var type = \"AutoBullet\";\n                                    var health = 8;\n                                } else if (cannon[\"type\"] === \"rocketer\") {\n                                    var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\n                                    var type = \"rocketer\";\n                                    var health = 9;\n                                } else if (cannon[\"type\"] === \"paver\") {\n                                    var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\n                                    var type = \"roadMap\";\n                                    var health = 6;\n                                }\n                                let cannon_life = cannon[\"life-time\"] || 0;\n                                let bullet = {\n                                    type: type,\n                                    bullet_distance: bulletdistance,\n                                    speed: bullet_speed__,\n                                    size: bullet_size_l,\n                                    angle: angle_,\n                                    bullet_damage: bullet_damage * cannon[\"bulletSize\"],\n                                    distanceTraveled: 0,\n                                    vertices: vertices,\n                                    bullet_pentration: bullet_pentration * cannon[\"bullet_pentration\"],\n                                    x: bullet_start_x,\n                                    y: bullet_start_y,\n                                    lifespan: cannon_life,\n                                    health: health,\n                                    parentindex: i,\n                                    xstart: playerX,\n                                    ystart: playerY,\n                                    uniqueid: identdfire,\n                                    cannonIndex: i\n                                };\n                                send(\"bulletFired\", bullet);\n                            }, tankdatacannondata[\"delay\"] * 1000);\n                        }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\n                        name = JSON.stringify(firingInterval + i);\n                        firingIntervals[name] = firingInterval;\n                    });\n                }\n                const fireCannon = (evt)=>{\n                    if (teampanelopen) return;\n                    fireOnce(evt, false);\n                };\n                document.addEventListener(\"mousedown\", fireCannon);\n                window.addEventListener(\"resize\", ()=>{\n                    scaleby(0);\n                });\n                const perventEvent = (evt)=>{\n                    if (!teampanelopen) evt.preventDefault();\n                };\n                document.addEventListener(\"click\", perventEvent);\n                let __tankdata__ = tankmeta[__type__];\n                function autoengine() {\n                    __tankdata__ = tankmeta[__type__];\n                    if (!tankmeta.dronetanks.includes(__type__) && autoFiring) {\n                        __tankdata__ = tankmeta[__type__];\n                        if (firingInterval) {\n                            clearInterval(firingInterval);\n                            firingInterval = null;\n                        }\n                        fireOnce();\n                    }\n                    if (tankmeta.dronetanks.includes(__type__)) {\n                        let i = 0;\n                        for(var {} in tankmeta[__type__][\"cannons\"]){\n                            if (drones <= tankmeta[__type__][\"cannons\"][i][\"max-drones\"] && tankmeta[__type__][\"cannons\"][i].type === \"directer\") {\n                                fireOnce(null, true);\n                                cannonFireData[i] = true;\n                                drones += 1;\n                            }\n                            i++;\n                        }\n                    }\n                    setTimeout(()=>{\n                        autoengine();\n                    }, baseFireInterval * __tankdata__[\"reaload-m\"] * __reload__);\n                }\n                setTimeout(()=>{\n                    autoengine();\n                }, baseFireInterval * __tankdata__[\"reaload-m\"] * __reload__);\n                var Xbutton = document.getElementById(\"Xbutton\");\n                const closeTeamPanel = ()=>{\n                    teampanelopen = false;\n                    var teamcontainer = document.getElementById(\"teamcontainer\");\n                    var teamMain = document.getElementById(\"teamMain\");\n                    teamcontainer.style.display = \"none\";\n                    teamMain.style.display = \"none\";\n                    document.getElementById(\"confermationScreen\").style.display = \"none\";\n                    document.getElementById(\"teambox\").style.display = \"none\";\n                    document.getElementsByTagName(\"body\")[0].style.cursor = \"url('https://deip-io3.glitch.me/targetpointer1.cur'), auto\";\n                };\n                Xbutton.addEventListener(\"click\", closeTeamPanel);\n                var joinLeave = document.getElementById(\"join/leave\");\n                const joinLeaveClick = ()=>{\n                    if (!joinedTeam) {\n                        if (selected_class !== null) {\n                            send(\"playerJoinedTeam\", {\n                                teamId: selected_class\n                            });\n                            joinLeave.innerText = \"Leave\";\n                            createDelete.style.display = \"none\";\n                        }\n                    } else {\n                        send(\"playerLeftTeam\", {\n                            teamId: players[playerId].team\n                        });\n                        createDelete.style.display = \"block\";\n                        createDelete.innerText = \"Create\";\n                        if (owner_of_team) {\n                            owner_of_team = false;\n                            document.getElementById(\"teambox\").style.display = \"none\";\n                            document.getElementsByClassName(\"outer-box\")[0].classList.remove(\"outer-onwer-box\");\n                            document.getElementsByClassName(\"inner-box\")[0].classList.remove(\"inner-onwer-box\");\n                            document.getElementById(\"confermationScreen\").style.display = \"none\";\n                            document.getElementById(\"upgradesBox\").style.display = \"none\";\n                        }\n                        joinLeave.innerText = \"Join\";\n                        if (isCrazyGames) window.CrazyGames.SDK.game.hideInviteButton();\n                        joinedTeam = false;\n                        socialContainer.style.display = \"none\";\n                        selected_class = null;\n                    }\n                };\n                joinLeave.addEventListener(\"click\", joinLeaveClick);\n                var createDelete = document.getElementById(\"create/delete\");\n                const deleteTeam = ()=>{\n                    if (!owner_of_team) document.getElementById(\"teambox\").style.display = \"block\";\n                    else if (owner_of_team && joinedTeam) send(\"deleteTeam\", {\n                        teamID: teamOn\n                    });\n                };\n                createDelete.addEventListener(\"click\", deleteTeam);\n                const canvasOpener = (evt)=>{\n                    if (window.innerWidth - 475 < MouseX && MouseX < window.innerWidth - 275 && MouseY > 10 && MouseY < 110 && !teampanelopen) {\n                        teampanelopen = true;\n                        var teamcontainer_ = document.getElementById(\"teamMain\");\n                        teamcontainer_.style.display = \"block\";\n                        selected_class = null;\n                        document.getElementsByTagName(\"body\")[0].style.cursor = \"auto\";\n                        var teamcontainer = document.getElementById(\"teamcontainer\");\n                        teamcontainer.style.display = \"block\";\n                        teamcontainer.style.height = \"95%\";\n                        teamcontainer.style.margin = \"5px\";\n                        teamcontainer.innerHTML = \"\";\n                        buildTeamList();\n                        return;\n                    }\n                    if (teampanelopen) return;\n                    if (!tankmeta.dronetanks.includes(__type__) && !teampanelopen && !dead) FireIntervale(evt);\n                    else if (evt.button === 2 && !dead) send(\"MouseAway\", {});\n                };\n                document.addEventListener(\"mousedown\", canvasOpener);\n                const mouseStateChange = ()=>{\n                    for(const interval in firingIntervals){\n                        firingInterval = firingIntervals[interval];\n                        clearInterval(firingInterval);\n                        firingInterval = null;\n                        canFire2 = true;\n                    }\n                    send(\"MousestateUpdate\", {});\n                };\n                document.addEventListener(\"mouseup\", mouseStateChange);\n            }, 0);\n        };\n        function drawRoundedLevelBar(ctx, x, y, width, height, radius, progress, barcolor, barXP, barbourder, filllevel) {\n            // Full bar\n            ctx.fillStyle = barcolor;\n            if (barbourder !== false) ctx.strokeStyle = barbourder;\n            ctx.beginPath();\n            ctx.roundRect(x, y, width, height, radius);\n            ctx.fill();\n            if (barbourder) ctx.stroke();\n            ctx.closePath();\n            // Filled bar (progress)\n            var filledWidth = width * progress;\n            if (filledWidth < 0) filledWidth = 0;\n            ctx.fillStyle = barXP;\n            ctx.beginPath();\n            ctx.moveTo(x + radius, y);\n            if (filledWidth > radius) {\n                ctx.lineTo(x + filledWidth - radius, y);\n                if (filledWidth < width - radius) {\n                    ctx.quadraticCurveTo(x + filledWidth, y, x + filledWidth, y + radius);\n                    ctx.lineTo(x + filledWidth, y + height - radius);\n                    ctx.quadraticCurveTo(x + filledWidth, y + height, x + filledWidth - radius, y + height);\n                } else {\n                    ctx.lineTo(x + width - radius, y);\n                    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n                    ctx.lineTo(x + width, y + height - radius);\n                    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n                    ctx.lineTo(x + filledWidth - radius, y + height);\n                }\n                ctx.lineTo(x + radius, y + height);\n                ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n                ctx.lineTo(x, y + radius);\n                ctx.quadraticCurveTo(x, y, x + radius, y);\n            } else {\n                ctx.beginPath();\n                ctx.roundRect(x, y, filledWidth, height, radius);\n            }\n            ctx.closePath();\n            ctx.fill();\n            if (filllevel) {\n                ctx.fillStyle = \"#0228c2\";\n                ctx.strokeStyle = \"black\";\n                ctx.textAlign = \"center\";\n                ctx.font = `bold ${40 * (1 + (1 - scaleFactor))}px Nunito`;\n                ctx.strokeText(level, canvas.width / 2, canvas.height - button10 * 6);\n                ctx.fillText(level, canvas.width / 2, canvas.height - button10 * 6);\n                try {\n                    ctx.drawImage(img, canvas.width / 2 - button40 / 2, canvas.height - button10 * 15, button40, button40);\n                } catch  {}\n            }\n        }\n        const movePlayer = (dx, dy, last)=>{\n            movementTimeouts.shift();\n            cavansX += dx;\n            playerY += dy;\n            cavansY += dy;\n            playerX += dx;\n            send(\"playerMoved\", {\n                x: playerX,\n                y: playerY,\n                dx: dx,\n                dy: dy,\n                last: last\n            });\n        };\n        function MathHypotenuse(x, y) {\n            return Math.sqrt(x * x + y * y);\n        }\n        const checkCollisions = ()=>{\n            for(let playerId_ in players){\n                let player = players[playerId_];\n                let distance = MathHypotenuse(player.x - playerX, player.y - playerY);\n                if (distance < player.size * playerBaseSize + playerSize * playerBaseSize && playerId_ !== playerId && !(players[playerId_]?.team === players[playerId]?.team && players[playerId_]?.team !== null && players[playerId]?.team !== null)) {\n                    send(\"playerCollided\", {\n                        id_other: playerId_,\n                        damagetaken: player.bodyDamage,\n                        damagegiven: bodyDamage,\n                        id_self: playerId\n                    });\n                    playerHealTime = 0;\n                    send(\"playerHealintterupted\", {});\n                    canmove = false;\n                    setTimeout(()=>{\n                        canmove = true;\n                    }, 10 * playerSpeed);\n                    if (player.x < playerX /* left */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(-2, 0, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.x > playerX /* right */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(2, 0, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.y > playerY /* up */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(0, -2, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.y < playerY /* down */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(0, 2, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                // Reverse the last movement\n                } else if (distance < player.size * playerBaseSize + playerSize * playerBaseSize && playerId_ !== playerId) {\n                    canmove = false;\n                    setTimeout(()=>{\n                        canmove = true;\n                    }, 10 * playerSpeed);\n                    if (player.x < playerX /* left */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(-2, 0, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.x > playerX /* right */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(2, 0, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.y > playerY /* up */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(0, -2, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                    if (player.y < playerY /* down */ ) for(let c = 0; c < playerSpeed; c++)setTimeout(()=>{\n                        movePlayer(0, 2, c === playerSpeed - 1, c);\n                    }, 50 * c);\n                }\n            }\n        };\n        const handleMovement = (dx, dy)=>{\n            if (playerX + dx > mapLeft && playerX + dx < mapRight && playerY + dy > mapTop && playerY + dy < mapBottom) {\n                for(let i = 0; i < playerSpeed / 2; i++){\n                    var movement = setTimeout(()=>{\n                        movePlayer(dx, dy, i === playerSpeed - 1 || i === 0);\n                    }, 80 * i);\n                    movementTimeouts.push({\n                        timeout: movement,\n                        bouceBack: true\n                    });\n                }\n                checkCollisions(dx, dy);\n            } else if (playerX + dx > mapLeft && dy === 0) {\n                movementTimeouts.forEach((timeout)=>{\n                    clearTimeout(timeout.timeout);\n                });\n                movementTimeouts = [];\n                for(let i = 0; i < playerSpeed / 3; i++){\n                    var movement = setTimeout(()=>{\n                        movePlayer(-3, 0, i === playerSpeed - 1 || i === 0);\n                    }, 75 * i);\n                    movementTimeouts.push({\n                        timeout: movement,\n                        bouceBack: true\n                    });\n                }\n            } else if (playerX + dx < mapRight && dy === 0) {\n                movementTimeouts.forEach((timeout)=>{\n                    clearTimeout(timeout.timeout);\n                });\n                movementTimeouts = [];\n                for(let i = 0; i < playerSpeed / 3; i++){\n                    var movement = setTimeout(()=>{\n                        movePlayer(3, 0, i === playerSpeed - 1 || i === 0);\n                    }, 75 * i);\n                    movementTimeouts.push({\n                        timeout: movement,\n                        bouceBack: true\n                    });\n                }\n            } else if (playerY > -mapTop) {\n                movementTimeouts.forEach((timeout)=>{\n                    clearTimeout(timeout.timeout);\n                });\n                movementTimeouts = [];\n                for(let i = 0; i < playerSpeed / 3; i++){\n                    var movement = setTimeout(()=>{\n                        movePlayer(0, -3, i === playerSpeed - 1 || i === 0);\n                    }, 75 * i);\n                    movementTimeouts.push({\n                        timeout: movement,\n                        bouceBack: true\n                    });\n                }\n            }\n            if (playerY < -mapBottom) {\n                movementTimeouts.forEach((timeout)=>{\n                    clearTimeout(timeout.timeout);\n                });\n                movementTimeouts = [];\n                for(let i = 0; i < playerSpeed / 3; i++){\n                    var movement = setTimeout(()=>{\n                        movePlayer(0, 3, i === playerSpeed - 1 || i === 0);\n                    }, 75 * i);\n                    movementTimeouts.push({\n                        timeout: movement,\n                        bouceBack: true\n                    });\n                }\n            }\n        };\n        var oWidth = canvas.width;\n        var oHieght = canvas.height;\n        function rotatePointAroundPlayer(cannonOffsetX, cannonOffsetY, playerRotation) {\n            // Convert player rotation to radians for math\n            const playerRotationRad = playerRotation * (Math.PI / 180);\n            // Rotate cannon's offset position based on player rotation\n            const rotatedX = cannonOffsetX * Math.cos(playerRotationRad) - cannonOffsetY * Math.sin(playerRotationRad);\n            const rotatedY = cannonOffsetX * Math.sin(playerRotationRad) + cannonOffsetY * Math.cos(playerRotationRad);\n            return [\n                rotatedX,\n                rotatedY\n            ];\n        }\n        var scaleFactor = 1;\n        function scaleby(scaleDown) {\n            scaleFactor -= scaleDown;\n            oWidth = window.innerWidth;\n            oHieght = window.innerHeight;\n            canvas.width = oWidth;\n            canvas.height = oHieght;\n            var upscaleX_ = oWidth / (canvas.width * scaleFactor);\n            var upscaleY_ = oHieght / (canvas.height * scaleFactor);\n            canvas.width *= upscaleX_;\n            canvas.height *= upscaleY_;\n            ctx.scale(scaleFactor, scaleFactor);\n            send(\"FOVUpdate\", {\n                scaleFactor: scaleFactor,\n                canvasW: canvas.width,\n                canvasH: canvas.height,\n                screenW: oWidth,\n                screenH: oHieght\n            });\n            Ghostcanvas.width = oWidth;\n            Ghostcanvas.height = oHieght;\n            boundrectcanvas = Ghostcanvas.getBoundingClientRect();\n            var canW1 = canW;\n            var canH1 = canH;\n            canW = canvas.width;\n            canH = canvas.height;\n            playerX -= canW1 / 2;\n            playerY -= canH1 / 2;\n            playerX += canW / 2;\n            playerY += canH / 2;\n            playerX -= canW / 2 - canW1 / 2;\n            playerY -= canH / 2 - canH1 / 2;\n            cavansX -= canW / 2 - canW1 / 2;\n            cavansY -= canH / 2 - canH1 / 2;\n            teamwidth = 0.15625 * canvas.width; // 297.1875\n            teamheight = 0.33333333333333333333333333 * canvas.height;\n            innerteamwidth = 0.14322916666 * canvas.width;\n            innerteamheight = 0.308333333333333333333 * canvas.height;\n            innerteamwidthreal = 0.14322916666 * window.innerWidth;\n            innerteamheightreal = 0.308333333333333333333 * window.innerHeight;\n            buttton140 = 0.07291666666 * canvas.width; // tested screen height is 1031x1920\n            button275 = 0.14322916666 * canvas.width;\n            button375 = 137.499999994 * upscaleX_ + 237.5 * upscaleX_;\n            button462_5 = 87.5 * upscaleX_ + button375;\n            button475 = 100 * upscaleX_ + button375;\n            button80 = 0.07759456838 * canvas.height;\n            button40 = 0.0208333333 * canvas.width;\n            button10 = 0.00969932104 * canvas.height;\n            button110 = 0.10669253152 * canvas.height;\n            barWidth = 0.3125 * canvas.width;\n            barHeight = 0.02909796314 * canvas.height;\n            document.getElementById(\"gridLight\").style[\"grid-template-columns\"] = `repeat(10, ${999 * scaleFactor + 1}px)`;\n            document.getElementById(\"gridLight\").style[\"grid-template-rows\"] = `repeat(10, ${999 * scaleFactor + 1}px)`;\n            document.getElementById(\"gridLight\").style.width = `${10000 * scaleFactor}px`;\n            document.getElementById(\"gridLight\").style.height = `${10000 * scaleFactor}px`;\n            document.getElementById(\"gridLight\").childNodes.forEach((node)=>{\n                node.style.width = `${999 * scaleFactor}px`;\n                node.style.height = `${999 * scaleFactor}px`;\n            });\n            document.getElementById(\"gridDark\").style[\"grid-template-columns\"] = `repeat(10, ${999 * scaleFactor + 1}px)`;\n            document.getElementById(\"gridDark\").style[\"grid-template-rows\"] = `repeat(10, ${999 * scaleFactor + 1}px)`;\n            document.getElementById(\"gridDark\").style.width = `${10000 * scaleFactor}px`;\n            document.getElementById(\"gridDark\").style.height = `${10000 * scaleFactor}px`;\n            document.getElementById(\"gridDark\").childNodes.forEach((node)=>{\n                node.style.width = `${999 * scaleFactor}px`;\n                node.style.height = `${999 * scaleFactor}px`;\n            });\n        }\n        function calculateTriangleVertices(x, y, sideLength, angle) {\n            const height = Math.sqrt(3) / 2 * sideLength; // Height of an equilateral triangle\n            const radius = height / Math.sqrt(3); // Circumradius of the triangle\n            const vertices = [];\n            for(let i = 0; i < 3; i++){\n                const theta = angle + i * (2 * Math.PI / 3); // 120-degree increments\n                const vx = x + radius * Math.cos(theta);\n                const vy = y + radius * Math.sin(theta);\n                vertices.push({\n                    x: vx,\n                    y: vy\n                });\n            }\n            return vertices;\n        }\n        class notify {\n            constructor(ctx, announcements, width = 500, height = 27, dropDownTime = 500, font = \"bold 20px arial\", textAling = \"center\", margin = 3, startHeight = 100, shovespeed = 10){\n                this.announcements = announcements;\n                this.ctx = ctx;\n                this.anoucmentW = width;\n                this.anoucmentW2 = width / 2;\n                this.anoucmentH = height;\n                this.dropDownTime = dropDownTime;\n                this.font = font;\n                this.textAling = textAling;\n                this.boundrectH = height + margin;\n                this.startHeight = startHeight;\n                this.shovespeed = shovespeed;\n                this.shovespeed5 = shovespeed * 5;\n                this.boundrectH10 = this.boundrectH - 10;\n            }\n            run() {\n                var shovedown = 50;\n                var shoved_down_anoucment = {};\n                var exW = 1; // scale factors\n                var exH = 1; // scale factors\n                var i = 0;\n                this.announcements.forEach((anoucment)=>{\n                    if (Date.now() <= anoucment.shovedowndate) {\n                        i++;\n                        var shovedownper = 0;\n                        this.ctx.globalAlpha = anoucment.trans;\n                        this.ctx.fillStyle = anoucment.color;\n                        this.ctx.font = \"bold 20px arial\";\n                        this.ctx.textAlign = \"center\";\n                        if (Date.now() >= anoucment.expiretime && Date.now() <= anoucment.shovedowndate) {\n                            shovedown = this.shovespeed5 / ((anoucment.shovedowndate - Date.now()) / this.dropDownTime);\n                            shovedown = shovedown <= 0 ? 0 : shovedown;\n                            shoved_down_anoucment = anoucment;\n                        }\n                        shovedownper = shovedown;\n                        if (Date.now() <= anoucment.expiretime) {\n                            shovedownper = shovedownper >= this.shovespeed5 ? this.shovespeed5 : shovedownper;\n                            shovedownper = shovedownper <= 0 ? 0 : shovedownper;\n                        }\n                        if (Date.now() <= shoved_down_anoucment.shovedowndate) {\n                            var r = (shoved_down_anoucment.shovedowndate - Date.now()) / this.shovespeed < this.boundrectH ? (shoved_down_anoucment.shovedowndate - Date.now()) / this.shovespeed : this.boundrectH;\n                            shovedownper -= r;\n                            shovedownper += this.boundrectH;\n                        }\n                        shovedownper = shovedownper <= 0 ? 0 : shovedownper;\n                        this.ctx.globalAlpha -= (canvas.height / 2 - (this.startHeight - shovedownper - this.boundrectH10 + i * this.boundrectH * exH)) / canvas.height;\n                        this.ctx.beginPath();\n                        this.ctx.roundRect(canvas.width / 2 - this.anoucmentW2 * exW, this.startHeight - shovedownper - this.boundrectH10 + i * this.boundrectH * exH, this.anoucmentW * exW, this.anoucmentH * exH, anoucment.rounding);\n                        this.ctx.fill();\n                        this.ctx.closePath();\n                        this.ctx.fillText(anoucment.text, canvas.width / 2, (this.startHeight - shovedownper + i * this.boundrectH) * exH);\n                    }\n                });\n                this.ctx.globalAlpha = 1;\n            }\n        }\n        var newnotify = new notify(ctx, announcements);\n        function drawself(exW, exH) {\n            pentarotate += 0.1;\n            newnotify.announcements = announcements;\n            ctx.fillStyle = squareColor;\n            let angle = getCannonAngle();\n            if (!messaging) {\n                if (canmove) {\n                    if (keysPressed[\"]\"]) {\n                        players[playerId].score += 50;\n                        score = players[playerId].score;\n                        levelHANDLER();\n                    } else if (keysPressed[\"ArrowLeft\"] && keysPressed[\"ArrowUp\"] || keysPressed[\"a\"] && keysPressed[\"w\"]) handleMovement(-1, -1);\n                    else if (keysPressed[\"ArrowLeft\"] && keysPressed[\"ArrowDown\"] || keysPressed[\"a\"] && keysPressed[\"s\"]) handleMovement(-1, 1);\n                    else if (keysPressed[\"ArrowRight\"] && keysPressed[\"ArrowUp\"] || keysPressed[\"d\"] && keysPressed[\"w\"]) handleMovement(1, -1);\n                    else if (keysPressed[\"ArrowRight\"] && keysPressed[\"ArrowDown\"] || keysPressed[\"d\"] && keysPressed[\"s\"]) handleMovement(1, 1);\n                    else if (keysPressed[\"ArrowUp\"] || keysPressed[\"w\"]) handleMovement(0, -1);\n                    else if (keysPressed[\"ArrowDown\"] || keysPressed[\"s\"]) handleMovement(0, 1);\n                    else if (keysPressed[\"ArrowLeft\"] || keysPressed[\"a\"]) handleMovement(-1, 0);\n                    else if (keysPressed[\"ArrowRight\"] || keysPressed[\"d\"]) handleMovement(1, 0);\n                }\n                if (canKeyPress) {\n                    if (keysPressed[\"-\"]) {\n                        scaleby(0.1);\n                        waitpls();\n                    } else if (keysPressed[\"1\"]) {\n                        if (statsTree[\"Health\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Health\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Health\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"2\"]) {\n                        if (statsTree[\"Body Damage\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Body Damage\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Body Damage\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"3\"]) {\n                        if (statsTree[\"Regen\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Regen\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Regen\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"4\"]) {\n                        if (statsTree[\"Bullet Pentration\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Bullet Pentration\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Bullet Pentration\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"5\"]) {\n                        if (statsTree[\"Bullet Speed\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Bullet Speed\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Bullet Speed\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"6\"]) {\n                        if (statsTree[\"Bullet Damage\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Bullet Damage\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Bullet Damage\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"7\"]) {\n                        if (statsTree[\"Bullet Reload\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Bullet Reload\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Bullet Reload\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"8\"]) {\n                        if (statsTree[\"Speed\"] < maxUP && upgradePoints > 0) {\n                            statsTree[\"Speed\"] += 1;\n                            upgradePoints -= 1;\n                            send(\"statUpgrade\", {\n                                Upgradetype: \"Speed\",\n                                UpgradeLevel: 1\n                            });\n                        }\n                        waitpls();\n                    } else if (keysPressed[\"=\"]) FOV += 0.1;\n                    else if (keysPressed[\"e\"]) {\n                        send(\"autoFiringUpdate\", {\n                            autoFiring: !autoFiring\n                        });\n                        if (lockautoRotating) return;\n                        autoFiring = !autoFiring;\n                        if (!autoFiring) canFire = true;\n                        waitpls();\n                    } else if (keysPressed[\"c\"]) {\n                        if (autoRotating && !lockautoRotating) send(\"unrotating\", {});\n                        else send(\"rotate\", {\n                            autoAngle: angle * (180 / pi),\n                            autoIntevals: autoIntevals,\n                            playerSize: playerSize,\n                            FOV: scaleFactor,\n                            canvaswidth: canvas.width,\n                            canvasheight: canvas.height\n                        });\n                        autoRotating = !autoRotating;\n                        waitpls();\n                    }\n                }\n            }\n            newnotify.run();\n            let tankdata = tankmeta[__type__];\n            let tankdatacannon = tankdata[\"cannons\"];\n            let FOVplayerz = playerSize * FOV;\n            if (tankdata.decor) tankdata.decor.forEach((decor_)=>{\n                if (decor_.type === \"octaspinner\") {\n                    ctx.fillStyle = \"black\";\n                    ctx.save();\n                    ctx.translate(canW / 2 + decor_.offsetX, canH / 2 + decor_.offsetY);\n                    ctx.rotate(angle + decor_.offsetAngle);\n                    ctx.beginPath();\n                    for(let i = 0; i < 8; i++){\n                        // calculate the rotation\n                        const rotation = Math.PI * 2 / 8 * i;\n                        // for the first point move to\n                        if (i === 0) ctx.moveTo(decor_.size * Math.cos(rotation), decor_.size * Math.sin(rotation));\n                        else // for the rest draw a line\n                        ctx.lineTo(decor_.size * Math.cos(rotation), decor_.size * Math.sin(rotation));\n                    }\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.restore();\n                }\n            });\n            let gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, playerSize * playerBaseSize / 1.5, canvas.width / 2, canvas.height / 2, radiusConfig.radius);\n            gradient.addColorStop(radiusConfig.build[0], \"#FFFFFF00\");\n            gradient.addColorStop(radiusConfig.build[1], \"#61f7ff\");\n            gradient.addColorStop(radiusConfig.build[2], \"#FFFFFF00\");\n            ctx.beginPath();\n            ctx.arc(canvas.width / 2, canvas.height / 2, radiusConfig.radius, 0, 2 * Math.PI, false);\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.closePath();\n            for(let i = 0; i < Object.keys(tankdatacannon).length; i++){\n                ctx.fillStyle = \"#b3b3b3\";\n                let tankdatacannondata = tankdatacannon[i];\n                let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\n                let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                if (tankdatacannondata[\"type\"] === \"basicCannon\") {\n                    ctx.save();\n                    // Translate to the center of the square\n                    ctx.translate(canW / 2, canH / 2);\n                    let angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    // Draw the square\n                    let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                    let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                    // Add a border to the cannon\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n                    // Restore the previous transformation matrix\n                    ctx.restore();\n                } else if (tankdatacannondata[\"type\"] === \"trapezoid\" || tankdatacannondata[\"type\"] === \"directer\") {\n                    ctx.save();\n                    // Translate to the center of the square\n                    ctx.translate(canW / 2, canH / 2);\n                    let tankdatacannondata = tankdatacannon[i];\n                    var angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    let cannwidthtop = tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\n                    let cannwidthbottom = tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\n                    let cannonHeight = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                    // Draw the square\n                    let basex = cannwidthbottom / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                    let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    const cannonWidth_top = cannwidthtop;\n                    const cannonWidth_bottom = cannwidthbottom;\n                    var canwB2 = cannonWidth_bottom / 2;\n                    var canwH2 = cannonWidth_top / 2;\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.fill();\n                    // Add a border to the cannon\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.stroke(); // Draw the border\n                    ctx.restore();\n                }\n                if (tankdatacannondata[\"type\"] === \"trap\" || tankdatacannondata[\"type\"] === \"paver\") {\n                    ctx.save();\n                    // Translate to the center of the square\n                    ctx.translate(canW / 2, canH / 2);\n                    let angle_offset = tankdatacannondata[\"offset-angle\"];\n                    let trapR = tankdatacannondata[\"trap-to-cannon-ratio\"];\n                    ctx.rotate(angle + angle_offset);\n                    // Draw the square\n                    let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                    let reH = cannon_widthFOV * (1 - trapR);\n                    let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    ctx.fillRect(basex * playerSize * FOV, basey * playerSize * FOV, cannon_widthFOV - reH, cannon_heightFOV);\n                    ctx.strokeStyle = \"lightgrey\";\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(basex * playerSize * FOV, basey * playerSize * FOV, cannon_widthFOV - reH, cannon_heightFOV);\n                    var cannonHeight = reH;\n                    var cannonWidth_top = cannon_heightFOV * 1.4;\n                    var cannonWidth_bottom = cannon_heightFOV;\n                    basex = basex + (cannon_widthFOV - trapR);\n                    var canwB2 = cannonWidth_bottom / 2;\n                    var canwH2 = cannonWidth_top / 2;\n                    basey += canwB2 - trapR;\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.fill();\n                    // Add a border to the cannon\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.stroke(); // Draw the border\n                    ctx.restore();\n                    if (tankdatacannondata[\"type\"] === \"paver\") {\n                        cannon_widthFOV /= 2;\n                        cannon_heightFOV /= 2;\n                        ctx.save();\n                        ctx.translate(canW / 2, canH / 2);\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n                        // Restore the previous transformation matrix\n                        ctx.restore();\n                    }\n                }\n                if (tankdatacannondata[\"type\"] === \"SwivelAutoCannon\") {\n                    ctx.save();\n                    let cannonangle;\n                    let cannonWidth_;\n                    autocannons.forEach((cannonA)=>{\n                        if (cannonA.playerid === playerId && cannonA.autoindex === i) {\n                            cannonangle = cannonA.angle;\n                            cannonWidth_ = cannonA.cannonWidth;\n                        }\n                    });\n                    var offSet_x = tankdatacannondata[\"offSet-x\"];\n                    if (tankdatacannondata[\"offSet-x\"] === \"playerX\") offSet_x = playerSize * playerBaseSize;\n                    if (tankdatacannondata[\"offSet-x-multpliyer\"]) offSet_x *= -1;\n                    let angle0 = getCannonAngle();\n                    var [x, y] = rotatePointAroundPlayer(offSet_x, 0, angle0 * (180 / Math.PI));\n                    ctx.translate(canW / 2 + x, y + canH / 2);\n                    let angle = cannonangle;\n                    let angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    // Draw the square\n                    let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\n                    let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    ctx.beginPath();\n                    ctx.fillRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5);\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5); // Draw the border\n                    // Restore the previous transformation matrix\n                    ctx.rotate(-(angle + angle_offset));\n                    ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.stroke();\n                    ctx.closePath();\n                    ctx.restore();\n                } else if (tankdatacannondata[\"type\"] === \"AutoBulletCannon\") {\n                    ctx.save();\n                    // Translate to the center of the square\n                    ctx.translate(canW / 2, canH / 2);\n                    let angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    // Draw the square\n                    let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                    let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                    // Add a border to the cannon\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n                    // Restore the previous transformation matrix\n                    ctx.beginPath();\n                    ctx.arc(basex + 40 + cannon_widthFOV / 4, basey + cannon_heightFOV / 2, playerSize * FOV * playerBaseSize / 4, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.lineWidth = 5;\n                    ctx.strokeStyle = \"lightgrey\";\n                    ctx.stroke();\n                    ctx.closePath();\n                    ctx.restore();\n                } else if (tankdatacannondata[\"type\"] === \"rocketer\") {\n                    ctx.save();\n                    // Translate to the center of the square\n                    ctx.translate(canW / 2, canH / 2);\n                    let tankdatacannondata = tankdatacannon[i];\n                    var angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    let cannwidthtop = tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\n                    let cannwidthbottom = tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\n                    let cannonHeight = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                    // Draw the square\n                    let basex = cannwidthbottom / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - cannonWidth[i];\n                    let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    const cannonWidth_top = cannwidthtop;\n                    const cannonWidth_bottom = cannwidthbottom;\n                    var canwB2 = cannonWidth_bottom / 2;\n                    var canwH2 = cannonWidth_top / 2;\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.fill();\n                    // Add a border to the cannon\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.beginPath();\n                    ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                    ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                    ctx.lineTo(basex, basey + canwH2);\n                    ctx.lineTo(basex, basey - canwH2);\n                    ctx.closePath(); // Close the path\n                    ctx.stroke();\n                    ctx.fillRect(cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - playerSize)), basey - canwH2, cannon_heightFOV - 40, cannwidthtop);\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - playerSize)), basey - canwH2, cannon_heightFOV - 40, cannwidthtop);\n                    ctx.restore();\n                }\n                zlevelbullets.forEach((NEW_bullet__)=>{\n                    var realx = NEW_bullet__.x - Math.abs(NEW_bullet__.size * 2 * (FOV - 1));\n                    var realy = NEW_bullet__.y - Math.abs(NEW_bullet__.size * 2 * (FOV - 1));\n                    if (NEW_bullet__.transparency) ctx.globalAlpha = NEW_bullet__.transparency;\n                    ctx.beginPath();\n                    if (NEW_bullet__.type === \"basic\") {\n                        if (NEW_bullet__.id === playerId) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let realsize = NEW_bullet__.size * FOV;\n                        ctx.arc(realx - (NEW_bullet__.xstart - (NEW_bullet__.xstart - cavansX)), realy - (NEW_bullet__.ystart - (NEW_bullet__.ystart - cavansY)), realsize, 0, 2 * Math.PI);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                    }\n                    ctx.globalAlpha = 1;\n                });\n                zlevelbullets = [];\n            }\n            ctx.beginPath();\n            ctx.arc(canvas.width / 2, canvas.height / 2, playerSize * playerBaseSize, 0, 2 * Math.PI, false);\n            if (state === \"start\" || state === \"damaged\") {\n                let backwardsObj = {\n                    1: 4,\n                    2: 3,\n                    3: 2,\n                    4: 1,\n                    5: 0.1\n                };\n                let percentage = statecycle % 10 <= 5 ? statecycle % 10 : backwardsObj[statecycle % 10 - 5];\n                percentage /= 10;\n                let newrgb = mix([\n                    130,\n                    130,\n                    130\n                ], [\n                    255,\n                    255,\n                    255\n                ], percentage);\n                ctx.fillStyle = `rgb(${newrgb[0]} ${newrgb[1]} ${newrgb[2]})`;\n            } else ctx.fillStyle = \"#828282\";\n            ctx.fill();\n            ctx.lineWidth = 5;\n            ctx.strokeStyle = \"#aaaaaa\";\n            ctx.stroke();\n            if (skinID !== 0) {\n                ctx.save();\n                ctx.translate(canvas.width / 2, canvas.height / 2);\n                ctx.rotate(angle);\n                ctx.drawImage(images[skinID], 0 - playerSize * playerBaseSize, 0 - playerSize * playerBaseSize, playerBaseSize * 2, playerBaseSize * 2);\n                ctx.restore();\n            }\n            // Draw background bar\n            ctx.fillStyle = \"black\";\n            ctx.beginPath();\n            ctx.roundRect(canvas.width / 2 - 45, canvas.height / 2 + 55, 90, 10, 5);\n            ctx.fill();\n            ctx.closePath();\n            ctx.strokeStyle = \"black\";\n            ctx.fillStyle = \"white\";\n            ctx.textAlign = \"center\";\n            ctx.font = `bold ${20 * exW}px Nunito`;\n            ctx.strokeText(score, canvas.width / 2, canvas.height / 2 - 55);\n            ctx.fillText(score, canvas.width / 2, canvas.height / 2 - 55);\n            ctx.strokeText(username, canvas.width / 2, canvas.height / 2 - 75);\n            ctx.fillText(username, canvas.width / 2, canvas.height / 2 - 75);\n            for(let i = 0; i < Object.keys(tankdatacannon).length; i++){\n                ctx.fillStyle = \"#b3b3b3\";\n                let tankdatacannondata = tankdatacannon[i];\n                let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\n                let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                let cannonangle;\n                var cannonWidth_;\n                autocannons.forEach((cannonA)=>{\n                    if (cannonA.playerid === playerId && cannonA.autoindex === i) {\n                        cannonangle = cannonA.angle;\n                        cannonWidth_ = cannonA.cannonWidth;\n                    }\n                });\n                if (tankdatacannondata[\"type\"] === \"autoCannon\") {\n                    ctx.save();\n                    var offSet_x = tankdatacannondata[\"offSet-x\"];\n                    if (tankdatacannondata[\"offSet-x\"] === \"playerX\") offSet_x = playerSize * playerBaseSize;\n                    if (tankdatacannondata[\"offSet-x-multpliyer\"]) offSet_x *= -1;\n                    let angle0 = getCannonAngle();\n                    var [x, y] = rotatePointAroundPlayer(offSet_x, 0, angle0 * (180 / Math.PI));\n                    ctx.translate(canvas.width / 2 + x, y + canvas.height / 2);\n                    let angle = cannonangle;\n                    let angle_offset = tankdatacannondata[\"offset-angle\"];\n                    ctx.rotate(angle + angle_offset);\n                    // Draw the square\n                    let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\n                    let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                    ctx.beginPath();\n                    ctx.fillRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5);\n                    ctx.strokeStyle = \"lightgrey\"; // Set border color\n                    ctx.lineWidth = 3; // Set border width\n                    ctx.strokeRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5); // Draw the border\n                    // Restore the previous transformation matrix\n                    ctx.rotate(-(angle + angle_offset));\n                    ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.stroke();\n                    ctx.closePath();\n                    ctx.restore();\n                }\n            }\n            // Draw health bar\n            const healthWidth = playerHealth / maxhealth * 90;\n            ctx.fillStyle = \"green\";\n            ctx.beginPath();\n            ctx.roundRect(canvas.width / 2 - 45, canvas.height / 2 + 55, healthWidth, 10, 5);\n            ctx.fill();\n            ctx.closePath();\n            ctx.save();\n            ctx.translate(canW - 150 * exW, canH - 150 * exW);\n            ctx.fillStyle = \"#fcfafa\";\n            ctx.beginPath();\n            ctx.roundRect(0, 0, 125 * exW, 125 * exW, 5);\n            ctx.fill();\n            ctx.moveTo(0, 0);\n            ctx.lineWidth = 1 * exW;\n            ctx.strokeStyle = \"#e3e3e3\";\n            for(let i = 0; i < 13; i++){\n                ctx.moveTo(i * 10.3 * exW, 0);\n                ctx.lineTo(i * 10.3 * exW, 125 * exW);\n                ctx.stroke();\n            }\n            ctx.closePath();\n            ctx.moveTo(0, 0);\n            ctx.lineWidth = 1 * exW;\n            ctx.strokeStyle = \"#e3e3e3\";\n            for(let i = 0; i < 13; i++){\n                ctx.moveTo(0, i * 10.3 * exW);\n                ctx.lineTo(125 * exW, i * 10.3 * exW);\n                ctx.stroke();\n            }\n            ctx.closePath();\n            ctx.lineWidth = 5;\n            ctx.strokeStyle = \"grey\";\n            ctx.beginPath();\n            ctx.roundRect(0, 0, 125 * exW, 125 * exW, 5);\n            ctx.stroke();\n            ctx.closePath();\n            ctx.textAlign = \"center\";\n            ctx.strokeText(\"players: \" + Object.keys(players).length, 62.5 * exW, -25 * exH);\n            ctx.fillText(\"players: \" + Object.keys(players).length, 62.5 * exW, -25 * exH);\n            ctx.globalAlpha = 0.5;\n            ctx.fillStyle = \"#579bfa\";\n            const centerX = 62.5 * exW;\n            const centerY = 62.5 * exW;\n            const radius = 30 * exW;\n            const angle_o_0_ = pentarotate; // Convert angle to radians\n            vertices = [];\n            for(let i = 0; i < 5; i++){\n                const theta = i * 2 * Math.PI / 5 + angle_o_0_; // Divide circle into 5 parts and add rotation angle\n                const x = centerX + radius * Math.cos(theta);\n                const y = centerY + radius * Math.sin(theta);\n                vertices.push({\n                    x,\n                    y\n                });\n            }\n            // Draw filled pentagon\n            ctx.beginPath();\n            ctx.moveTo(vertices[0].x, vertices[0].y);\n            for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n            ctx.closePath();\n            ctx.fill();\n            // Draw pentagon outline\n            ctx.strokeStyle = \"#3976cc\";\n            ctx.beginPath();\n            ctx.moveTo(vertices[0].x, vertices[0].y);\n            for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n            ctx.closePath();\n            ctx.globalAlpha = 1;\n            ctx.beginPath();\n            ctx.translate(((playerX + 2500) / 80 + 35) * exW, ((playerY + 2500) / 80 + 35) * exH);\n            ctx.rotate(angle + 90 * Math.PI / 180);\n            ctx.arc(((playerX + 2500) / 80 + 35) * exW, ((playerY + 2500) / 80 + 35) * exH, playerSize * FOV * 2, 0, 2 * Math.PI, false);\n            let realitemsize = playerSize * exW * 2;\n            let h = 3;\n            ctx.beginPath();\n            ctx.moveTo(0, -(h / 2) * exH);\n            ctx.lineTo(-(realitemsize / 2) * exW, h / 2 * exH);\n            ctx.lineTo(realitemsize / 2 * exW, h / 2 * exH);\n            ctx.closePath();\n            ctx.fillStyle = \"blue\";\n            ctx.fill();\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = \"darkblue\";\n            ctx.stroke();\n            ctx.closePath();\n            ctx.beginPath();\n            ctx.rotate(-(angle + 90 * Math.PI / 180));\n            minimapLevels.forEach((playerobject)=>{\n                if (playerobject.id === playerId) return;\n                ctx.arc(playerobject.x, playerobject.y, 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = \"blue\";\n                ctx.fill();\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = \"darkblue\";\n            });\n            ctx.restore();\n            if (messaging) {\n                ctx.globalAlpha = 0.5;\n                ctx.fillStyle = \"#a3a3a3\";\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                ctx.globalAlpha = 0.8;\n                ctx.beginPath();\n                ctx.fillStyle = \"#96ceff\";\n                ctx.strokeStyle = \"#41a4fa\";\n                let boxlen = button10 * 30 + typedtext.length * (button10 * 1.2);\n                ctx.roundRect(canvas.width / 2 - boxlen / 2, canvas.height / 2 - button10 * 2.5, boxlen, button10 * 5, 5);\n                ctx.fill();\n                ctx.stroke();\n                ctx.globalAlpha = 1;\n                ctx.textAlign = \"left\";\n                ctx.font = `bold ${30 * exW}px Nunito`;\n                ctx.fillStyle = \"black\";\n                ctx.fillText(typedtext, canvas.width / 2 - (boxlen / 2 - 5), canvas.height / 2 + button10 * 1.5);\n                ctx.closePath();\n                var textwidth = ctx.measureText(typedtext).width + 3;\n                if (blinking) {\n                    ctx.beginPath();\n                    ctx.lineWidth = 1;\n                    ctx.strokeStyle = \"black\";\n                    ctx.moveTo(canvas.width / 2 - (boxlen / 2 - 5) + textwidth, canvas.height / 2 - button10 * 1.5);\n                    ctx.lineTo(canvas.width / 2 - (boxlen / 2 - 5) + textwidth, canvas.height / 2 + button10 * 1.5);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            if (window.innerWidth - 475 < MouseX && MouseX < window.innerWidth - 275 && MouseY > 10 && MouseY < 110) {\n                ctx.strokeStyle = \"#4fe5ff\";\n                ctx.lineWidth = 7;\n            } else {\n                ctx.strokeStyle = \"#0e589d\";\n                ctx.lineWidth = 5;\n            }\n            ctx.fillStyle = \"#45bbff\";\n            ctx.beginPath();\n            ctx.roundRect(canvas.width - button475, button10, button10 * 20, button10 * 10, 5);\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.fillStyle = \"#00a0fd\";\n            ctx.beginPath();\n            ctx.roundRect(canvas.width - button462_5, button10 * 2.5, button10 * 17.5, button10 * 7, 5);\n            ctx.fill();\n            ctx.closePath();\n            ctx.textAlign = \"center\";\n            ctx.font = `bold ${40 * (2 - scaleFactor)}px Nunito`;\n            ctx.fillStyle = \"black\";\n            ctx.fillText(\"Teams\", canvas.width - button375, button10 * 7.5);\n            if (setprogress > progress) {\n                progress += 0.07;\n                if (setprogress === 0 || setprogress > 1) progress = 0;\n            }\n        }\n        function drawbar(item) {\n            ctx.fillStyle = \"black\";\n            ctx.beginPath();\n            ctx.roundRect(-45, 35, 90, 10, 5);\n            ctx.fill();\n            ctx.closePath();\n            const healthWidth = item.health / item.maxhealth * 90;\n            ctx.fillStyle = \"green\";\n            ctx.beginPath();\n            ctx.roundRect(-45, 35, healthWidth, 10, 5);\n            ctx.fill();\n            ctx.closePath();\n        }\n        function draw(timestamp) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            var upscaleX = 1 + (1 - oWidth / canvas.width);\n            var upscaleY = 1 + (1 - oHieght / canvas.height);\n            let deltaTime = (timestamp - lastTime) / 1000;\n            lastTime = timestamp;\n            let currentFPS = 1 / deltaTime;\n            frameTimes.push(currentFPS);\n            if (frameTimes.length > 60) frameTimes.shift();\n            fps = Math.round(frameTimes.reduce((a, b)=>a + b) / frameTimes.length);\n            explosions.forEach((exsplosion)=>{\n                if (exsplosion.x + exsplosion.size > 0 + cavansX && exsplosion.x < canvas.width + cavansX + exsplosion.size && exsplosion.y - cavansY > 0 - exsplosion.size && exsplosion.y - exsplosion.size < canvas.height + cavansY) exsplosion.rings.reduce((a, ring)=>{\n                    ctx.beginPath();\n                    ctx.arc(exsplosion.x - cavansX, exsplosion.y - cavansY, exsplosion.size + a, 0, Math.PI * 2);\n                    ctx.fillStyle = ring.color;\n                    ctx.strokeStyle = ring.color;\n                    ctx.globalAlpha = exsplosion.trans - ring.transMinus <= 0 ? 0.001 : exsplosion.trans - ring.transMinus;\n                    ctx.lineWidth = ring.size;\n                    ctx.stroke();\n                    ctx.closePath();\n                    a += ring.size;\n                    ctx.globalAlpha = 1;\n                    return a;\n                }, 0);\n            });\n            ctx.lineWidth = 1;\n            ctx.lineJoin = \"round\";\n            food_list.forEach((item)=>{\n                var realx = item.x;\n                var realy = item.y;\n                if (realx + item.size > cavansX && realx < canvas.width + cavansX + item.size && realy - cavansY > -item.size && realy - item.size < canvas.height + cavansY && item.health >= 0) {\n                    ctx.save();\n                    if (item.transparency) {\n                        ctx.globalAlpha = item.transparency;\n                        if (item.transparency < 0) ctx.globalAlpha = 0;\n                    }\n                    ctx.translate(realx - cavansX, realy - cavansY);\n                    ctx.rotate(item.angle * pi180);\n                    if (item.type === \"square\") {\n                        ctx.fillStyle = item.color;\n                        ctx.fillRect(-item.size / 2, -item.size / 2, item.size, item.size);\n                        ctx.strokeStyle = \"GoldenRod\";\n                        ctx.lineWidth = 5;\n                        ctx.strokeRect(-item.size / 2, -item.size / 2, item.size, item.size);\n                        ctx.rotate(-item.angle * pi180);\n                        if (item.health < item.maxhealth) drawbar(item);\n                    }\n                    if (item.type === \"triangle\") {\n                        let realitemsize = item.size;\n                        const h = realitemsize * (Math.sqrt(3) / 2);\n                        ctx.beginPath();\n                        ctx.moveTo(-realitemsize / 2, h / 3);\n                        ctx.lineTo(realitemsize / 2, h / 3);\n                        ctx.lineTo(0, -2 * h / 3);\n                        ctx.closePath();\n                        ctx.fillStyle = item.color;\n                        ctx.fill();\n                        ctx.strokeStyle = \"Darkred\";\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.rotate(-item.angle * pi180);\n                        if (item.health < item.maxhealth) drawbar(item);\n                    }\n                    if (item.type === \"pentagon\") {\n                        ctx.fillStyle = item.color;\n                        const centerX = 0;\n                        const centerY = 0;\n                        const radius = item.size * FOV;\n                        const angle = item.angle * pi180; // Convert angle to radians\n                        vertices = [];\n                        for(let i = 0; i < 5; i++){\n                            const theta = i * 2 * Math.PI / 5 + angle; // Divide circle into 5 parts and add rotation angle\n                            const x = centerX + radius * Math.cos(theta);\n                            const y = centerY + radius * Math.sin(theta);\n                            vertices.push({\n                                x,\n                                y\n                            });\n                        }\n                        // Draw filled pentagon\n                        ctx.beginPath();\n                        ctx.moveTo(vertices[0].x, vertices[0].y);\n                        for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Draw pentagon outline\n                        ctx.strokeStyle = \"#3976cc\";\n                        ctx.beginPath();\n                        ctx.moveTo(vertices[0].x, vertices[0].y);\n                        for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n                        ctx.closePath();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        // Rotate context back to original position (if needed)\n                        ctx.rotate(-item.angle * pi180);\n                        // Draw health bar if health is less than 100%\n                        if (item.health < item.maxhealth) {\n                            ctx.fillStyle = \"black\";\n                            ctx.beginPath();\n                            ctx.roundRect(centerX - 60, centerY + (35 + (item.size - 50)), 120 + (item.size - 50), 10, 5);\n                            ctx.fill();\n                            ctx.closePath();\n                            const healthWidth = item.health / item.maxhealth * (120 + (item.size - 50));\n                            ctx.fillStyle = \"green\";\n                            ctx.beginPath();\n                            ctx.roundRect(centerX - 60, centerY + (35 + (item.size - 50)), healthWidth, 10, 5);\n                            ctx.fill();\n                            ctx.closePath();\n                        }\n                    }\n                    if (/octagon/.test(item.type)) {\n                        var realcolor = item.type.replace(\"octagon\", \"\") === teamOn ? \"#b3ffff\" : \"#A0DDFA\";\n                        ctx.fillStyle = realcolor;\n                        const centerX = 0;\n                        const centerY = 0;\n                        const radius = item.size * FOV;\n                        const angle = item.angle * pi180; // Convert angle to radians\n                        vertices = [];\n                        for(let i = 0; i < 8; i++){\n                            const theta = i * 2 * Math.PI / 8 + angle; // Divide circle into 8 parts and add rotation angle\n                            const x = centerX + radius * Math.cos(theta);\n                            const y = centerY + radius * Math.sin(theta);\n                            vertices.push({\n                                x,\n                                y\n                            });\n                        }\n                        // Draw filled pentagon\n                        ctx.beginPath();\n                        ctx.moveTo(vertices[0].x, vertices[0].y);\n                        for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Draw pentagon outline\n                        ctx.strokeStyle = item.type.replace(\"octagon\", \"\") === teamOn ? \"#b1fcfc\" : \"#98D6F4\";\n                        ctx.beginPath();\n                        ctx.moveTo(vertices[0].x, vertices[0].y);\n                        for(let i = 1; i < vertices.length; i++)ctx.lineTo(vertices[i].x, vertices[i].y);\n                        ctx.closePath();\n                        ctx.lineWidth = 25;\n                        ctx.stroke();\n                        // Rotate context back to original position (if needed)\n                        ctx.rotate(-item.angle * pi180);\n                        // Draw health bar if health is less than 100%\n                        if (item.health < item.maxhealth) {\n                            ctx.fillStyle = \"black\";\n                            ctx.beginPath();\n                            ctx.roundRect(centerX - 60, centerY + (35 + (item.size - 50)), 120 + (item.size - 50), 10, 5);\n                            ctx.fill();\n                            ctx.closePath();\n                            const healthWidth = item.health / item.maxhealth * (120 + (item.size - 50));\n                            ctx.fillStyle = \"green\";\n                            ctx.beginPath();\n                            ctx.roundRect(centerX - 60, centerY + (35 + (item.size - 50)), healthWidth, 10, 5);\n                            ctx.fill();\n                            ctx.closePath();\n                        }\n                    }\n                    ctx.restore();\n                    if (item.type === \"square:boss\") {\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        var boss = bosses.find((boss_)=>boss_.id === item.randomID);\n                        boss = boss === undefined ? {\n                            id: 0,\n                            cannons: [\n                                {\n                                    cannonW: 0\n                                },\n                                {\n                                    cannonW: 0\n                                },\n                                {\n                                    cannonW: 0\n                                },\n                                {\n                                    cannonW: 0\n                                }\n                            ]\n                        } : boss;\n                        for(let i = 0; i < 4; i++){\n                            ctx.fillStyle = \"#b3b3b3\";\n                            let angle = item.angle * (pi / 180);\n                            let angle_offset = i * (90 * (pi / 180));\n                            ctx.rotate(angle + angle_offset);\n                            var xplus = item.size / 2 - 60;\n                            // Draw the square\n                            const cannonWidth_bottom = 30 * FOV;\n                            let cannon_heightFOV = 70;\n                            let t = i + 1 < boss.cannons.length ? i + 1 : 0;\n                            let basex = cannonWidth_bottom / 2 + cannon_heightFOV + xplus - boss.cannons[t].cannonW;\n                            let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2;\n                            const cannonHeight = cannon_heightFOV;\n                            const cannonWidth_top = 80 * FOV;\n                            var canwB2 = cannonWidth_bottom / 2;\n                            var canwH2 = cannonWidth_top / 2;\n                            ctx.beginPath();\n                            ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                            ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                            ctx.lineTo(basex, basey + canwH2);\n                            ctx.lineTo(basex, basey - canwH2);\n                            ctx.closePath(); // Close the path\n                            ctx.fill();\n                            // Add a border to the cannon\n                            ctx.strokeStyle = \"lightgrey\"; // Set border color\n                            ctx.lineWidth = 3; // Set border width\n                            ctx.beginPath();\n                            ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                            ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                            ctx.lineTo(basex, basey + canwH2);\n                            ctx.lineTo(basex, basey - canwH2);\n                            ctx.closePath(); // Close the path\n                            ctx.stroke(); // Draw the border\n                            ctx.rotate(-(angle + angle_offset));\n                        }\n                        ctx.restore();\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(item.angle * pi180);\n                        ctx.fillStyle = item.color;\n                        ctx.fillRect(-item.size / 2, -item.size / 2, item.size * FOV, item.size * FOV);\n                        ctx.strokeStyle = \"GoldenRod\";\n                        ctx.lineWidth = 5;\n                        ctx.strokeRect(-item.size / 2, -item.size / 2, item.size * FOV, item.size * FOV);\n                        ctx.rotate(-item.angle * pi180);\n                        if (item.health < item.maxhealth) drawbar(item);\n                        ctx.restore();\n                    }\n                    if (item.type === \"triangle:boss\") {\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        var boss = bosses.find((boss_)=>boss_.id === item.randomID);\n                        boss = boss === undefined ? {\n                            id: 0,\n                            cannons: [\n                                {\n                                    cannonW: 0\n                                }\n                            ]\n                        } : boss;\n                        ctx.fillStyle = \"#b3b3b3\";\n                        let angle = item.angle * (pi / 180);\n                        let angle_offset = pi;\n                        ctx.rotate(angle + angle_offset);\n                        var xplus = item.size / 2 - 120;\n                        // Draw the square\n                        const cannonWidth_bottom = 30 * FOV;\n                        let cannon_heightFOV = 70;\n                        let basex = cannonWidth_bottom / 2 + cannon_heightFOV + xplus - boss.cannons[0].cannonW;\n                        let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2;\n                        const cannonHeight = cannon_heightFOV;\n                        const cannonWidth_top = 80 * FOV;\n                        var canwB2 = cannonWidth_bottom / 2;\n                        var canwH2 = cannonWidth_top / 2;\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.fill();\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.stroke(); // Draw the border\n                        ctx.rotate(-(angle + angle_offset));\n                        ctx.restore();\n                        ctx.save(); // Save the current transformation state\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(item.angle * pi180 + 90 * pi180);\n                        ctx.fillStyle = item.color;\n                        let realitemsize = item.size;\n                        const h = realitemsize * Math.sqrt(3) / 2; // Equilateral triangle height\n                        ctx.beginPath();\n                        ctx.moveTo(-realitemsize / 2, h / 3);\n                        ctx.lineTo(realitemsize / 2, h / 3);\n                        ctx.lineTo(0, -2 * h / 3);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.strokeStyle = \"#ff66f7\";\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.rotate(-item.angle * pi180 - 90 * pi180);\n                        if (item.health < item.maxhealth) drawbar(item);\n                        ctx.restore();\n                    }\n                    ctx.globalAlpha = 1;\n                }\n            });\n            ctx.lineJoin = \"miter\";\n            let unZbullets = [];\n            roads.forEach((road)=>{\n                {\n                    ctx.beginPath();\n                    ctx.moveTo(road[2].road.x - cavansX, road[2].road.y - cavansY);\n                    let sameTeam = players[road[2].road.id].team === players[playerId].team && players[road[2].road.id].team !== null && players[playerId].team !== null;\n                    if (road[2].road.id === playerId || sameTeam) {\n                        ctx.fillStyle = \"#3999f9\";\n                        ctx.strokeStyle = \"#5f79f5\";\n                    }\n                    road.forEach((mapMark)=>{\n                        ctx.lineTo(mapMark.road.x - cavansX, mapMark.road.y - cavansY);\n                    });\n                    ctx.globalAlpha = 0.8;\n                    ctx.stroke();\n                    ctx.globalAlpha = 0.3;\n                    ctx.fill();\n                    ctx.closePath();\n                    ctx.globalAlpha = 1;\n                }\n            });\n            bullets.forEach((bullet)=>{\n                var realstartx = bullet.xstart - (bullet.xstart - cavansX);\n                var realstarty = bullet.ystart - (bullet.ystart - cavansY);\n                var realx = bullet.x;\n                var realy = bullet.y;\n                if (realx + bullet.size > cavansX && realx - bullet.size < canvas.width + cavansX && realy + bullet.size > cavansY && realy - bullet.size < canvas.height + cavansY) {\n                    if (bullet.Zlevel !== 3) {\n                        unZbullets.push(bullet);\n                        return;\n                    }\n                    if (bullet.transparency) ctx.globalAlpha = bullet.transparency;\n                    ctx.beginPath();\n                    if (bullet.type === \"basic\") {\n                        var sameTeam = players[bullet.id]?.team === players[playerId]?.team && players[bullet.id]?.team !== null && players[playerId]?.team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let realsize = bullet.size;\n                        ctx.arc(realx - realstartx, realy - realstarty, realsize, 0, 2 * Math.PI);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                    }\n                    ctx.globalAlpha = 1;\n                }\n            });\n            unZbullets.forEach((bullet)=>{\n                var realx = bullet.x;\n                var realy = bullet.y;\n                if (realx + bullet.size > cavansX && realx - bullet.size < canvas.width + cavansX && realy + bullet.size > cavansY && realy - bullet.size < canvas.height + cavansY) {\n                    if (bullet.Zlevel === 2 && bullet.id === playerId) {\n                        zlevelbullets.push(bullet);\n                        return;\n                    }\n                    if (bullet.transparency) ctx.globalAlpha = bullet.transparency;\n                    ctx.beginPath();\n                    if (bullet.type === \"basic\" || bullet.type === \"sheild\") {\n                        if (bullet.type !== \"sheild\") var sameTeam = players[bullet.id]?.team === players[playerId]?.team && players[bullet.id]?.team !== null && players[playerId]?.team !== null;\n                        else {\n                            ctx.globalCompositeOperation = \"destination-over\";\n                            var sameTeam = bullet.teamID === teamOn;\n                        }\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let realsize = bullet.size;\n                        ctx.arc(realx - (bullet.xstart - (bullet.xstart - cavansX)), realy - (bullet.ystart - (bullet.ystart - cavansY)), realsize, 0, 2 * Math.PI);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                        ctx.globalCompositeOperation = \"source-over\";\n                    } else if (bullet.type === \"FreeNecromancer\") {\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(bullet.angle);\n                        ctx.fillStyle = \"#f2c705\";\n                        ctx.fillRect(-bullet.size / 2, -bullet.size / 2, bullet.size, bullet.size);\n                        ctx.strokeStyle = \"#e0b700\";\n                        ctx.lineWidth = 5;\n                        ctx.strokeRect(-bullet.size / 2, -bullet.size / 2, bullet.size, bullet.size);\n                        ctx.restore();\n                    } else if (bullet.type === \"trap\") {\n                        var sameTeam = players[bullet.id].team === players[playerId].team && players[bullet.id].team !== null && players[playerId].team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let vertices = bullet.vertices;\n                        let x1 = vertices[2].x - (bullet.xstart - (bullet.xstart - cavansX));\n                        let y1 = vertices[2].y - (bullet.ystart - (bullet.ystart - cavansY)); // Top point\n                        let x2 = vertices[1].x - (bullet.xstart - (bullet.xstart - cavansX));\n                        let y2 = vertices[1].y - (bullet.ystart - (bullet.ystart - cavansY)); // Bottom-left point\n                        let x3 = vertices[0].x - (bullet.xstart - (bullet.xstart - cavansX));\n                        let y3 = vertices[0].y - (bullet.ystart - (bullet.ystart - cavansY)); // Bottom-right point\n                        const controlOffset = 5;\n                        ctx.beginPath();\n                        ctx.moveTo(x1, y1);\n                        const controlPoint1 = {\n                            x: (x1 + x3) / 2,\n                            y: (y1 + y3) / 2\n                        };\n                        // Control point for curve from bottom-left to bottom-right\n                        const controlPoint2 = {\n                            x: (x2 + x1) / 2,\n                            y: (y2 + y3) / 2 + controlOffset\n                        };\n                        // Control point for curve from bottom-right to top\n                        const controlPoint3 = {\n                            x: (x1 + x3) / 2 + controlOffset,\n                            y: (y1 + y3) / 2\n                        };\n                        // Draw the curved edge from top to bottom-left\n                        ctx.quadraticCurveTo(controlPoint1.x, controlPoint1.y, x2, y2);\n                        // Draw the curved edge from bottom-left to bottom-right\n                        ctx.quadraticCurveTo(controlPoint2.x, controlPoint2.y, x3, y3);\n                        // Draw the curved edge from bottom-right to top\n                        ctx.quadraticCurveTo(controlPoint3.x, controlPoint3.y, x1, y1);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                    } else if (bullet.type === \"directer\") {\n                        var sameTeam = players[bullet.id].team === players[playerId].team && players[bullet.id].team !== null && players[playerId].team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(bullet.angle + 90 * (pi / 180));\n                        let realitemsize = bullet.size * 3 * FOV;\n                        const h = realitemsize * sqrt23;\n                        ctx.beginPath();\n                        ctx.moveTo(0, -h / 2);\n                        ctx.lineTo(-realitemsize / 2, h / 2);\n                        ctx.lineTo(realitemsize / 2, h / 2);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.stroke();\n                    } else if (bullet.type === \"roadMap\") {\n                        var sameTeam = players[bullet.id].team === players[playerId].team && players[bullet.id].team !== null && players[playerId].team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        for(let i = 0; i < 2; i++){\n                            ctx.rotate(bullet.angle + i * 180 * (pi / 180));\n                            //ctx.rotate(i * 90 * pi / 180)\n                            let realitemsize = bullet.size * 3 * FOV;\n                            const h = realitemsize * sqrt23;\n                            ctx.beginPath();\n                            ctx.moveTo(0, -h / 2);\n                            ctx.lineTo(-realitemsize / 2, h / 2);\n                            ctx.lineTo(realitemsize / 2, h / 2);\n                            ctx.closePath();\n                            ctx.fill();\n                            ctx.stroke();\n                        }\n                    } else if (bullet.type === \"FreeSwarm\") {\n                        ctx.fillStyle = \"#ff7df8\";\n                        ctx.strokeStyle = \"#ff66f7\";\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(bullet.angle);\n                        let realitemsize = bullet.size * 3 * FOV;\n                        const h = realitemsize * sqrt23;\n                        ctx.beginPath();\n                        ctx.moveTo(0, -h / 2);\n                        ctx.lineTo(-realitemsize / 2, h / 2);\n                        ctx.lineTo(realitemsize / 2, h / 2);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                    } else if (bullet.type === \"AutoBullet\") {\n                        var sameTeam = players[bullet.id].team === players[playerId].team && players[bullet.id].team !== null && players[playerId].team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let realsize = bullet.size * FOV;\n                        ctx.arc(realx - (bullet.xstart - (bullet.xstart - cavansX)), realy - (bullet.ystart - (bullet.ystart - cavansY)), realsize, 0, 2 * Math.PI);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                        let autoCAN_ = null;\n                        autocannons.forEach((can)=>{\n                            if (can.playerid === bullet.uniqueid) autoCAN_ = can;\n                        });\n                        ctx.save();\n                        ctx.translate(realx - (bullet.xstart - (bullet.xstart - cavansX)), realy - (bullet.ystart - (bullet.ystart - cavansY)));\n                        var cannon_widthFOV = bullet.size / 2;\n                        var cannon_heightFOV = bullet.size / 2;\n                        ctx.rotate(autoCAN_.angle);\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV - cannonWidth;\n                        let basey = -cannon_heightFOV / 2;\n                        ctx.fillStyle = \"#b3b3b3\";\n                        ctx.fillRect(basex, basey - 5, cannon_widthFOV + 15, cannon_heightFOV + 10);\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex, basey - 5, cannon_widthFOV + 15, cannon_heightFOV + 10); // Draw the border\n                        // Restore the previous transformation matrix\n                        ctx.rotate(-autoCAN_.angle);\n                        ctx.closePath();\n                        ctx.beginPath();\n                        ctx.arc(0, 0, cannon_widthFOV / 2 + 7, 0, 2 * Math.PI, false);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                    } else if (bullet.type === \"rocketer\") {\n                        ctx.save();\n                        ctx.translate(realx - cavansX, realy - cavansY);\n                        ctx.rotate(bullet.angle);\n                        let cannwidthtop = tankmeta[players[bullet.id].__type__][\"cannons\"][bullet.parentindex][\"cannon-width-top\"] / 1.7;\n                        let cannwidthbottom = tankmeta[players[bullet.id].__type__][\"cannons\"][bullet.parentindex][\"cannon-width-bottom\"] / 1.7;\n                        const cannonWidth_top = cannwidthtop;\n                        const cannonWidth_bottom = cannwidthbottom;\n                        ctx.fillStyle = \"#b3b3b3\";\n                        var canwB2 = cannonWidth_bottom / 2;\n                        var canwH2 = cannonWidth_top / 2;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - cannonWidth_top, 0 - canwB2); // Move to the top-left corner\n                        ctx.lineTo(0 - cannonWidth_top, 0 + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(0, 0 + canwH2);\n                        ctx.lineTo(0, 0 - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.fill();\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.beginPath();\n                        ctx.moveTo(0 - cannonWidth_top, 0 - canwB2); // Move to the top-left corner\n                        ctx.lineTo(0 - cannonWidth_top, 0 + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(0, 0 + canwH2);\n                        ctx.lineTo(0, 0 - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.stroke();\n                        ctx.restore();\n                        var sameTeam = players[bullet.id].team === players[playerId].team && players[bullet.id].team !== null && players[playerId].team !== null;\n                        if (bullet.id === playerId || sameTeam) {\n                            ctx.fillStyle = \"blue\";\n                            ctx.strokeStyle = \"darkblue\";\n                        } else {\n                            ctx.fillStyle = \"red\";\n                            ctx.strokeStyle = \"darkred\";\n                        }\n                        let realsize = bullet.size * FOV;\n                        ctx.beginPath();\n                        ctx.arc(realx - (bullet.xstart - (bullet.xstart - cavansX)), realy - (bullet.ystart - (bullet.ystart - cavansY)), realsize, 0, 2 * Math.PI);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.stroke();\n                        ctx.closePath();\n                    }\n                    ctx.restore();\n                    ctx.globalAlpha = 1;\n                }\n            });\n            for(const playerId__ in players)if (players.hasOwnProperty(playerId__) && playerId__ != playerId) {\n                let player = players[playerId__];\n                let tankdata = tankmeta[player.__type__];\n                let tankdatacannon = tankdata[\"cannons\"];\n                let playerX = player.x;\n                let playerY = player.y;\n                let FOVplayerz = player.size;\n                if (tankdata.decor) tankdata.decor.forEach((decor_)=>{\n                    if (decor_.type === \"octaspinner\") {\n                        ctx.fillStyle = \"black\";\n                        ctx.save();\n                        ctx.translate(playerX - cavansX + decor_.offsetX, playerY - cavansY + decor_.offsetY);\n                        let angle = player.cannon_angle;\n                        ctx.rotate(angle + decor_.offsetAngle);\n                        ctx.beginPath();\n                        for(let i = 0; i < 8; i++){\n                            // calculate the rotation\n                            const rotation = Math.PI * 2 / 8 * i;\n                            // for the first point move to\n                            if (i === 0) ctx.moveTo(decor_.size * Math.cos(rotation), decor_.size * Math.sin(rotation));\n                            else // for the rest draw a line\n                            ctx.lineTo(decor_.size * Math.cos(rotation), decor_.size * Math.sin(rotation));\n                        }\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.restore();\n                    }\n                });\n                let gradient = ctx.createRadialGradient(playerX - cavansX, playerY - cavansY, playerSize * playerBaseSize / 1.5, playerX - cavansX, playerY - cavansY, radiusConfig.radius);\n                gradient.addColorStop(radiusConfig.build[0], \"#FFFFFF00\");\n                if (sameTeam) gradient.addColorStop(radiusConfig.build[1], \"#61f7ff\");\n                else gradient.addColorStop(radiusConfig.build[1], \"#ff2121\");\n                gradient.addColorStop(radiusConfig.build[2], \"#FFFFFF00\");\n                ctx.beginPath();\n                ctx.arc(playerX - cavansX, playerY - cavansY, radiusConfig.radius, 0, 2 * Math.PI, false);\n                ctx.fillStyle = gradient;\n                ctx.fill();\n                ctx.closePath();\n                for(let i = 0; i < Object.keys(tankdatacannon).length; i++){\n                    ctx.fillStyle = \"#b3b3b3\";\n                    let tankdatacannondata = tankdatacannon[i];\n                    let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\n                    let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                    if (tankdatacannondata[\"type\"] === \"basicCannon\") {\n                        ctx.save();\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = player.cannon_angle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n                        // Restore the previous transformation matrix\n                        ctx.restore();\n                    } else if (tankdatacannondata[\"type\"] === \"trapezoid\" || tankdatacannondata[\"type\"] === \"directer\") {\n                        ctx.save();\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = player.cannon_angle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        const cannonWidth_bottom = tankdatacannondata[\"cannon-width-bottom\"] * player.size * FOV;\n                        let basex = cannonWidth_bottom / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                        let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2 - tankdatacannondata[\"offSet-y\"];\n                        const cannonHeight = cannon_heightFOV;\n                        const cannonWidth_top = tankdatacannondata[\"cannon-width-top\"] * player.size * FOV;\n                        var canwB2 = cannonWidth_bottom / 2;\n                        var canwH2 = cannonWidth_top / 2;\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.fill();\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.stroke(); // Draw the border\n                        ctx.restore();\n                    } else if (tankdatacannondata[\"type\"] === \"trap\" || tankdatacannondata[\"type\"] === \"paver\") {\n                        let cannonheight = tankdatacannondata[\"cannon-height\"];\n                        ctx.save();\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = player.cannon_angle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        let trapR = tankdatacannondata[\"trap-to-cannon-ratio\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        let basex = -cannon_widthFOV / 2 + cannonheight + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                        let reH = cannon_widthFOV * (1 - trapR);\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.fillRect(basex, basey, cannon_widthFOV - reH, cannon_heightFOV);\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex, basey, cannon_widthFOV - reH, cannon_heightFOV);\n                        // Restore the previous transformation matrix\n                        const cannonHeight = reH;\n                        const cannonWidth_top = cannon_heightFOV * 1.4;\n                        const cannonWidth_bottom = cannon_heightFOV;\n                        basex = basex + (cannon_widthFOV - trapR);\n                        var canwB2 = cannonWidth_bottom / 2;\n                        var canwH2 = cannonWidth_top / 2;\n                        basey += canwB2;\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.fill();\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.stroke(); // Draw the border\n                        ctx.restore();\n                        if (tankdatacannondata[\"type\"] === \"paver\") {\n                            cannon_widthFOV /= 2;\n                            cannon_heightFOV /= 2;\n                            ctx.save();\n                            ctx.translate(playerX - cavansX, playerY - cavansY);\n                            let angle = player.cannon_angle;\n                            let angle_offset = tankdatacannondata[\"offset-angle\"];\n                            ctx.rotate(angle + angle_offset);\n                            // Draw the square\n                            let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                            let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                            ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                            // Add a border to the cannon\n                            ctx.strokeStyle = \"lightgrey\"; // Set border color\n                            ctx.lineWidth = 3; // Set border width\n                            ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n                            // Restore the previous transformation matrix\n                            ctx.restore();\n                        }\n                    } else if (tankdatacannondata[\"type\"] === \"AutoBulletCannon\") {\n                        ctx.save();\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = player.cannon_angle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n                        ctx.beginPath();\n                        ctx.arc(basex + 40 + cannon_widthFOV / 4, basey + cannon_heightFOV / 2, playerSize * FOV * playerBaseSize / 4, 0, 2 * Math.PI, false);\n                        ctx.fill();\n                        ctx.lineWidth = 5;\n                        ctx.strokeStyle = \"lightgrey\";\n                        ctx.stroke();\n                        ctx.closePath();\n                        ctx.restore();\n                    } else if (tankdatacannondata[\"type\"] === \"rocketer\") {\n                        ctx.save();\n                        // Translate to the center of the square\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let tankdatacannondata = tankdatacannon[i];\n                        var angle_offset = tankdatacannondata[\"offset-angle\"];\n                        let angle = player.cannon_angle;\n                        ctx.rotate(angle + angle_offset);\n                        let cannwidthtop = tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\n                        let cannwidthbottom = tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\n                        let cannonHeight = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                        // Draw the square\n                        let basex = cannwidthbottom / 2 + cannon_heightFOV + tankdatacannondata[\"offSet-x\"] - player.cannonW[i];\n                        let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        const cannonWidth_top = cannwidthtop;\n                        const cannonWidth_bottom = cannwidthbottom;\n                        var canwB2 = cannonWidth_bottom / 2;\n                        var canwH2 = cannonWidth_top / 2;\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.fill();\n                        // Add a border to the cannon\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.beginPath();\n                        ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\n                        ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\n                        ctx.lineTo(basex, basey + canwH2);\n                        ctx.lineTo(basex, basey - canwH2);\n                        ctx.closePath(); // Close the path\n                        ctx.stroke();\n                        ctx.fillRect(cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - player.size)), basey - canwH2, cannon_heightFOV - 40, cannwidthtop);\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - player.size)), basey - canwH2, cannon_heightFOV - 40, cannwidthtop);\n                        ctx.restore();\n                    }\n                }\n                ctx.beginPath();\n                ctx.arc(playerX - cavansX, playerY - cavansY, player.size * playerBaseSize, 0, 2 * Math.PI, false);\n                var sameTeam = players[player.id].team === players[playerId].team && players[player.id].team !== null && players[playerId].team !== null;\n                if (player.state === \"start\" || player.state === \"damaged\") {\n                    let backwardsObj = {\n                        1: 4,\n                        2: 3,\n                        3: 2,\n                        4: 1,\n                        5: 0.1\n                    };\n                    let percentage = player.statecycle % 10 <= 5 ? player.statecycle % 10 : backwardsObj[player.statecycle % 10 - 5];\n                    percentage /= 10;\n                    let newrgb2 = mix([\n                        130,\n                        130,\n                        130\n                    ], [\n                        255,\n                        255,\n                        255\n                    ], percentage);\n                    ctx.fillStyle = `rgb(${newrgb2[0]} ${newrgb2[1]} ${newrgb2[2]})`;\n                } else {\n                    ctx.fillStyle = \"#828282\";\n                    ctx.strokeStyle = \"#aaaaaa\";\n                }\n                ctx.fill();\n                ctx.lineWidth = 5;\n                ctx.stroke();\n                ctx.closePath();\n                if (player.skin !== \"0.webp\") {\n                    ctx.save();\n                    ctx.translate(playerX - cavansX, playerY - cavansY);\n                    ctx.rotate(player.cannon_angle);\n                    ctx.drawImage(inverted[player.skin], 0 - player.size * playerBaseSize, 0 - player.size * playerBaseSize, playerBaseSize * 2, playerBaseSize * 2);\n                    ctx.restore();\n                }\n                // Draw background bar\n                let mymessages = [];\n                playerMessages.forEach((massege)=>{\n                    if (massege.id === player.id) mymessages.push(massege);\n                });\n                if (canSeeChat) mymessages.forEach((message)=>{\n                    ctx.save();\n                    if (message.hidetime < Date.now()) {\n                        if (1 > 1 - (Date.now() - message.hidetime) / 500) ctx.globalAlpha = 1 - (Date.now() - message.hidetime) / 500;\n                    }\n                    ctx.translate(playerX - cavansX, playerY - cavansY - player.size * 40 - 30 * mymessages.length - 25);\n                    ctx.fillStyle = \"black\";\n                    ctx.textAlign = \"center\";\n                    ctx.font = `bold ${21 * upscaleX}px Nunito`;\n                    ctx.fillText(message.text, 0, 0);\n                    ctx.globalAlpha = 1;\n                    ctx.restore();\n                });\n                ctx.beginPath();\n                ctx.fillStyle = \"black\";\n                ctx.roundRect(playerX - cavansX - 50 * FOV, playerY - cavansY + 55 * FOV, 90 * FOV, 10 * player.size * FOV, 10 * player.size / 2);\n                ctx.fill();\n                ctx.closePath();\n                // Draw health bar\n                ctx.beginPath();\n                const healthWidth = player.health / player.maxhealth * 90 * player.size * FOV;\n                ctx.fillStyle = \"green\";\n                ctx.roundRect(playerX - cavansX - 50 * FOV, playerY - cavansY + 55 * FOV, healthWidth, 10 * player.size * FOV, 10 * player.size / 2);\n                ctx.fill();\n                ctx.closePath();\n                // cannons on top of player\n                for(let i = 0; i < Object.keys(tankdatacannon).length; i++){\n                    ctx.fillStyle = \"#b3b3b3\";\n                    let tankdatacannondata = tankdatacannon[i];\n                    let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\n                    let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\n                    let cannonangle;\n                    var cannonWidth_;\n                    autocannons.forEach((cannonA)=>{\n                        if (cannonA.playerid === playerId__ && cannonA.autoindex === i) {\n                            cannonangle = cannonA.angle;\n                            cannonWidth_ = cannonA.cannonWidth;\n                        }\n                    });\n                    if (tankdatacannondata[\"type\"] === \"autoCannon\") {\n                        ctx.save();\n                        var [x, y] = rotatePointAroundPlayer();\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = cannonangle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        var offSet_x = tankdatacannondata[\"offSet-x\"];\n                        if (tankdatacannondata[\"offSet-x\"] === \"playerX\") offSet_x = player.size * 2;\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV + offSet_x;\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.beginPath();\n                        ctx.fillRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5);\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5); // Draw the border\n                        // Restore the previous transformation matrix\n                        ctx.rotate(-(angle + angle_offset));\n                        ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\n                        ctx.fill();\n                        ctx.stroke();\n                        ctx.closePath();\n                        ctx.restore();\n                    } else if (tankdatacannondata[\"type\"] === \"SwivelAutoCannon\") {\n                        ctx.save();\n                        let cannonangle;\n                        let cannonWidth_;\n                        autocannons.forEach((cannonA)=>{\n                            if (cannonA.playerid === player.id && cannonA.autoindex === i) {\n                                cannonangle = cannonA.angle;\n                                cannonWidth_ = cannonA.cannonWidth;\n                            }\n                        });\n                        var offSet_x = tankdatacannondata[\"offSet-x\"];\n                        if (tankdatacannondata[\"offSet-x\"] === \"playerX\") offSet_x = playerSize * playerBaseSize;\n                        if (tankdatacannondata[\"offSet-x-multpliyer\"]) offSet_x *= -1;\n                        let angle0 = getCannonAngle();\n                        var [x, y] = rotatePointAroundPlayer(offSet_x, 0, angle0 * (180 / Math.PI));\n                        ctx.translate(playerX - cavansX, playerY - cavansY);\n                        let angle = cannonangle;\n                        let angle_offset = tankdatacannondata[\"offset-angle\"];\n                        ctx.rotate(angle + angle_offset);\n                        // Draw the square\n                        let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\n                        let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\n                        ctx.beginPath();\n                        ctx.fillRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5);\n                        ctx.strokeStyle = \"lightgrey\"; // Set border color\n                        ctx.lineWidth = 3; // Set border width\n                        ctx.strokeRect(basex - 5, basey - 2.5, cannon_widthFOV + 10 - cannonWidth_, cannon_heightFOV + 5); // Draw the border\n                        // Restore the previous transformation matrix\n                        ctx.rotate(-(angle + angle_offset));\n                        ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\n                        ctx.fill();\n                        ctx.stroke();\n                        ctx.closePath();\n                        ctx.restore();\n                    }\n                }\n                ctx.strokeStyle = \"black\";\n                ctx.fillStyle = \"white\";\n                ctx.textAlign = \"center\";\n                ctx.font = \"bold 20px Nunito\";\n                ctx.strokeText(player.score, playerX - cavansX, playerY - cavansY - 55);\n                ctx.fillText(player.score, playerX - cavansX, playerY - cavansY - 55);\n                if (canSeeNames) {\n                    ctx.strokeText(player.username, playerX - cavansX, playerY - cavansY - 75);\n                    ctx.fillText(player.username, playerX - cavansX, playerY - cavansY - 75);\n                }\n                // Draw border\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = \"grey\";\n                ctx.strokeRect(playerX - cavansX - 50, playerY - cavansY + 55, 90 * player.size * FOV, 10 * player.size * FOV);\n            }\n            ctx.fillStyle = squareColor;\n            if (!dead) drawself(upscaleX, upscaleY);\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = 5;\n            ctx.beginPath();\n            ctx.moveTo(mapLeft, mapTop);\n            ctx.lineTo(mapRight, mapTop);\n            ctx.lineTo(mapRight, mapBottom);\n            ctx.lineTo(mapLeft, mapBottom);\n            ctx.lineTo(mapLeft, mapTop);\n            ctx.stroke();\n            gridLightstyle.top = `calc(-${10000 * scaleFactor / 2}px - ${cavansY * scaleFactor}px)`;\n            gridLightstyle.left = `calc(-${10000 * scaleFactor / 2}px - ${cavansX * scaleFactor}px)`;\n            gridDarkstyle.top = `calc(-${10000 * scaleFactor / 2}px - ${cavansY * scaleFactor}px)`;\n            gridDarkstyle.left = `calc(-${10000 * scaleFactor / 2}px - ${cavansX * scaleFactor}px)`;\n            // Call the function to draw the level bar\n            drawRoundedLevelBar(ctx, canvas.width / 2 - barWidth / 2, canvas.height - canvas.height * 0.03879728419, barWidth, barHeight, borderRadius, progress + 0.05, \"black\", \"#00f7ff\", false, true);\n            let I_ = 0;\n            if (upgradePoints > 0) {\n                ctx.font = \"26px Nunito\";\n                ctx.strokeStyle = \"#89faa7\";\n                ctx.strokeText(`+${upgradePoints}`, 20 + 145 * upscaleX / 2, canvas.height - 34 * upscaleY * 9);\n                ctx.textAlign = \"center\";\n                ctx.font = \"bold 25px Nunito\";\n                ctx.fillStyle = \"#14fc52\";\n                ctx.fillText(`+${upgradePoints}`, 20 + 145 * upscaleX / 2, canvas.height - 34 * upscaleY * 9);\n            }\n            for(let CCC = Object.keys(statsTree).length - 1; CCC >= 0; CCC -= 1){\n                let stat_ = statsTree[Object.keys(statsTree)[CCC]];\n                let stat = Object.keys(statsTree)[CCC];\n                let color = colorUpgrades[CCC] || \"red\";\n                drawRoundedLevelBar(ctx, 20, canvas.height - 34 * upscaleY * I_ - 40, 145 * upscaleX, 25 * upscaleY, borderRadius, stat_ / 8, \"black\", color, \"#242424\", false);\n                ctx.textAlign = \"center\";\n                ctx.font = `bold ${15 * (1 + (1 - scaleFactor))}px Nunito`;\n                ctx.fillStyle = \"white\";\n                ctx.fillText(`${stat}:${stat_}`, 20 + 145 * upscaleX / 2, canvas.height - 34 * upscaleY * I_ - 40 + 17.5 * upscaleY);\n                I_++;\n            }\n            if (joinedTeam) for(let CCC = Object.keys(statsTree).length - 1; CCC >= 0; CCC -= 1){\n                let MYteam = pubteams.find((team)=>{\n                    return team.teamID === players[playerId].team;\n                });\n                let stat_ = MYteam.stats[Object.keys(MYteam.stats)[CCC]];\n                let stat = Object.keys(MYteam.stats)[CCC];\n                let color = teamColorUpgrades[CCC] || \"red\";\n                drawRoundedLevelBar(ctx, 20, canvas.height - 300 * upscaleY * I_ - 40, 145 * upscaleX, 25 * upscaleY, borderRadius, stat_ / 8, \"black\", color, \"#242424\", false);\n                ctx.textAlign = \"center\";\n                ctx.font = `bold ${15 * (1 + (1 - scaleFactor))}px Nunito`;\n                ctx.fillStyle = \"white\";\n                ctx.fillText(`${stat}:${stat_}`, 20 + 145 * upscaleX / 2, canvas.height - 300 * upscaleY * I_ - 40 + 17.5 * upscaleY);\n                I_++;\n            }\n            ctx.font = \"bold 30px Nunito\";\n            ctx.strokeStyle = \"black\";\n            ctx.strokeText(\"leaderboard\", canvas.width - 125 * upscaleX, 25);\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = \"#00f7ff\";\n            ctx.fillText(\"leaderboard\", canvas.width - 125 * upscaleX, 25);\n            if (canSeeLeaderBoard) leader_board.forEach((entre, i)=>{\n                var totalwidth;\n                if (leader_board[0].score) totalwidth = entre.score / leader_board[0].score;\n                if (!leader_board[0].score) totalwidth = 1;\n                drawRoundedLevelBar(ctx, canvas.width - 257.5 * upscaleX, 50 + i * 30, 245 * upscaleX, 27 * upscaleY, borderRadius, entre.score / leader_board[0].score, \"#23badb\", \"#4eddfc\", \"#242424\", false);\n                ctx.textAlign = \"center\";\n                ctx.font = \"bold 20px Nunito\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(`${entre.name} \\u{27A0} ${entre.score}`, canvas.width - 125 * upscaleX, 72 + i * 30 * upscaleY);\n                ctx.drawImage(badgelevels[entre.badge], canvas.width - (40 + 205 * upscaleX) * upscaleX, 52 + i * 30 * upscaleY, button40, 40 * upscaleY / 1.8);\n            });\n            requestAnimationFrame(draw);\n        }\n    }\n    async function getBagdeData() {\n        const url = window.location.href === \"https://tankshark.fun/\" ? \"https://websocketpointer.duckdns.org/currentbadge\" : \"http://localhost:4500/currentbadge\";\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    userId: getCookie(\"userId\")\n                })\n            });\n            if (!response.ok) throw new Error(`Response status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n    document.getElementById(\"subfeedback\").addEventListener(\"click\", subfeedback);\n    async function subfeedback() {\n        const url = window.location.href === \"https://tankshark.fun/\" ? \"https://websocketpointer.duckdns.org/submit-feedback\" : \"http://localhost:4500/submit-feedback\";\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: document.getElementById(\"namesub\").value,\n                    message: document.getElementById(\"feedback\").value\n                })\n            });\n            if (!response.ok) throw new Error(`Response status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n    let settingsopen = false;\n    var settings = document.getElementById(\"settingsOpener\");\n    const settingsOpener = ()=>{\n        settingsopen = !settingsopen;\n        document.getElementById(\"settingsBox\").style.display = settingsopen ? \"block\" : \"none\";\n    };\n    settings.addEventListener(\"click\", settingsOpener);\n    async function getLeaderBoardData() {\n        const url = window.location.href === \"https://tankshark.fun/\" ? \"https://websocketpointer.duckdns.org/leaderboard\" : \"http://localhost:4500/leaderboard\";\n        try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`Response status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n    async function buildLeaderBoard() {\n        var leaderboard = await getLeaderBoardData();\n        var leaderBoard = document.getElementById(\"leaderBoard\");\n        leaderBoard.innerHTML = \"\";\n        leaderboard.leader_board.forEach((leader)=>{\n            var holderDiv = document.createElement(\"div\");\n            var holderName = document.createElement(\"p\");\n            var holderImg = document.createElement(\"img\");\n            leaderBoard.appendChild(holderDiv);\n            holderDiv.appendChild(holderImg);\n            holderImg.src = window.location.href !== \"https://tankshark.fun/\" ? `/public${leader.badge.badge}` : `${leader.badge.badge}`;\n            holderDiv.classList.add(\"entrie-box\");\n            holderDiv.appendChild(holderName);\n            holderName.innerHTML = `${leader.username}, ${leader.score}`;\n            holderName.classList.add(\"normalized-text-color\");\n            holderImg.style.width = \"20px\";\n            holderImg.style.hieght = \"20px\";\n            holderImg.alt = \"io leaderboard badge\";\n        });\n    }\n    buildLeaderBoard();\n    async function ping() {\n        const urls = window.location.href !== \"https://tankshark.fun/\" ? [\n            \"http://localhost:4500/ping\",\n            \"https://websocketpointer.duckdns.org/ping\",\n            \"http://127.0.0.1:4000/ping\",\n            \"http://192.168.9.100:4500/ping\"\n        ] : [\n            \"https://websocketpointer.duckdns.org/ping\"\n        ];\n        var passed = false;\n        Promise.all(urls.map(async (url)=>{\n            try {\n                const response = await fetch(url);\n                if (!response.ok) throw new Error(`Response status: ${response.status}`);\n                passed = true;\n            } catch (error) {\n                console.log(error.message);\n            }\n        })).then(()=>{});\n    }\n    if (window.location.href === \"https://tankshark.fun/\") {\n        document.getElementById(\"squareimg\").src = \"/how-to-imgs/square.webp\";\n        document.getElementById(\"triangleimg\").src = \"/how-to-imgs/triangle.webp\";\n        document.getElementById(\"pentagonimg\").src = \"/how-to-imgs/pentagon.webp\";\n    }\n    ping();\n    var levelData = null;\n    async function build() {\n        levelData = await getBagdeData();\n        badgeLevelDiv.innerHTML = \"\";\n        var buildOutEle = {};\n        levelData.levelData.reverse().forEach((level, i)=>{\n            var imageDiv = document.createElement(\"div\");\n            badgeLevelDiv.appendChild(imageDiv);\n            imageDiv.classList.add(\"levelContainer\");\n            var imageForDiv = document.createElement(\"img\");\n            if (level.maxScore >= levelData.playerScore || level.maxScore == null) {\n                imageDiv.classList.add(\"disabledBadge\");\n                imageForDiv.style.filter = \"brightness(50%)\";\n            }\n            if (level.maxScore >= levelData.playerScore && level.minScore <= levelData.playerScore) {\n                let minScore = level.minScore;\n                let maxScore = level.maxScore;\n                var clacPercetage = 255 * ((maxScore - levelData.playerScore) / (maxScore - minScore));\n                if (maxScore - levelData.playerScore === maxScore - minScore) clacPercetage = 0;\n                var appendStyle = `linear-gradient(0deg, rgba(${clacPercetage}, ${clacPercetage}, ${clacPercetage}, 0.4), rgba(0, 0, 0, 0.4))`;\n                imageDiv.style.backgroundImage = appendStyle;\n                var strokeDashoffset = 90 * Math.PI * ((maxScore - levelData.playerScore) / (maxScore - minScore));\n                imageDiv.innerHTML = `\n          <svg width=\"10vh\" height=\"10vh\" viewBox=\"0 0 130 100\">\n            <defs>\n              <radialGradient id=\"grad1\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\n                <stop offset=\"0%\" stop-color=\"#00F7FF12\" />\n                <stop offset=\"50%\" stop-color=\"#00F7FF\" />\n                <stop offset=\"100%\" stop-color=\"#00F7FF12\" />\n              </radialGradient>\n              <radialGradient id=\"grad2\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\n                <stop offset=\"0%\" stop-color=\"#FFFFFF00\" />\n                <stop offset=\"100%\" stop-color=\"#00F7FF\" />\n              </radialGradient>\n            </defs>\n            <g stroke-width=\"9\" stroke=\"url(#grad1)\" fill=\"none\" stroke-width=\"30\">\n              <circle r=\"65\" cx=\"65\" cy=\"50\" opacity=\"1\" stroke=\"url(#grad1)\" stroke-width=\"30\"></circle>\n              <circle r=\"45\" cx=\"65\" cy=\"50\"></circle>\n            </g>\n            <circle cx=\"65\" cy=\"50\" r=\"45\" stroke=\"black\" stroke-width=\"8\" fill=\"none\"> </circle>\n            <circle cx=\"65\" cy=\"50\" r=\"45\" class=\"meter-1\" id=\"fillcircle\"> </circle>\n            <image x=\"35\" y=\"20\" width=\"60\" height=\"60\" href='${window.location.href !== \"https://tankshark.fun/\" ? window.location.origin + \"/public/\" + level.badge : window.location.origin + level.badge}'> </image>\n          </svg>\n        `;\n                const fillCircle = document.getElementById(\"fillcircle\");\n                const circumference = 90 * Math.PI; // Calculate the circumference of the circle\n                fillCircle.style.setProperty(\"stroke-dasharray\", `${circumference}`);\n                fillCircle.style.setProperty(\"stroke-dashoffset\", strokeDashoffset);\n                imageForDiv.style.opacity = \"0.1\";\n                imageForDiv.style.width = \"0.1px\";\n                var progressBar = document.createElement(\"progress\");\n                progressBar.value = (maxScore - levelData.playerScore) / (maxScore - minScore);\n                progressBar.style.width = \"100%\";\n                progressBar.style.marginRight = \"10px\";\n                //imageDiv.appendChild(progressBar);\n                progressBar.classList.add(\"lineBreak\");\n                progressBar.style.display = \"block\";\n                progressBar.style[\"background-color\"] = \"#0A0A0A\";\n                buildOutEle = imageDiv;\n            }\n            imageForDiv.src = window.location.href !== \"https://tankshark.fun/\" ? `/public${level.badge}` : `${level.badge}`;\n            imageForDiv.alt = `badge level: ${level}`;\n            imageDiv.appendChild(imageForDiv);\n            imageForDiv.style.height = \"4.5vw\";\n            imageForDiv.style.minHeight = \"70px\";\n            imageDiv.style.minHeight = \"80px\";\n            if (level.maxScore >= levelData.playerScore && level.minScore <= levelData.playerScore) {\n                imageForDiv.style.visibility = \"hidden\";\n                imageDiv.style.setProperty(\"border-color\", \"var(--border-color-400)\", \"important\");\n            } else imageForDiv[\"aspect-ratio\"] = \"1 / 1\";\n        });\n    }\n    let pointerAngle = 0;\n    build();\n    var canAnimateProfile = true;\n    var darkmode = document.getElementById(\"darkModeCheck\");\n    var chatshown = document.getElementById(\"chatcheck\");\n    var leaderboardshown = document.getElementById(\"leaderBoardCheck\");\n    var namesshown = document.getElementById(\"namesCheck\");\n    const themeChanger = ()=>{\n        document.getElementById(\"getdarkMode\").classList.toggle(\"moveee\");\n        darkMode = !darkMode;\n        localStorage.setItem(\"theme\", darkMode);\n        var newTheme = darkMode ? \"dark\" : \"light\";\n        document.querySelector(\"html\").setAttribute(\"data-theme\", newTheme);\n        if (darkMode) {\n            document.getElementById(\"gridDark\").style.display = \"grid\";\n            document.getElementById(\"gridLight\").style.display = \"none\";\n        }\n        if (!darkMode) {\n            document.getElementById(\"gridDark\").style.display = \"none\";\n            document.getElementById(\"gridLight\").style.display = \"grid\";\n        }\n    };\n    darkmode.addEventListener(\"click\", themeChanger);\n    const chatToggle = ()=>{\n        canSeeChat = !canSeeChat;\n        localStorage.setItem(\"canSeeChat\", canSeeChat);\n        document.getElementById(\"getChatShown\").classList.toggle(\"moveee\");\n    };\n    chatshown.addEventListener(\"click\", chatToggle);\n    const leaderBoardToggle = ()=>{\n        canSeeLeaderBoard = !canSeeLeaderBoard;\n        localStorage.setItem(\"canSeeLeaderBoard\", canSeeLeaderBoard);\n        document.getElementById(\"getleaderBoardShown\").classList.toggle(\"moveee\");\n    };\n    leaderboardshown.addEventListener(\"click\", leaderBoardToggle);\n    const namesToggle = ()=>{\n        canSeeNames = !canSeeNames;\n        localStorage.setItem(\"canSeeNames\", canSeeNames);\n        document.getElementById(\"getnamesShown\").classList.toggle(\"moveee\");\n    };\n    namesshown.addEventListener(\"click\", namesToggle);\n    var playerCanvas = document.getElementById(\"playerCanvas\");\n    let profileCtx = playerCanvas.getContext(\"2d\");\n    function createProfile() {\n        profileCtx.clearRect(0, 0, playerCanvas.width, playerCanvas.height);\n        let gradient = profileCtx.createRadialGradient(playerCanvas.width / 2, playerCanvas.height / 2, 40, playerCanvas.width / 2, playerCanvas.height / 2, 50);\n        gradient.addColorStop(0.1, \"#00000000\");\n        gradient.addColorStop(0.5, \"#61f7ff\");\n        gradient.addColorStop(1, \"#FFFFFF00\");\n        profileCtx.beginPath();\n        profileCtx.arc(playerCanvas.width / 2, playerCanvas.height / 2, 50, 0, 2 * Math.PI, false);\n        profileCtx.fillStyle = gradient;\n        profileCtx.fill();\n        profileCtx.closePath();\n        profileCtx.fillStyle = \"#b3b3b3\";\n        profileCtx.save();\n        // Translate to the center of the square\n        profileCtx.translate(playerCanvas.width / 2, playerCanvas.height / 2);\n        profileCtx.rotate(pointerAngle);\n        let cannon_heightFOV = 30;\n        let cannon_widthFOV = 120;\n        // Draw the square\n        let basex = -cannon_widthFOV / 2 + cannon_heightFOV;\n        let basey = -cannon_heightFOV / 2;\n        profileCtx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\n        // Add a border to the cannon\n        profileCtx.strokeStyle = \"lightgrey\"; // Set border color\n        profileCtx.lineWidth = 3; // Set border width\n        profileCtx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\n        // Restore the previous transformation matrix\n        profileCtx.restore();\n        profileCtx.beginPath();\n        profileCtx.arc(playerCanvas.width / 2, playerCanvas.height / 2, 40, 0, 2 * Math.PI, false);\n        profileCtx.fillStyle = \"#828282\";\n        profileCtx.fill();\n        profileCtx.lineWidth = 5;\n        profileCtx.strokeStyle = \"#aaaaaa\";\n        profileCtx.stroke();\n        if (skinID !== 0) {\n            let imageSRC = images[skinID];\n            profileCtx.save();\n            profileCtx.translate(playerCanvas.width / 2, playerCanvas.height / 2);\n            profileCtx.rotate(pointerAngle);\n            profileCtx.drawImage(imageSRC, -40, -40, 80, 80);\n            profileCtx.restore();\n        }\n        if (canAnimateProfile) requestAnimationFrame(createProfile);\n    }\n    darkMode = localStorage.getItem(\"theme\");\n    canSeeNames = localStorage.getItem(\"canSeeNames\");\n    canSeeLeaderBoard = localStorage.getItem(\"canSeeLeaderBoard\");\n    canSeeChat = localStorage.getItem(\"canSeeChat\");\n    darkMode = darkMode === \"true\";\n    if (darkMode == null) localStorage.setItem(\"theme\", false);\n    if (canSeeNames == null) localStorage.setItem(\"canSeeNames\", true);\n    if (canSeeChat == null) localStorage.setItem(\"canSeeChat\", true);\n    if (canSeeLeaderBoard == null) localStorage.setItem(\"canSeeLeaderBoard\", true);\n    darkMode ??= false;\n    canSeeNames = canSeeNames === \"true\" || canSeeNames === null;\n    canSeeChat = canSeeChat === \"true\" || canSeeChat === null;\n    canSeeLeaderBoard = canSeeLeaderBoard === \"true\" || canSeeLeaderBoard === null;\n    if (isCrazyGames) {\n        if (window.CrazyGames.SDK.game.settings.disableChat) canSeeChat = false;\n    }\n    var newTheme = darkMode ? \"dark\" : \"light\";\n    if (darkMode) document.getElementById(\"getdarkMode\").classList.toggle(\"moveee\");\n    if (canSeeNames) document.getElementById(\"getnamesShown\").classList.toggle(\"moveee\");\n    if (canSeeChat) document.getElementById(\"getChatShown\").classList.toggle(\"moveee\");\n    if (canSeeLeaderBoard) document.getElementById(\"getleaderBoardShown\").classList.toggle(\"moveee\");\n    document.querySelector(\"html\").setAttribute(\"data-theme\", newTheme);\n    if (darkMode) {\n        document.getElementById(\"gridDark\").style.display = \"grid\";\n        document.getElementById(\"gridLight\").style.display = \"none\";\n    }\n    if (!darkMode) {\n        document.getElementById(\"gridDark\").style.display = \"none\";\n        document.getElementById(\"gridLight\").style.display = \"grid\";\n    }\n    // set theme on button press\n    requestAnimationFrame(createProfile);\n    const getProfilePointer = (evt)=>{\n        var mousepos = getMousePos(playerCanvas, evt);\n        pointerAngle = getMouseAngle(playerCanvas, mousepos.x, mousepos.y);\n    };\n    document.addEventListener(\"mousemove\", (evt)=>getProfilePointer(evt));\n    var badgeLevelDiv = document.getElementById(\"badgeLevelDiv\");\n    playerCanvas.style[\"background-image\"] = window.location.href !== \"https://tankshark.fun/\" ? `url(${window.location.origin}/public/assets/cropped/hexbackground.webp)` : `url(${window.location.origin}/assets/cropped/hexbackground.webp)`;\n    var skinGrid = document.getElementById(\"skins-grid\");\n    const skinsTabCloser = ()=>{\n        document.getElementById(\"skinCon\").style.display = \"none\";\n        skinShown = false;\n    };\n    document.getElementById(\"close\").addEventListener(\"click\", skinsTabCloser);\n    var skin = \"0.webp\";\n    var skinID = 0;\n    var selected_ele = {};\n    document.getElementById(\"skinsButton\").addEventListener(\"click\", ()=>{\n        document.getElementById(\"skinCon\").style.display = \"block\";\n    });\n    for(let i = 0; i < 11; i++){\n        var skinDiv = document.createElement(\"div\");\n        var skinImg = document.createElement(\"img\");\n        skinGrid.appendChild(skinDiv);\n        skinDiv.appendChild(skinImg);\n        skinImg.src = window.location.href !== \"https://tankshark.fun/\" ? `/public/skins/${i}.webp` : `/skins/${i}.webp`;\n        skinImg.classList.add(\"_100per_\");\n        skinDiv.classList.add(\"skin-div\");\n        var selectSkin = ()=>{\n            skinID = i;\n            skin = `${i}.webp`;\n            [\n                ...document.getElementById(\"skins-grid\").children\n            ].forEach((skin)=>{\n                skin.classList.remove(\"selected-skin\");\n            });\n            document.getElementById(\"skins-grid\").children[i + 1].classList.add(\"selected-skin\");\n            selected_ele = skinImg;\n        };\n        skinDiv.addEventListener(\"click\", selectSkin);\n    }\n    var skinShown = false;\n    const skinsTabOpener = ()=>{\n        skinShown = !skinShown;\n        document.getElementById(\"skinCon\").style.display = skinShown ? \"grid\" : \"none\";\n    };\n    document.getElementById(\"skinButton\").addEventListener(\"click\", skinsTabOpener);\n    const startGame = ()=>{\n        if (isCrazyGames) {\n            window.CrazyGames.SDK.game.gameplayStart();\n            window.CrazyGames.SDK.banner.clearAllBanners();\n        }\n        username = document.getElementById(\"username\").value;\n        document.removeEventListener(\"mousemove\", (evt)=>getProfilePointer(evt));\n        canAnimateProfile = false;\n        document.getElementById(\"full-screen\").style.display = \"flex\";\n        if (username) setTimeout(()=>{\n            document.getElementById(\"landing-page\").style.display = \"none\";\n            document.getElementById(\"game\").style.display = \"block\";\n            if (username !== \"A\") document.addEventListener(\"contextmenu\", (event)=>event.preventDefault());\n            ongame();\n        }, 100);\n        else setTimeout(()=>{\n            function generateRandomNumber(min, max) {\n                return Math.random() * (max - min) + min;\n            }\n            username = \"unknown-\" + Math.round(generateRandomNumber(0, 1000));\n            document.getElementById(\"landing-page\").style.display = \"none\";\n            document.getElementById(\"game\").style.display = \"block\";\n            /*document.addEventListener(\"contextmenu\", (event) =>\r\n          event.preventDefault()\r\n        );*/ ongame();\n        }, 100);\n    };\n    if (isCrazyGames) {\n        if (window.CrazyGames.SDK.game.isInstantMultiplayer) startGame();\n    }\n    window.addEventListener(\"load\", ()=>{\n        document.getElementById(\"playButton\").addEventListener(\"mousedown\", startGame);\n    });\n})();\nconsole.log(\"%c%s %c%s %c%s %c%s %c%s %c%s %c%s\", \"color:white\", \"Wellcome\", \"color:red\", \"skill issues!!!\", \"color:white\", \"Don't run scripts in here from stragers (Or anyone). Just don't\", \"color:red\", \"A good person is a person that clicks the X button of dev tools\", \"color:white\", \"\\n\\n\\n\\n\", \"color:red\", \"X\", \"color:white\", \"\\n \\u2B06\\n \\u2B06\\n \\u2B06\\n \\u2B06\\n \\u2B06\\n\");\n\n//# sourceMappingURL=public.3be83d56.js.map\n","// LOL, you little kids can't mess with my game\r\n(async function () {\r\n  /* Warning! DO NOT TOUCH */\r\n  const isCrazyGames = false;\r\n\r\n  if (isCrazyGames) {\r\n    // document.getElementsByTagName(\"body\")[0].innerHTML +=\r\n    //   '<script src=\"https://sdk.crazygames.com/crazygames-sdk-v3.js\"></script>';\r\n\r\n    try {\r\n      await window.CrazyGames.SDK.init();\r\n    } catch {\r\n      console.error(\"SOMETHING went wrong, reloading to try again\");\r\n      setTimeout(() => {\r\n        window.location.href = \"/\";\r\n      }, 5000);\r\n    }\r\n    const available = window.CrazyGames.SDK.user.isUserAccountAvailable;\r\n    if (available) {\r\n      const crazyUserObject = await window.CrazyGames.SDK.user.getUser()\r\n        .username;\r\n      document.getElementById(\"username\").value =\r\n        await window.CrazyGames.SDK.user.getUser().username;\r\n    }\r\n  }\r\n\r\n  if (isCrazyGames) {\r\n    try {\r\n      await window.CrazyGames.SDK.banner.requestResponsiveBanner(\"adbox\");\r\n    } catch (e) {\r\n      console.log(\"Error on request responsive banner\", e);\r\n    }\r\n  }\r\n\r\n  var badgelevels = {};\r\n\r\n  var badgesToLoad = [\r\n    \"1.webp\",\r\n    \"2.webp\",\r\n    \"3.webp\",\r\n    \"4.webp\",\r\n    \"5.webp\",\r\n    \"6.webp\",\r\n    \"7.webp\",\r\n    \"8.webp\",\r\n    \"9.webp\",\r\n    \"10.webp\",\r\n  ];\r\n\r\n  badgesToLoad.forEach((badge) => {\r\n    var img = new Image();\r\n    img.src =\r\n      window.location.href !== \"http://127.0.0.1:5501/public/index.html\"\r\n        ? `/badges/${badge}`\r\n        : `/public/badges/${badge}`;\r\n    badgelevels[`/badges/${badge}`] = img;\r\n  });\r\n\r\n  function getMousePos(canvas, evt) {\r\n    return {\r\n      x: evt.clientX,\r\n      y: evt.clientY,\r\n    };\r\n  }\r\n\r\n  function getMiddleOfElement(element) {\r\n    const rect = element.getBoundingClientRect();\r\n    const middleX = rect.left + rect.width / 2;\r\n    const middleY = rect.top + rect.height / 2;\r\n    return { x: middleX, y: middleY };\r\n  }\r\n\r\n  const getMouseAngle = (canvas, x, y) => {\r\n    var elePos = getMiddleOfElement(canvas);\r\n    return Math.atan2(y - elePos.y, x - elePos.x);\r\n  };\r\n\r\n  function getCookie(cname) {\r\n    let name = cname + \"=\";\r\n    let decodedCookie = decodeURIComponent(document.cookie);\r\n    let ca = decodedCookie.split(\";\");\r\n    for (let i = 0; i < ca.length; i++) {\r\n      let c = ca[i];\r\n      while (c.charAt(0) == \" \") {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  var username;\r\n\r\n  const images = [];\r\n  const imagePaths = [\r\n    \"0.webp\",\r\n    \"1.webp\",\r\n    \"2.webp\",\r\n    \"3.webp\",\r\n    \"4.webp\",\r\n    \"5.webp\",\r\n    \"6.webp\",\r\n    \"7.webp\",\r\n    \"8.webp\",\r\n    \"9.webp\",\r\n    \"10.webp\",\r\n  ]; // Array of image paths\r\n\r\n  imagePaths.forEach((path) => {\r\n    const img = new Image();\r\n    img.src =\r\n      (window.location.href !== \"https://tankshark.fun/\"\r\n        ? \"/public/skins/\"\r\n        : \"/skins/\") + path;\r\n    images.push(img);\r\n  });\r\n\r\n  var inverted = {};\r\n  images.forEach((image___, i) => {\r\n    inverted[`${i}.png`] = image___;\r\n  });\r\n\r\n  function loadProto() {\r\n    // Define the schema directly as a JSON object\r\n    const schema = {\r\n      nested: {\r\n        GameObject: {\r\n          fields: {\r\n            angle: { type: \"float\", id: 1 },\r\n            color: { type: \"string\", id: 2 },\r\n            health: { type: \"float\", id: 3 },\r\n            maxhealth: { type: \"int32\", id: 4 },\r\n            size: { type: \"float\", id: 5 },\r\n            type: { type: \"string\", id: 6 },\r\n            weight: { type: \"float\", id: 7 },\r\n            x: { type: \"float\", id: 8 },\r\n            y: { type: \"float\", id: 9 },\r\n            transparency: { type: \"float\", id: 10 },\r\n            randomID: { type: \"double\", id: 11 },\r\n          },\r\n        },\r\n        GameObjectList: {\r\n          fields: {\r\n            objects: { rule: \"repeated\", type: \"GameObject\", id: 1 },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // ignore error; does not interfer with aplication\r\n    const root = protobuf.Root.fromJSON(schema);\r\n\r\n    const GameObjectList = root.lookupType(\"GameObjectList\");\r\n\r\n    return GameObjectList;\r\n  }\r\n\r\n  // Function to decode the Protobuf message and return the type and data\r\n  function decodeMessage(event) {\r\n    var GameObjectList = loadProto();\r\n    if (!event.data) {\r\n      throw new Error(\"event.data is missing\");\r\n    }\r\n\r\n    const buffer = new Uint8Array(event.data);\r\n\r\n    const message = GameObjectList.decode(buffer);\r\n\r\n    return message;\r\n  }\r\n\r\n  var canSeeChat = true;\r\n  var darkMode = false;\r\n  var canSeeLeaderBoard = true;\r\n  var canSeeNames = true;\r\n\r\n  function ongame() {\r\n    let getIP = document.getElementById(\"IP\").value;\r\n\r\n    const socket =\r\n      new /*skill issus are comming to my server mohaa ha ha*/ WebSocket(getIP);\r\n    socket.binaryType = \"arraybuffer\";\r\n\r\n    let playerId = null; // Connect to the server\r\n    var canvas = document.createElement(\"canvas\");\r\n    const Ghostcanvas = document.getElementById(\"ghostCanvas\");\r\n    const ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    document.getElementById(\"game\").appendChild(canvas);\r\n    canvas.id = \"myCanvas\";\r\n    canvas.style[\"z-index\"] = \"5\";\r\n    canvas.style.position = \"absolute\";\r\n    canvas.style.top = \"0\";\r\n    canvas.style.left = \"0\";\r\n    canvas.itemprop = \"gamePlatform\";\r\n\r\n    document.getElementsByTagName(\"body\")[0].style.cursor =\r\n      window.location.href !== \"https://tankshark.fun/\"\r\n        ? `url('${window.location.origin}/public/targetpointer1.cur'), auto`\r\n        : `url('${window.location.origin}/targetpointer1.cur'), auto`;\r\n    var pi180 = Math.PI / 180;\r\n    let lastTime = performance.now();\r\n    let frameTimes = [];\r\n    let fps = 0;\r\n\r\n    var tankmeta = {\r\n      basic: {\r\n        \"size-m\": 1,\r\n        \"speed-m\": 1,\r\n        \"damage-m\": 1,\r\n        \"health-m\": 1,\r\n        \"regen-m\": 1,\r\n        fov: 1,\r\n        \"BodyDamage-m\": 1,\r\n        \"reaload-m\": 1,\r\n        upgradeLevel: 15,\r\n        upgrades: {},\r\n        cannons: [],\r\n      },\r\n    };\r\n\r\n    var gridDark = document.getElementById(\"gridDark\");\r\n    var gridLight = document.getElementById(\"gridLight\");\r\n\r\n    var HANDSHAKE = {\r\n      null: [{ null: null }],\r\n      null: [{ null: null }],\r\n      null: [{ null: \"LOL\" }],\r\n    };\r\n\r\n    var food_list = [];\r\n\r\n    // 🎮 Player-Related Variables\r\n    var players = {};\r\n    var playerX = canvas.width / 2;\r\n    var playerY = canvas.height / 2;\r\n    var playerHealth = 100;\r\n    var maxhealth = 100;\r\n    var playerHealTime = 0;\r\n    var playerReheal = 1;\r\n    var playerSpeed = 10;\r\n    var privateteamlist = [];\r\n    var playerSize = 1;\r\n    var playerBaseSize = 40;\r\n    var bodyDamage = 3;\r\n    var __type__ = \"basic\";\r\n    var selected_class = null;\r\n    var level = 0;\r\n    var upgradePoints = 0;\r\n    var maxUP = 8;\r\n    var dead = false;\r\n    var joinedTeam = false;\r\n    var teamOn = null;\r\n    var owner_of_team = false;\r\n    var score = 0;\r\n    var announcements = [];\r\n    var playerMessages = [];\r\n    var messaging = false;\r\n    var blinking = false;\r\n\r\n    // 🕹️ Movement & Controls\r\n    var canmove = true;\r\n    var canKeyPress = true;\r\n    var speedBoost = 1;\r\n    var canFire = true;\r\n    var canFire2 = true;\r\n    var keysPressed = {};\r\n    var movementTimeouts = [];\r\n    var autoRotating = false;\r\n    var lockautoRotating = false;\r\n    var autoAngle = 0;\r\n    var MouseX_ = 0;\r\n    var MouseY_ = 0;\r\n    var MouseX = 0;\r\n    var MouseY = 0;\r\n    var firingIntervals = {};\r\n    var firingInterval = null;\r\n\r\n    // 💥 Combat & Weapons\r\n    var bullets = [];\r\n    var zlevelbullets = [];\r\n    var roads = [];\r\n    var autoFiring = false;\r\n    var autoIntevals = [];\r\n    var baseFireInterval = 750;\r\n    var cannonFireData = [true];\r\n    var bullet_damage = 10;\r\n    var bullet_speed = 4;\r\n    var bullet_size = 15;\r\n    var bullet_pentration = 2;\r\n    var cannonWidth = [0];\r\n    var drones = 0;\r\n    var autocannons = [];\r\n\r\n    // 🗺️ Map & Environment\r\n    var mapLeft = -5000;\r\n    var mapRight = 5000;\r\n    var mapTop = -5000;\r\n    var mapBottom = 5000;\r\n    var boundrectcanvas = Ghostcanvas.getBoundingClientRect();\r\n    var cavansX = 0;\r\n    var cavansY = 0;\r\n    var canW = canvas.width;\r\n    var canH = canvas.height;\r\n    var FOV = 1; // sensitive\r\n    var gridDarkstyle = gridDark.style;\r\n    var gridLightstyle = gridLight.style;\r\n    var sqrt23 = Math.sqrt(3) / 2;\r\n    var pi = Math.PI;\r\n    var pentarotate = 0;\r\n\r\n    // 🛡️ UI & Interface\r\n    var state = \"start\";\r\n    var statecycle = 0;\r\n    var progress = 0.0;\r\n    var setprogress = 0;\r\n    var barWidth = 0.3125 * canvas.width;\r\n    var barHeight = 0.02909796314 * canvas.height;\r\n    var borderRadius = 10;\r\n    var teampanelopen = false;\r\n    var leader_board = [];\r\n    var badge = \"\";\r\n    var img = null;\r\n\r\n    // 🎯 Buttons & Controls\r\n    var button475 = 0.24739583333 * canvas.width;\r\n    var button462_5 = 0.24088541666 * canvas.width;\r\n    var button375 = 0.1953125 * canvas.width;\r\n    var button40 = 0.03100775193 * canvas.height;\r\n    var button10 = 0.00969932104 * canvas.height;\r\n    var nolist = [3, 5, 7, 8, 10, 11, 13];\r\n\r\n    // 🕰️ Timers & Intervals\r\n    var Regenspeed = 30;\r\n    var firingIntervals = {};\r\n    var firingInterval = null;\r\n    var autoIntevals = [];\r\n    var movementTimeouts = [];\r\n\r\n    // 👾 Enemies, Bosses, & NPCs\r\n    var bosses = [];\r\n    var explosions = [];\r\n    var requests = [];\r\n\r\n    // 🏢 Teams & Multiplayer\r\n    var pubteams = [];\r\n    var teamOver = false;\r\n    var userId = getCookie(\"userId\");\r\n    var typedtext = \"\";\r\n    var radiusConfig = {};\r\n\r\n    // 🧠 Miscellaneous / Game Logic\r\n    var vertices = [];\r\n    var errors = 0;\r\n    var cannonFireData = [true];\r\n    var cannonWidth = [0];\r\n    var sqrt23 = Math.sqrt(3) / 2;\r\n    var squareColor = \"grey\";\r\n    var nolist = [3, 5, 7, 8, 10, 11, 13];\r\n    var __reload__ = 1;\r\n    var colorUpgrades = [];\r\n    var teamColorUpgrades = [];\r\n    var scaleUp = 0;\r\n    var state = \"start\";\r\n    var statecycle = 0;\r\n    var progress = 0.0;\r\n    var pentarotate = 0;\r\n    var requests = [];\r\n    var imgsrcs = [\"assets/dislike.webp\", \"assets/like.webp\"];\r\n    var minimapLevels = [];\r\n    var levels = {\r\n      0: 15,\r\n    };\r\n    var socialContainer = document.getElementById(\"socialContainer\");\r\n    let statsTree = {\r\n      Health: 1,\r\n      \"Body Damage\": 1,\r\n      Regen: 1,\r\n      \"Bullet Pentration\": 1,\r\n      \"Bullet Speed\": 1,\r\n      \"Bullet Damage\": 1,\r\n      \"Bullet Reload\": 1,\r\n      Speed: 1,\r\n    };\r\n\r\n    function waitpls() {\r\n      setTimeout(() => {\r\n        canKeyPress = true;\r\n      }, 300);\r\n      canKeyPress = false;\r\n    }\r\n\r\n    socialContainer.style.display = \"none\";\r\n\r\n    function send(type, data) {\r\n      if (socket.readyState === WebSocket.OPEN) {\r\n        try {\r\n          socket.send(JSON.stringify({ type: type, data: data }));\r\n        } catch (e) {\r\n          if (errors > 2) return;\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 2500);\r\n          alert(\r\n            \"There is an error or socket disconnection. Please report this if the error is not related to a closing state error.\"\r\n          );\r\n          alert(\"error\", e);\r\n        }\r\n      } else {\r\n        setTimeout(() => {\r\n          //window.location.reload();\r\n        }, 1);\r\n        setTimeout(() => {\r\n          alert(`There is a disconnection. ${socket.readyState}`);\r\n        }, 0);\r\n        console.log(type, data);\r\n        errors++;\r\n      }\r\n    }\r\n\r\n    const getCannonAngle = () => {\r\n      return Math.atan2(\r\n        MouseY_ - window.innerHeight / 2,\r\n        MouseX_ - window.innerWidth / 2\r\n      );\r\n    };\r\n\r\n    function mix(rgb, rgb2, percent, ...otherrgbs) {\r\n      let _return = false;\r\n      rgb.forEach((f) => {\r\n        if (typeof f !== \"number\") _return = true;\r\n      });\r\n      rgb2.forEach((f) => {\r\n        if (typeof f !== \"number\") _return = true;\r\n      });\r\n      if (rgb.length !== 3 || rgb2.length !== 3) _return = true;\r\n      if (_return) throw new Error(\"Bad rgbs\");\r\n      var newrgb = rgb.map((c, i) => {\r\n        return (c = rgb2[i] * percent + c * (1 - percent));\r\n      });\r\n      otherrgbs.forEach((rgb, i) => {\r\n        mix(rgb, otherrgbs[i], percent);\r\n      });\r\n      return newrgb;\r\n    }\r\n\r\n    function setCookie(cname, cvalue, exdays) {\r\n      const d = new Date();\r\n      d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\r\n      let expires = \"expires=\" + d.toUTCString();\r\n      document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n\r\n    setCookie(\"score\", 25000000, 100);\r\n\r\n    function levelUpgrader(tankdata) {\r\n      var out = false;\r\n      if (tankdata[\"upgrades\"] == undefined) return;\r\n      for (let i = 0; i < Object.keys(tankdata[\"upgrades\"]).length; i++) {\r\n        var KEY = Object.keys(tankdata[\"upgrades\"])[i];\r\n\r\n        if (level >= tankdata[\"upgrades\"][KEY][\"level\"] - 1) {\r\n          if (out === false) {\r\n            var tankstiles = document.getElementById(\"tanktiles\");\r\n            tankstiles.style.display = \"block\";\r\n            tankstiles.style.left = 0;\r\n            tankstiles.style.animation = \"2s 1 move\";\r\n            tankstiles.innerHTML = \"\";\r\n            out = true;\r\n          }\r\n\r\n          var upgrade = tankdata[\"upgrades\"][KEY];\r\n\r\n          var img__ = document.createElement(\"img\");\r\n          var tileImg = upgrade.img;\r\n          tankstiles.appendChild(img__);\r\n\r\n          img__.src = \"tanktiles/\" + tileImg + \".png\";\r\n          img__.style = \"width: 6vw; height: 6vw; margin: 10px; z-index: 100;\";\r\n\r\n          img__.addEventListener(\"click\", function (evt) {\r\n            evt.stopPropagation();\r\n            tankstiles.style.display = \"none\";\r\n            __type__ = Object.keys(tankdata[\"upgrades\"])[i];\r\n            players[playerId].__type__ = __type__;\r\n            tankdata = tankmeta[__type__];\r\n            var tankdatacannon__ = tankdata[\"cannons\"];\r\n            playerSize *= tankdata[\"size-m\"];\r\n            playerSpeed *= tankdata[\"speed-m\"];\r\n            bullet_damage *= tankdata[\"damage-m\"];\r\n            playerReheal *= tankdata[\"regen-m\"];\r\n            bodyDamage *= tankdata[\"BodyDamage-m\"];\r\n            maxhealth *= tankdata[\"health-m\"];\r\n            if (playerHealth > maxhealth) {\r\n              playerHealth = maxhealth;\r\n            }\r\n            if (tankdata[\"AutoRoting\"]) {\r\n              autoRotating = true;\r\n              lockautoRotating = true;\r\n            }\r\n            if (tankdata.fov !== 0) {\r\n              scaleby(tankdata.fov);\r\n            }\r\n\r\n            send(\"typeChange\", {\r\n              health: playerHealth,\r\n              speed: playerSpeed,\r\n              size: playerSize,\r\n              bodyDamage: bodyDamage,\r\n              __type__: __type__,\r\n              state: state,\r\n              statecycle: statecycle,\r\n              playerHealTime: playerHealTime,\r\n              maxhealth: maxhealth,\r\n              playerReheal: playerReheal,\r\n              FOV: scaleFactor,\r\n              Regenspeed: Regenspeed,\r\n              statsTree: {\r\n                Health: statsTree.Health,\r\n                \"Body Damage\": statsTree[\"Body Damage\"],\r\n                Regen: statsTree.Regen,\r\n                \"Bullet Pentration\": statsTree[\"Bullet Pentration\"],\r\n                \"Bullet Speed\": statsTree[\"Bullet Speed\"],\r\n                \"Bullet Damage\": statsTree[\"Bullet Damage\"],\r\n                \"Bullet Reload\": statsTree[\"Bullet Reload\"],\r\n                Speed: statsTree.Speed,\r\n              },\r\n            });\r\n\r\n            setTimeout(() => {\r\n              cannonWidth = [];\r\n              cannonFireData = [];\r\n              for (let i = 0; i < Object.keys(tankdatacannon__).length; i++) {\r\n                cannonWidth.push(0);\r\n                cannonFireData.push(true);\r\n              }\r\n              autocannons.forEach((popcannon) => {\r\n                if (popcannon.playerid === playerId) {\r\n                  send(\"deletAuto\", { CannonID: popcannon.CannonID });\r\n                  clearInterval(popcannon);\r\n                  popcannon = null;\r\n                }\r\n              });\r\n              for (const cannon_ in tankdatacannon__) {\r\n                let cannon = tankdatacannon__[cannon_];\r\n                if (\r\n                  cannon.type === \"autoCannon\" ||\r\n                  cannon.type === \"SwivelAutoCannon\"\r\n                ) {\r\n                  let autoID = Math.random() * 1000 + Math.random() * 1000;\r\n                  send(\"autoCannonADD\", {\r\n                    CannonID: autoID,\r\n                    angle: 0,\r\n                    _type_: cannon.type,\r\n                    cannonWidth: 0,\r\n                  });\r\n                  let cannon__ = cannon;\r\n                  let tankdata = tankmeta[__type__];\r\n                  let _CAN = {\r\n                    CannonID: autoID,\r\n                    angle: 0,\r\n                    _type_: cannon.type,\r\n                    cannonWidth: 0,\r\n                  };\r\n                  function cannonINT() {\r\n                    var __tankdata__ = tankmeta[__type__];\r\n                    if (_CAN.playerid === playerId) {\r\n                      let cannon;\r\n                      let index = 0;\r\n                      for (const ___cannon___ in __tankdata__.cannons) {\r\n                        let cannon___ = __tankdata__.cannons[___cannon___];\r\n                        if (index === cannon__.autoindex) {\r\n                          cannon = cannon___;\r\n                        }\r\n                        index++;\r\n                      }\r\n                      var offSet_x = tankdatacannon__[cannon_][\"offSet-x\"];\r\n                      if (tankdatacannon__[cannon_][\"offSet-x\"] === \"playerX\") {\r\n                        offSet_x = playerSize * playerBaseSize * FOV;\r\n                      }\r\n                      if (tankdatacannon__[cannon_][\"offSet-x-multpliyer\"]) {\r\n                        offSet_x *= -1;\r\n                      }\r\n                      let angle0 = getCannonAngle();\r\n                      if (\r\n                        tankdatacannon__[cannon_].type === \"SwivelAutoCannon\"\r\n                      ) {\r\n                        var [x, y] = rotatePointAroundPlayer(\r\n                          offSet_x,\r\n                          0,\r\n                          angle0 * (180 / Math.PI)\r\n                        );\r\n                      }\r\n\r\n                      //ctx.translate((canW / 2)+x,y+canH / 2);\r\n                      if (\r\n                        tankdatacannon__[cannon_].type === \"SwivelAutoCannon\"\r\n                      ) {\r\n                        send(\"Autofire\", {\r\n                          playerX: playerX + x,\r\n                          playerY: playerY + y,\r\n                          cannon: cannon__,\r\n                          bullet_damage: bullet_damage,\r\n                          bullet_speed: bullet_speed,\r\n                          bullet_size: bullet_size,\r\n                          bullet_pentration: bullet_pentration,\r\n                          extracannon_: cannon_,\r\n                          _cannon: _CAN,\r\n                        });\r\n                      }\r\n                      if (tankdatacannon__[cannon_].type === \"autoCannon\") {\r\n                        send(\"Autofire\", {\r\n                          playerX: playerX - offSet_x,\r\n                          playerY: playerY,\r\n                          cannon: cannon__,\r\n                          bullet_damage: bullet_damage,\r\n                          bullet_speed: bullet_speed,\r\n                          bullet_size: bullet_size,\r\n                          bullet_pentration: bullet_pentration,\r\n                          extracannon_: cannon_,\r\n                          _cannon: _CAN,\r\n                        });\r\n                      }\r\n                    }\r\n                    setTimeout(() => {\r\n                      cannonINT();\r\n                    }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\r\n                  }\r\n                  setTimeout(() => {\r\n                    cannonINT();\r\n                  }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\r\n                  autoIntevals.push({ cannonINT: cannonINT, autoID: autoID });\r\n                }\r\n              }\r\n            }, 100);\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    function levelHANDLER() {\r\n      setprogress =\r\n        (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\r\n      setprogress =\r\n        setprogress === 0 || Number.isNaN(setprogress) ? 1 : setprogress;\r\n      if (score / levels[level] >= 1) {\r\n        upgradePoints += 1;\r\n        // Add transition property\r\n\r\n        let tankdata = tankmeta[__type__];\r\n        levelUpgrader(tankdata);\r\n        level += 1;\r\n        progress = 0;\r\n        setprogress =\r\n          (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\r\n        playerSize += playerSize * 0.005;\r\n        send(\"Sizeup\", { plus: playerSize * 0.005 });\r\n        scaleby(scaleUp);\r\n        while (score / levels[level] >= 1) {\r\n          level += 1;\r\n          upgradePoints += 1;\r\n          playerSize += playerSize * 0.005;\r\n          send(\"Sizeup\", { plus: playerSize * 0.005 });\r\n          scaleby(scaleUp);\r\n          progress = 0;\r\n          setprogress =\r\n            (score - levels[level - 1]) / (levels[level] - levels[level - 1]);\r\n          let tankdata = tankmeta[__type__];\r\n          levelUpgrader(tankdata);\r\n        }\r\n      }\r\n    }\r\n\r\n    function buildTeamList() {\r\n      if (!joinedTeam) {\r\n        pubteams.forEach((team) => {\r\n          var teamcontainer = document.getElementById(\"teamcontainer\");\r\n          var item = document.createElement(\"div\");\r\n          var downArrow = document.createElement(\"img\");\r\n          downArrow.src = \"assets/expand.png\";\r\n          item.classList.add(\"team\");\r\n          item.innerText = team.name;\r\n          teamcontainer.appendChild(item);\r\n          item.appendChild(downArrow);\r\n          var infoConteiner = document.createElement(\"div\");\r\n          var info = document.createElement(\"p\");\r\n          info.innerText = `\r\n          Team type: ${team.govType}\r\n          Taxes: \r\n          Flat rate ${team.simpleTax}\r\n          Player based rate ${team.playerTax}\r\n          ScheduledBased based rate ${team.ScheduledBasedTax} per ${\r\n            team.ScheduledBasedTaxInterval * 60 * 1000\r\n          } minet interval\r\n          `;\r\n\r\n          if (team.govType === \"Constitutional\") {\r\n            info.innerText += `${team.constitution}`;\r\n          }\r\n\r\n          infoConteiner.classList.add(\"team\");\r\n          infoConteiner.style.height = \"50%\";\r\n          infoConteiner.style.overflow = \"auto\";\r\n          infoConteiner.style.display = \"none\";\r\n\r\n          teamcontainer.appendChild(infoConteiner);\r\n          infoConteiner.appendChild(info);\r\n\r\n          downArrow.style.width = \"1.6em\";\r\n          downArrow.style.height = \"1.3em\";\r\n          downArrow.style[\"margin-top\"] = \"0px\";\r\n          downArrow.style[\"margin-bottom\"] = \"-5px\";\r\n          downArrow.style[\"margin-right\"] = \"3px\";\r\n          downArrow.style.float = \"right\";\r\n          let isDown = false;\r\n          const demotePlayer = () => {\r\n            downArrow.style.rotate = isDown ? \"180deg\" : \"0deg\";\r\n            infoConteiner.style.display = isDown ? \"none\" : \"block\";\r\n            isDown = !isDown;\r\n          };\r\n          downArrow.addEventListener(\"click\", demotePlayer);\r\n          const addSelected = () => {\r\n            Array.from(teamcontainer.children).forEach((child) => {\r\n              child.classList.remove(\"glow\");\r\n            });\r\n\r\n            item.classList.add(\"glow\");\r\n\r\n            selected_class = team.teamID;\r\n          };\r\n          item.addEventListener(\"click\", addSelected);\r\n        });\r\n      } else {\r\n        let MYteam = pubteams.find((team) => {\r\n          return team.teamID === players[playerId].team;\r\n        });\r\n        if (MYteam.lowerLevelPlayers) {\r\n          var amLower = MYteam.lowerLevelPlayers.includes({\r\n            id: playerId,\r\n            username: username,\r\n          });\r\n        } else {\r\n          var amLower = false;\r\n        }\r\n        MYteam.players.forEach((player) => {\r\n          var teamcontainer = document.getElementById(\"teamcontainer\");\r\n          var item = document.createElement(\"div\");\r\n          item.classList.add(\"team\");\r\n          if (player.id === MYteam.owner.id) {\r\n            item.innerText = player.username + \" -\";\r\n          } else {\r\n            item.innerText = player.username;\r\n          }\r\n          if (player.id === MYteam.owner.id) {\r\n            var crown = document.createElement(\"img\");\r\n            crown.src = \"assets/crownIcon.png\";\r\n            item.appendChild(crown);\r\n            crown.style.width = \"1.6em\";\r\n            crown.style.height = \"1.3em\";\r\n            crown.style[\"margin-left\"] = \"5px\";\r\n            crown.style[\"margin-top\"] = \"0px\";\r\n            crown.style[\"margin-bottom\"] = \"-5px\";\r\n          }\r\n\r\n          teamcontainer.appendChild(item);\r\n          if (\r\n            MYteam.owner.id === playerId &&\r\n            player.id !== MYteam.owner.id &&\r\n            MYteam.powers.canKick\r\n          ) {\r\n            const addKick = () => {\r\n              if (teamOver) return;\r\n              teamOver = true;\r\n              var kick = document.createElement(\"img\");\r\n              kick.src = \"assets/kickButton.png\";\r\n              kick.style.width = \"1.5em\";\r\n              kick.style.height = \"1.5em\";\r\n              kick.style[\"text-align\"] = \"left\";\r\n              kick.addEventListener(\"click\", () => {\r\n                send(\"kickplayer\", {\r\n                  id: player.id,\r\n                  team: MYteam.teamID,\r\n                });\r\n              });\r\n              item.appendChild(kick);\r\n              item.addEventListener(\"mouseleave\", () => {\r\n                teamOver = false;\r\n                item.children[0].remove();\r\n              });\r\n            };\r\n            item.addEventListener(\"mouseover\", addKick);\r\n            if (added) {\r\n              var kick = document.createElement(\"img\");\r\n              kick.src = \"assets/kickButton.png\";\r\n              kick.style.width = \"1.5em\";\r\n              kick.style.height = \"1.5em\";\r\n              kick.style[\"text-align\"] = \"left\";\r\n              kick.addEventListener(\"click\", () => {\r\n                send(\"kickplayer\", {\r\n                  id: player.id,\r\n                  team: MYteam.teamID,\r\n                });\r\n              });\r\n              item.appendChild(kick);\r\n            }\r\n          }\r\n          if (MYteam.owner.id === playerId || amLower) {\r\n            var canPremote = amLower\r\n              ? MYteam.powers.lowerlevelpowers.canDedicatePower\r\n              : MYteam.powers.canDedicatePower;\r\n\r\n            var canDemote = amLower\r\n              ? MYteam.powers.lowerlevelpowers.canDededicatePower\r\n              : MYteam.powers.canDededicatePower;\r\n\r\n            if (canPremote && MYteam.owner.id !== player.id) {\r\n              if (MYteam.lowerLevelPlayers) {\r\n                if (!MYteam.lowerLevelPlayers.includes(player)) {\r\n                  var premoteArrow = document.createElement(\"img\");\r\n                  premoteArrow.src = \"assets/premoteArrow.png\";\r\n                  item.appendChild(premoteArrow);\r\n                  premoteArrow.style.width = \"1.6em\";\r\n                  premoteArrow.style.height = \"1.3em\";\r\n                  premoteArrow.style[\"margin-left\"] = \"5px\";\r\n                  premoteArrow.style[\"margin-top\"] = \"0px\";\r\n                  premoteArrow.style[\"margin-bottom\"] = \"-5px\";\r\n                  premoteArrow.style[\"float\"] = \"right\";\r\n\r\n                  const addplayer = () => {\r\n                    send(\"premotePlayer\", {\r\n                      premote: player,\r\n                      MYteamID: MYteam.teamID,\r\n                    });\r\n                    premoteArrow.removeEventListener(\"click\", addplayer);\r\n                  };\r\n\r\n                  premoteArrow.addEventListener(\"click\", addplayer);\r\n                }\r\n              }\r\n            }\r\n            if (canDemote && MYteam.owner.id !== player.id) {\r\n              if (MYteam.lowerLevelPlayers) {\r\n                if (MYteam.lowerLevelPlayers.includes(player)) {\r\n                  var demoteArrow = document.createElement(\"img\");\r\n                  demoteArrow.src = \"assets/demoteArrow.png\";\r\n                  item.appendChild(premoteArrow);\r\n                  demoteArrow.style.width = \"1.6em\";\r\n                  demoteArrow.style.height = \"1.3em\";\r\n                  demoteArrow.style[\"margin-left\"] = \"5px\";\r\n                  demoteArrow.style[\"margin-top\"] = \"0px\";\r\n                  demoteArrow.style[\"margin-bottom\"] = \"-5px\";\r\n                  premdemoteArrowoteArrow.style[\"float\"] = \"right\";\r\n\r\n                  const addplayer = () => {\r\n                    send(\"demotePlayer\", {\r\n                      premote: player,\r\n                      MYteamID: MYteam.teamID,\r\n                    });\r\n                    demoteArrow.removeEventListener(\"click\", addplayer);\r\n                  };\r\n\r\n                  demoteArrow.addEventListener(\"click\", addplayer);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    document\r\n      .getElementsByClassName(\"outer-box\")[0]\r\n      .classList.add(\"outer-onwer-box\");\r\n    document\r\n      .getElementsByClassName(\"inner-box\")[0]\r\n      .classList.add(\"inner-onwer-box\");\r\n    document.getElementById(\"upgradesBox\").style.display = \"block\";\r\n\r\n    document.getElementById(\"HomeBaseUpgrade\").addEventListener(\"click\", () => {\r\n      document.getElementById(\"confermationScreen\").style.display = \"flex\";\r\n    });\r\n    document.getElementById(\"placeNo\").addEventListener(\"click\", () => {\r\n      document.getElementById(\"confermationScreen\").style.display = \"none\";\r\n    });\r\n    document.getElementById(\"placeYes\").addEventListener(\"click\", () => {\r\n      document.getElementById(\"confermationScreen\").style.display = \"none\";\r\n      send(\"requestUpgrade\", {\r\n        upgradeType: \"buildBase\",\r\n        teamId: teamOn,\r\n      });\r\n    });\r\n\r\n    document.getElementById(\"upgradeHealth\").addEventListener(\"click\", () => {\r\n      send(\"requestUpgrade\", {\r\n        upgradeType: \"statUpgrade\",\r\n        stat: \"Health\",\r\n        teamId: teamOn,\r\n      });\r\n    });\r\n    document\r\n      .getElementById(\"upgradeBodyDamage\")\r\n      .addEventListener(\"click\", () => {\r\n        send(\"requestUpgrade\", {\r\n          upgradeType: \"statUpgrade\",\r\n          stat: \"Body Damage\",\r\n          teamId: teamOn,\r\n        });\r\n      });\r\n    document.getElementById(\"upgradeRegen\").addEventListener(\"click\", () => {\r\n      send(\"requestUpgrade\", {\r\n        upgradeType: \"statUpgrade\",\r\n        stat: \"Regen\",\r\n        teamId: teamOn,\r\n      });\r\n    });\r\n    document\r\n      .getElementById(\"upgradeBulletPentration\")\r\n      .addEventListener(\"click\", () => {\r\n        send(\"requestUpgrade\", {\r\n          upgradeType: \"statUpgrade\",\r\n          stat: \"Bullet Pentration\",\r\n          teamId: teamOn,\r\n        });\r\n      });\r\n    document\r\n      .getElementById(\"upgradeBulletSpeed\")\r\n      .addEventListener(\"click\", () => {\r\n        send(\"requestUpgrade\", {\r\n          upgradeType: \"statUpgrade\",\r\n          stat: \"Bullet Speed\",\r\n          teamId: teamOn,\r\n        });\r\n      });\r\n    document\r\n      .getElementById(\"upgradeBulletDamage\")\r\n      .addEventListener(\"click\", () => {\r\n        send(\"requestUpgrade\", {\r\n          upgradeType: \"statUpgrade\",\r\n          stat: \"Body Damage\",\r\n          teamId: teamOn,\r\n        });\r\n      });\r\n    document\r\n      .getElementById(\"upgradeBulletReload\")\r\n      .addEventListener(\"click\", () => {\r\n        send(\"requestUpgrade\", {\r\n          upgradeType: \"statUpgrade\",\r\n          stat: \"Bullet Reload\",\r\n          teamId: teamOn,\r\n        });\r\n      });\r\n    document.getElementById(\"upgradeSpeed\").addEventListener(\"click\", () => {\r\n      send(\"requestUpgrade\", {\r\n        upgradeType: \"statUpgrade\",\r\n        stat: \"Speed\",\r\n        teamId: teamOn,\r\n      });\r\n    });\r\n    var postText = document.getElementById(\"posttext\");\r\n    document.getElementById(\"postBite\").addEventListener(\"click\", () => {\r\n      send(\"postBite\", { message: postText.value, teamID: teamOn });\r\n      postText.value = \"\";\r\n    });\r\n\r\n    window.onbeforeunload = (evt) => {\r\n      if (!confirm(\"Reloading will not save your progress!\")) {\r\n        evt.preventDefault();\r\n        evt.returnValue = \"\";\r\n      }\r\n    };\r\n\r\n    socket.onopen = function () {\r\n      setTimeout(() => {\r\n        console.time(\"preconnect\");\r\n        if (isCrazyGames)\r\n          var teamKey = window.CrazyGames.SDK.game.getInviteParam(\"teamId\");\r\n        if (isCrazyGames) window.CrazyGames.SDK.game.loadingStart();\r\n        let resolveDraw, rejectDraw;\r\n        let resolveDraw2, rejectDraw2;\r\n        let resolveDraw3, rejectDraw3;\r\n        let resolveDraw4, rejectDraw4;\r\n\r\n        var configPromise = new Promise((resolve, reject) => {\r\n          resolveDraw = resolve;\r\n          rejectDraw = reject;\r\n        });\r\n\r\n        var tankmetaPromise = new Promise((resolve, reject) => {\r\n          resolveDraw2 = resolve;\r\n          rejectDraw2 = reject;\r\n        });\r\n\r\n        var levelPromise = new Promise((resolve, reject) => {\r\n          resolveDraw3 = resolve;\r\n          rejectDraw3 = reject;\r\n        });\r\n\r\n        var IDPromise = new Promise((resolve, reject) => {\r\n          resolveDraw4 = resolve;\r\n          rejectDraw4 = reject;\r\n        });\r\n\r\n        var recivedData = [\r\n          configPromise,\r\n          tankmetaPromise,\r\n          levelPromise,\r\n          IDPromise,\r\n        ];\r\n\r\n        Promise.allSettled(recivedData).then(() => {\r\n          console.timeEnd(\"preconnect\");\r\n          scaleby(0);\r\n          document.getElementById(\"full-screen\").style.display = \"none\";\r\n          draw();\r\n          if (isCrazyGames) window.CrazyGames.SDK.game.loadingStop();\r\n        });\r\n        if (!isCrazyGames) {\r\n          const urlParams = new URLSearchParams(location);\r\n\r\n          var teamKey = urlParams.get(\"team\");\r\n        }\r\n\r\n        const playerData = {\r\n          id: null,\r\n          x: playerX,\r\n          y: playerY,\r\n          health: playerHealth,\r\n          speed: playerSpeed,\r\n          size: playerSize,\r\n          bodyDamage: bodyDamage,\r\n          cannonW: cannonWidth,\r\n          cannonH: 0,\r\n          __type__: __type__,\r\n          cannon_angle: getCannonAngle(),\r\n          score: score,\r\n          username: username,\r\n          level: level,\r\n          state: state,\r\n          statecycle: statecycle,\r\n          playerHealTime: playerHealTime,\r\n          maxhealth: maxhealth,\r\n          playerReheal: playerReheal,\r\n          FOV: scaleFactor,\r\n          canvasW: canvas.width,\r\n          canvasH: canvas.height,\r\n          MouseX: MouseX_,\r\n          Regenspeed: Regenspeed,\r\n          MouseY: MouseY_,\r\n          screenWidth: canvas.width,\r\n          screenHeight: canvas.height,\r\n          visible: true,\r\n          team: teamOn,\r\n          userId: userId,\r\n          autoFiring: autoFiring,\r\n          skin: skin,\r\n          isCrazy: isCrazyGames,\r\n          teamKey: teamKey,\r\n          statsTree: {\r\n            Health: 1,\r\n            \"Body Damage\": 1,\r\n            Regen: 1,\r\n            \"Bullet Pentration\": 1,\r\n            \"Bullet Speed\": 1,\r\n            \"Bullet Damage\": 1,\r\n            \"Bullet Reload\": 1,\r\n            Speed: 1,\r\n          },\r\n        };\r\n\r\n        send(\"newPlayer\", playerData);\r\n\r\n        send(\"HANDSHAKE\", {});\r\n\r\n        img = new Image();\r\n\r\n        img.onload = function () {\r\n          ctx.drawImage(img, canvas.width / 2, canvas.height - 60);\r\n        };\r\n        img.src = `https://deip-io3.glitch.me${badge}?nocache=${Date.now()}`;\r\n\r\n        socket.onmessage = function (event) {\r\n          var type;\r\n          var data;\r\n          try {\r\n            const message = JSON.parse(event.data);\r\n\r\n            type = message.type;\r\n            data = message.data;\r\n          } catch {\r\n            function f() {\r\n              const message = decodeMessage(event);\r\n\r\n              type = message.type;\r\n              data = message.data;\r\n              food_list = message.objects;\r\n            }\r\n            f();\r\n            return;\r\n          }\r\n          switch (type) {\r\n            case \"newId\": {\r\n              playerId = data;\r\n              resolveDraw4();\r\n              break;\r\n            }\r\n\r\n            case \"playerUpdated\": {\r\n              players[data.id] = data; // Update the local player data\r\n              console.log(\"Player updated:\", data); // Log the update\r\n              break;\r\n            }\r\n            case \"new_X_Y\": {\r\n              if (data.id !== playerId) return;\r\n              cavansX = data.x;\r\n              playerY += data.y;\r\n              cavansY = data.y;\r\n              playerX += data.x;\r\n              break;\r\n            }\r\n            case \"explosionUpdate\": {\r\n              explosions = data;\r\n              break;\r\n            }\r\n            case \"CannonWidthUpdate\": {\r\n              var cannon = autocannons.find(\r\n                (cannon_) => cannon_.CannonID === data.CannonID\r\n              );\r\n              cannon.cannonWidth = data.cannonWidth;\r\n              break;\r\n            }\r\n            case \"minimapUpdate\": {\r\n              minimapLevels = data;\r\n              break;\r\n            }\r\n            case \"Config\": {\r\n              baseFireInterval = data.baseFireInterval;\r\n              scaleUp = data.scaleUp;\r\n              radiusConfig = data.colorGradeint;\r\n              playerBaseSize = data.playerBaseSize;\r\n              var gridDark = document.getElementById(\"gridDark\");\r\n              var gridLight = document.getElementById(\"gridLight\");\r\n              for (let i = 0; i < data.map.size / 500; i++) {\r\n                for (let j = 0; j < data.map.size / 500; j++) {\r\n                  const div = document.createElement(\"div\");\r\n                  const img = document.createElement(\"img\");\r\n                  img.style.width = \"100%\";\r\n                  img.style.height = \"100%\";\r\n                  img.src = \"backgrounds/hexlight.webp\";\r\n                  let divstyle = div.style;\r\n                  divstyle.width = \"999px\";\r\n                  divstyle.height = \"999px\";\r\n                  divstyle.backgroundColor = \"white\";\r\n                  divstyle.border = \"1px solid black\";\r\n                  div.appendChild(img);\r\n                  gridLight.appendChild(div);\r\n                }\r\n              }\r\n              for (let t = 0; t < data.map.size / 500; t++) {\r\n                for (let k = 0; k < data.map.size / 500; k++) {\r\n                  const div = document.createElement(\"div\");\r\n                  const img = document.createElement(\"img\");\r\n                  img.style.width = \"100%\";\r\n                  img.style.height = \"100%\";\r\n                  img.src = \"backgrounds/hexdark.webp\";\r\n                  let divstyle = div.style;\r\n                  divstyle.width = \"999px\";\r\n                  divstyle.height = \"999px\";\r\n                  divstyle.backgroundColor = \"white\";\r\n                  divstyle.border = \"1px solid black\";\r\n                  div.appendChild(img);\r\n                  gridDark.appendChild(div);\r\n                }\r\n              }\r\n              resolveDraw();\r\n              break;\r\n            }\r\n            case \"requests\": {\r\n              function requester() {\r\n                var conteiner = document.getElementById(\"requestJoin\");\r\n                if (requests.length <= 0) {\r\n                  conteiner.style.display = \"none\";\r\n                  return;\r\n                }\r\n                var allowYes = document.getElementById(\"allowYes\");\r\n                var allowNo = document.getElementById(\"allowNo\");\r\n                conteiner.style.display = \"block\";\r\n                if (conteiner.children[1]) conteiner.children[1].remove();\r\n                var newname = document.createElement(\"p\");\r\n                newname.style = \"color: #00ffff; font-size: 16px\";\r\n                newname.innerText = players[requests[0].requester].username;\r\n                conteiner.appendChild(newname);\r\n                var yes, no;\r\n                yes = () => {\r\n                  send(\"allowYes\", requests[0]);\r\n                  requests.shift();\r\n                  allowNo.removeEventListener(\"click\", no);\r\n                  requester();\r\n                };\r\n                no = () => {\r\n                  send(\"allowNo\", requests[0]);\r\n                  requests.shift();\r\n                  allowYes.removeEventListener(\"click\", yes);\r\n                  requester();\r\n                };\r\n                allowYes.addEventListener(\"click\", yes, { once: true });\r\n                allowNo.addEventListener(\"click\", no, { once: true });\r\n              }\r\n              requests = data;\r\n              requester();\r\n              break;\r\n            }\r\n            case \"RETURNtankmeta\": {\r\n              tankmeta = data;\r\n              resolveDraw2();\r\n              break;\r\n            }\r\n            case \"NewMessages\": {\r\n              playerMessages = data;\r\n              break;\r\n            }\r\n            case \"playerMessage\": {\r\n              playerMessages.push({\r\n                text: data.text,\r\n                exspiretime: data.exspiretime,\r\n                id: data.id,\r\n                hidetime: data.hidetime,\r\n              });\r\n              let index_ = playerMessages.indexOf({\r\n                text: data.text,\r\n                exspiretime: data.exspiretime,\r\n                id: data.id,\r\n                hidetime: data.hidetime,\r\n              });\r\n              setTimeout(() => {\r\n                playerMessages = playerMessages.splice(0, index_);\r\n              }, data.exspiretime);\r\n              break;\r\n            }\r\n            case \"Levels\": {\r\n              levels = data;\r\n              resolveDraw3();\r\n              break;\r\n            }\r\n            case \"handshake\": {\r\n              HANDSHAKE = data;\r\n              break;\r\n            }\r\n            case \"updaterHeal\": {\r\n              if (!players[data.id]) return;\r\n              players[data.id].playerHealTime = data.HEALTime;\r\n              break;\r\n            }\r\n            case \"playerHeal\": {\r\n              players[data.id].health = data.HEALTH;\r\n              if (data.id === playerId) {\r\n                playerHealth = data.HEALTH;\r\n              }\r\n              break;\r\n            }\r\n            case \"statsTreeRestart\": {\r\n              players[data.id].statsTree = data.stats;\r\n              break;\r\n            }\r\n            case \"autoCannonUPDATE-ADD\": {\r\n              autocannons = data;\r\n              break;\r\n            }\r\n            case \"badgeToplayer\": {\r\n              badge = data.badge;\r\n              img.src = `https://deip-io3.glitch.me${badge}?nocache=${Date.now()}`;\r\n              break;\r\n            }\r\n            case \"announcements\": {\r\n              announcements = data;\r\n              break;\r\n            }\r\n            case \"boardUpdate\": {\r\n              leader_board = data.leader_board;\r\n              break;\r\n            }\r\n            case \"autoCannonUPDATE-ANGLE\": {\r\n              autocannons.forEach((cannon_ooo) => {\r\n                if (cannon_ooo.CannonID === data.cannon_ID) {\r\n                  cannon_ooo.angle = data.angle;\r\n                }\r\n              });\r\n              break;\r\n            }\r\n            case \"playerMoved\": {\r\n              players[data.id].x = data.x;\r\n              players[data.id].y = data.y;\r\n              break;\r\n            }\r\n            case \"playerCannonUpdated\": {\r\n              try {\r\n                if (data.receiver) {\r\n                  if (data.receiver === playerId) {\r\n                    players[data.id].cannon_angle = data.cannon_angle;\r\n                  }\r\n                } else {\r\n                  players[data.id].cannon_angle = data.cannon_angle;\r\n                }\r\n              } catch {}\r\n              break;\r\n            }\r\n            case \"playerLeft\": {\r\n              players = Object.entries(players).reduce(\r\n                (newPlayers, [key, value]) => {\r\n                  if (key !== data[\"playerID\"]) {\r\n                    newPlayers[key] = value;\r\n                  }\r\n                  return newPlayers;\r\n                },\r\n                {}\r\n              );\r\n              break;\r\n            }\r\n            case \"playerDied\": {\r\n              if (data[\"playerID\"] === playerId) {\r\n                setTimeout(() => {\r\n                  document.getElementById(\"die\").style.display = \"block\";\r\n                  document.getElementById(\"container\").style.display = \"none\";\r\n                  document.getElementById(\"tanktiles\").style.display = \"none\";\r\n                  if (isCrazyGames) window.CrazyGames.SDK.game.gameplayStop();\r\n                }, 10);\r\n\r\n                dead = true;\r\n\r\n                clearInterval(healer);\r\n                autoIntevals;\r\n                autoIntevals.forEach((timeout) => {\r\n                  clearTimeout(timeout);\r\n                });\r\n                autoIntevals = [];\r\n\r\n                fireOnce = () => {};\r\n                FireIntervale = () => {};\r\n\r\n                canvas = document.getElementById(\"myCanvas\");\r\n                canvas.style[\"z-index\"] = \"5\";\r\n                let respawn = document.createElement(\"button\");\r\n\r\n                send = (type, data) => {};\r\n\r\n                respawn.innerHTML = \"Respawn\";\r\n                respawn.style.position = \"absolute\";\r\n                respawn.style.top = \"calc(50vh - 50px)\";\r\n                respawn.style.left = \"calc(50vw - 100px)\";\r\n                respawn.style.width = \"200px\";\r\n                respawn.style.height = \"100px\";\r\n                respawn.style[\"z-index\"] = \"12\";\r\n                document.getElementsByTagName(\"body\")[0].style.cursor = \"auto\";\r\n                document.getElementById(\"game\").appendChild(respawn);\r\n                const reload = () => {\r\n                  if (isCrazyGames) {\r\n                    const callbacks = {\r\n                      adFinished: () => {\r\n                        socket.close();\r\n                        ongame();\r\n                      },\r\n                      adError: (error) => {\r\n                        socket.close();\r\n                        ongame();\r\n                      },\r\n                      adStarted: () => {},\r\n                    };\r\n                    window.CrazyGames.SDK.ad.requestAd(\"midgame\", callbacks);\r\n                  } else {\r\n                    socket.close();\r\n                    ongame();\r\n                  }\r\n                };\r\n                respawn.addEventListener(\"click\", reload);\r\n              } else if (data[\"rewarder\"] === playerId && data.reward) {\r\n                score += data.reward;\r\n              }\r\n\r\n              players = Object.entries(players).reduce(\r\n                (newPlayers, [key, value]) => {\r\n                  if (key !== data[\"playerID\"]) {\r\n                    newPlayers[key] = value;\r\n                  }\r\n                  return newPlayers;\r\n                },\r\n                {}\r\n              );\r\n              break;\r\n            }\r\n            case \"bossUpdate\": {\r\n              bosses = data;\r\n              break;\r\n            }\r\n            case \"playerDamaged\": {\r\n              players[data.player1.id].health = data.player1.health;\r\n              if (data.player2.id === playerId) {\r\n                playerHealth = data.player2.health;\r\n                playerHealTime = 0;\r\n                state = \"damaged\";\r\n                statecycle = 0;\r\n                send(\"statechange\", {\r\n                  state: state,\r\n                  statecycle: statecycle,\r\n                });\r\n                setTimeout(() => {\r\n                  state = \"normal\";\r\n                  statecycle = 0;\r\n                  send(\"statechange\", {\r\n                    state: state,\r\n                    statecycle: statecycle,\r\n                  });\r\n                }, 1000);\r\n              }\r\n              if (data.player1.id === playerId) {\r\n                playerHealth = data.player1.health;\r\n                playerHealTime = 0;\r\n                state = \"damaged\";\r\n                statecycle = 0;\r\n                send(\"statechange\", {\r\n                  state: state,\r\n                  statecycle: statecycle,\r\n                });\r\n                setTimeout(() => {\r\n                  state = \"normal\";\r\n                  statecycle = 0;\r\n                  send(\"statechange\", {\r\n                    state: state,\r\n                    statecycle: statecycle,\r\n                  });\r\n                }, 1000);\r\n              }\r\n              players[data.player2.id].health = data.player2.health;\r\n              break;\r\n            }\r\n            case \"bulletUpdate\": {\r\n              bullets = data;\r\n              break;\r\n            }\r\n            case \"roadUpdate\": {\r\n              roads = data;\r\n              break;\r\n            }\r\n            case \"playerJoined\": {\r\n              console.log(data);\r\n              players[data.id] = data; // Update the local player list\r\n              if (playerId !== data.id) {\r\n                send(\"updatePlayer\", {\r\n                  id: playerId,\r\n                  x: playerX,\r\n                  y: playerY,\r\n                  health: playerHealth,\r\n                  speed: playerSpeed,\r\n                  size: playerSize,\r\n                  bodyDamage: bodyDamage,\r\n                  cannonW: cannonWidth,\r\n                  cannonH: 0,\r\n                  __type__: __type__,\r\n                  cannon_angle: getCannonAngle(),\r\n                  score: score,\r\n                  username: username,\r\n                  level: level,\r\n                  state: state,\r\n                  statecycle: statecycle,\r\n                  playerHealTime: playerHealTime,\r\n                  maxhealth: maxhealth,\r\n                  playerReheal: playerReheal,\r\n                  FOV: scaleFactor,\r\n                  canvasW: canvas.width,\r\n                  canvasH: canvas.height,\r\n                  MouseX: MouseX_,\r\n                  Regenspeed: Regenspeed,\r\n                  MouseY: MouseY_,\r\n                  screenWidth: canvas.width,\r\n                  screenHeight: canvas.height,\r\n                  autoFiring: autoFiring,\r\n                  skin: skin,\r\n                  statsTree: {\r\n                    Health: 1,\r\n                    \"Body Damage\": 1,\r\n                    Regen: 1,\r\n                    \"Bullet Pentration\": 1,\r\n                    \"Bullet Speed\": 1,\r\n                    \"Bullet Damage\": 1,\r\n                    \"Bullet Reload\": 1,\r\n                    Speed: 1,\r\n                  },\r\n                  team: teamOn,\r\n                  userId: userId,\r\n                });\r\n              }\r\n              setTimeout(() => {\r\n                send(\"healrate\", {\r\n                  playerReheal: playerReheal,\r\n                });\r\n              }, 3000);\r\n              break;\r\n            }\r\n            case \"playerScore\": {\r\n              players[data[\"bulletId\"]].score += data[\"socrepluse\"];\r\n              if (data[\"bulletId\"] === playerId) {\r\n                score = players[data[\"bulletId\"]].score;\r\n              }\r\n              levelHANDLER();\r\n              if (data.kill && isCrazyGames) {\r\n                window.CrazyGames.SDK.game.happytime();\r\n              }\r\n              break;\r\n            }\r\n            case \"dronekilled\": {\r\n              if (data.droneID === playerId) {\r\n                drones -= 1;\r\n              }\r\n              break;\r\n            }\r\n            case \"colorUpgrades\": {\r\n              colorUpgrades = data;\r\n              break;\r\n            }\r\n            case \"teamColorUpgrades\": {\r\n              teamColorUpgrades = data;\r\n              break;\r\n            }\r\n            case \"UpdateStatTree\": {\r\n              if (data.StatUpgradetype === \"Health\") {\r\n                players[data.id].health =\r\n                  (players[data.id].health / 2) * data.levelmultiplyer;\r\n                players[data.id].maxhealth =\r\n                  players[data.id].maxhealth * data.levelmultiplyer;\r\n                if (data.id === playerId) {\r\n                  playerHealth =\r\n                    (players[data.id].health / 2) * data.levelmultiplyer;\r\n                  maxhealth = players[data.id].maxhealth * data.levelmultiplyer;\r\n                }\r\n              }\r\n              if (data.StatUpgradetype === \"Body Damage\") {\r\n                players[data.id].bodyDamage *= data.levelmultiplyer;\r\n                if (data.id === playerId) {\r\n                  bodyDamage *= data.levelmultiplyer;\r\n                }\r\n              } else if (data.StatUpgradetype === \"Speed\") {\r\n                players[data.id].speed *= data.levelmultiplyer;\r\n              } else if (data.StatUpgradetype === \"Bullet Reload\") {\r\n                if (data.id === playerId) {\r\n                  __reload__ /= data.levelmultiplyer;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case \"healerRestart\": {\r\n              players[data.id].Regenspeed = data.Regenspeed;\r\n              if (data.id === playerId) {\r\n                Regenspeed = data.Regenspeed;\r\n              }\r\n              break;\r\n            }\r\n            case \"pubteamlist\": {\r\n              pubteams = data;\r\n              var teamcontainer = document.getElementById(\"teamcontainer\");\r\n              teamcontainer.innerHTML = \"\";\r\n              buildTeamList();\r\n              break;\r\n            }\r\n            case \"privateteamlist\": {\r\n              privateteamlist = data;\r\n              var teamcontainer = document.getElementById(\"teamcontainer\");\r\n              teamcontainer.innerHTML = \"\";\r\n              buildTeamList();\r\n              break;\r\n            }\r\n            case \"JoinTeamSuccess\": {\r\n              if (data.id === playerId) {\r\n                joinedTeam = true;\r\n                socialContainer.style.display = \"block\";\r\n              }\r\n              if (isCrazyGames) {\r\n                const link = window.CrazyGames.SDK.game.inviteLink({\r\n                  teamId: data.teamId,\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case \"playerJoinedTeam\": {\r\n              players[data.id].team = data.teamId;\r\n              if (data.id === playerId && data.teamId !== null) {\r\n                joinedTeam = true;\r\n                socialContainer.style.display = \"block\";\r\n                if (isCrazyGames) {\r\n                  const link = window.CrazyGames.SDK.game.inviteLink({\r\n                    teamId: data.teamId,\r\n                  });\r\n                }\r\n                teamOn = data.teamId;\r\n              }\r\n              if (data.id === playerId && data.teamId === null) {\r\n                joinedTeam = false;\r\n                socialContainer.style.display = \"none\";\r\n                if (isCrazyGames) window.CrazyGames.SDK.game.hideInviteButton();\r\n                owner_of_team = false;\r\n                teamOn = null;\r\n              }\r\n              break;\r\n            }\r\n            case \"newOwner\": {\r\n              if (data.teamID === teamOn) {\r\n                owner_of_team = true;\r\n              }\r\n              break;\r\n            }\r\n            case \"bulletDamage\": {\r\n              if (players[data.playerID]) {\r\n                bullets = data.BULLETS; // Check if the player exists\r\n                players[data.playerID].health = data.playerHealth;\r\n\r\n                if (data.playerID == playerId) {\r\n                  playerHealth = data.playerHealth;\r\n                  send(\"playerHealintterupted\", {});\r\n                  playerHealTime = 0;\r\n                  state = \"damaged\";\r\n                  send(\"statechange\", {\r\n                    state: state,\r\n                    statecycle: statecycle,\r\n                  });\r\n                  setTimeout(() => {\r\n                    state = \"normal\";\r\n                    send(\"statechange\", {\r\n                      state: state,\r\n                      statecycle: statecycle,\r\n                    });\r\n                  }, 1000);\r\n                }\r\n              } else {\r\n                console.warn(\r\n                  \"Received bulletDamage for an unknown player:\",\r\n                  data.playerID\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            case \"bulletHeal\": {\r\n              if (players[data.playerID]) {\r\n                players[data.playerID].health = data.playerHealth;\r\n                if (data.playerID === playerId) {\r\n                  playerHealth = data.playerHealth;\r\n                }\r\n              } else {\r\n                console.warn(\r\n                  \"Received bulletDamage for an unknown player:\",\r\n                  data.playerID\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            case \"shapeDamage\": {\r\n              if (players[data.PlayerId]) {\r\n                players[data.PlayerId].health -= data.playerDamage;\r\n\r\n                if (data.PlayerId == playerId) {\r\n                  state = \"damaged\";\r\n                  //statecycle = 0;\r\n                  send(\"statechange\", {\r\n                    state: state,\r\n                    statecycle: statecycle,\r\n                  });\r\n                  setTimeout(() => {\r\n                    state = \"normal\";\r\n                    //statecycle = 0;\r\n                    send(\"statechange\", {\r\n                      state: state,\r\n                      statecycle: statecycle,\r\n                    });\r\n                  }, 1000);\r\n                  playerHealth -= data.playerDamage;\r\n                  playerHealTime = 0;\r\n                  send(\"playerHealintterupted\", {});\r\n                }\r\n              } else {\r\n                console.warn(\r\n                  \"Received shapeDamage for an unknown player:\",\r\n                  data.PlayerId\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            case \"bouceBack\": {\r\n              if (data.playerID !== playerId) return;\r\n              canmove = false;\r\n              movementTimeouts.forEach((timeout) => {\r\n                if (!timeout.bouceBack) {\r\n                  clearTimeout(timeout.timeout);\r\n                }\r\n              });\r\n              movementTimeouts = [];\r\n              let playerSpeed2 = playerSpeed * 2;\r\n              for (let i = 0; i < playerSpeed / 2; i++) {\r\n                let timeout = setTimeout(() => {\r\n                  movePlayer(\r\n                    -((data.response.x * 1.1) / playerSpeed2),\r\n                    -((data.response.y * 1.1) / playerSpeed2)\r\n                  );\r\n                  if (i < playerSpeed / 2) canmove = true;\r\n                }, 85 * i);\r\n                movementTimeouts.push({ timeout: timeout, bouceBack: true });\r\n              }\r\n              break;\r\n            }\r\n            case \"type_Change\": {\r\n              players[data.id] = data;\r\n              break;\r\n            }\r\n            case \"postBiteMessage\": {\r\n              console.log(data);\r\n              data.forEach((message) => {\r\n                var socialContainer =\r\n                  document.getElementById(\"socialContainer\");\r\n\r\n                socialContainer.innerHTML = `\r\n                  <div class=\"con-435874358\">\r\n                    <div class=\"social-con\">\r\n                      <div class=\"socialLevelDiv\" id=\"social\">\r\n                        <div class=\"socialContainer\">\r\n                          <div class=\"flexbuild\">\r\n                            <textarea\r\n                              cols=\"30\"\r\n                              class=\"textsocial\"\r\n                              id=\"posttext\"\r\n                              maxlength=\"256\"\r\n                            ></textarea>\r\n                            <button class=\"post-button\" id=\"postBite\">Post a bite</button>\r\n                          </div>\r\n                          <a style=\"font-size: 10px\" href=\"/posting-policy.html\"\r\n                            >By posting your are agreeing to Tankshark's Posting Policy\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                `;\r\n                var socialBox = document.getElementById(\"social\");\r\n                var contentdiv = document.createElement(\"div\");\r\n                var pContent = document.createElement(\"p\");\r\n                contentdiv.classList.add(\"message\");\r\n                pContent.innerText = `${message.username}: ${message.message}`;\r\n                contentdiv.appendChild(pContent);\r\n                pContent.style.display = \"block\";\r\n                for (let i = 0; i < 2; i++) {\r\n                  var imgDiv = document.createElement(\"div\");\r\n                  var imglike = document.createElement(\"img\");\r\n                  imglike.src = imgsrcs[i];\r\n                  contentdiv.appendChild(imgDiv);\r\n                  imglike.classList.add(\"like-dislike-img\");\r\n                  imgDiv.classList.add(\"like-dislike-div\");\r\n                  imglike.addEventListener(\"click\", () => {\r\n                    send(\"likeDislike\", {\r\n                      id: message.id,\r\n                      type: i,\r\n                    });\r\n                  });\r\n                  imgDiv.appendChild(imglike);\r\n                  imgDiv.style.display = \"inline-block\";\r\n                  var gentratedNames = () => {\r\n                    var namestring = \"\";\r\n                    if (i === 0) {\r\n                      message.dislikers.forEach((name) => {\r\n                        namestring += name + \"\\n\";\r\n                      });\r\n                    }\r\n                    if (i === 1) {\r\n                      message.likers.forEach((name) => {\r\n                        namestring += name + \"\\n\";\r\n                      });\r\n                    }\r\n                    return namestring;\r\n                  };\r\n                }\r\n                contentdiv.innerHTML += `<style>.like-dislike-div:hover::after {content: \"${gentratedNames()}\" !important}</style>`;\r\n                socialBox.insertBefore(contentdiv, socialBox.children[0]);\r\n              });\r\n              break;\r\n            }\r\n            case \"statechangeUpdate\": {\r\n              if (!players[data.playerID]) return;\r\n              players[data.playerID].state = data.state;\r\n              if (data.playerID === playerId) {\r\n                state = data.state;\r\n              }\r\n              break;\r\n            }\r\n            case \"statecycleUpdate\": {\r\n              if (!players[data.playerID]) return;\r\n              players[data.playerID].statecycle = data.statecycle;\r\n              if (data.playerID === playerId) {\r\n                statecycle = data.statecycle;\r\n              }\r\n              break;\r\n            }\r\n            case \"playerCannonWidthUpdate\": {\r\n              players[data.id].cannonW = data.cannonW;\r\n              break;\r\n            }\r\n            case \"playerCannonUpdatedInactive\": {\r\n              MouseX_ = data.MouseX_;\r\n              MouseY_ = data.MouseY_;\r\n              autoAngle = data.autoAngle;\r\n              break;\r\n            }\r\n            case \"newid\": {\r\n              userId = data.newid;\r\n              setCookie(\"userId\", userId, 365);\r\n              break;\r\n            }\r\n            case \"playerSpeedBoost\": {\r\n              if (data.id === playerId) speedBoost = data.speedMultiplyer;\r\n              break;\r\n            }\r\n            default: {\r\n              console.log(\"Empty action received.\", type);\r\n              break;\r\n            }\r\n          }\r\n        };\r\n\r\n        var miniMapButton = document.getElementById(\"miniMap\");\r\n\r\n        var buyMiniMap = () => {\r\n          send(\"requestUpgrade\", {\r\n            upgradeType: \"miniMap\",\r\n            teamId: teamOn,\r\n          });\r\n        };\r\n\r\n        miniMapButton.addEventListener(\"click\", buyMiniMap);\r\n\r\n        const windowSateChange = () => {\r\n          send(\"windowStateChange\", {\r\n            vis: document.visibilityState,\r\n            id: playerId,\r\n          });\r\n        };\r\n        document.addEventListener(\"visibilitychange\", windowSateChange);\r\n\r\n        const movePlayer = (dx, dy, last, i) => {\r\n          dx *= speedBoost;\r\n          dy *= speedBoost;\r\n          movementTimeouts.shift();\r\n          if (!canmove) return;\r\n          cavansX += dx;\r\n          playerY += dy;\r\n          cavansY += dy;\r\n          playerX += dx;\r\n\r\n          if (i in nolist) return; // just roll with it\r\n          send(\"playerMoved\", {\r\n            x: playerX,\r\n            y: playerY,\r\n            dx: dx,\r\n            dy: dy,\r\n            last: last,\r\n          });\r\n        };\r\n\r\n        const healer = setInterval(() => {\r\n          playerHealTime += 1;\r\n          send(\"AddplayerHealTime\", {\r\n            playerHealTime: playerHealTime,\r\n            maxhealth: maxhealth,\r\n          });\r\n        }, 1000);\r\n\r\n        function setCookie(cname, cvalue, exdays) {\r\n          const d = new Date();\r\n          d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\r\n          let expires = \"expires=\" + d.toUTCString();\r\n          document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n        }\r\n\r\n        const typing = (event) => {\r\n          keysPressed[event.key] = true;\r\n          if (messaging) {\r\n            if (\r\n              !keysPressed[\"Backspace\"] &&\r\n              !keysPressed[\"Delete\"] &&\r\n              !keysPressed[\"Enter\"] &&\r\n              typedtext.length < 35\r\n            ) {\r\n              typedtext += event.key;\r\n            } else {\r\n              typedtext = typedtext.slice(0, -1);\r\n            }\r\n          }\r\n          if (keysPressed[\"Enter\"]) {\r\n            if (messaging && typedtext !== \"\") {\r\n              send(\"playerSend\", { text: typedtext });\r\n              typedtext = \"\";\r\n            }\r\n            if (!messaging) {\r\n              function blink() {\r\n                blinking = !blinking;\r\n                if (messaging) {\r\n                  setTimeout(() => {\r\n                    blink();\r\n                  }, 530);\r\n                }\r\n              }\r\n              setTimeout(() => {\r\n                blink();\r\n              }, 530);\r\n            }\r\n            messaging = !messaging;\r\n          }\r\n        };\r\n\r\n        if (window.outerHeight > window.outerWidth) {\r\n          var mouseUpPress = false;\r\n          document.getElementById(\"keyscontainer\").style.display = \"block\";\r\n          document.getElementById(\"up\").addEventListener(\"touchstart\", () => {\r\n            mouseUpPress = true;\r\n            if (!messaging) {\r\n              keysPressed[\"ArrowUp\"] = true;\r\n            }\r\n          });\r\n          document.getElementById(\"up\").addEventListener(\"touchend\", () => {\r\n            mouseUpPress = false;\r\n            delete keysPressed[\"ArrowUp\"];\r\n          });\r\n\r\n          var mouseDownPress = false;\r\n          document.getElementById(\"down\").addEventListener(\"touchstart\", () => {\r\n            mouseDownPress = true;\r\n            if (!messaging) {\r\n              keysPressed[\"ArrowDown\"] = true;\r\n            }\r\n          });\r\n          document.getElementById(\"down\").addEventListener(\"touchend\", () => {\r\n            mouseDownPress = false;\r\n            delete keysPressed[\"ArrowDown\"];\r\n          });\r\n\r\n          var mouseLeftPress = false;\r\n          document.getElementById(\"left\").addEventListener(\"touchstart\", () => {\r\n            mouseLeftPress = true;\r\n            if (!messaging) {\r\n              keysPressed[\"ArrowLeft\"] = true;\r\n            }\r\n          });\r\n          document.getElementById(\"left\").addEventListener(\"touchend\", () => {\r\n            mouseDownPress = false;\r\n            delete keysPressed[\"ArrowLeft\"];\r\n          });\r\n\r\n          var mouseRightPress = false;\r\n          document\r\n            .getElementById(\"right\")\r\n            .addEventListener(\"touchstart\", () => {\r\n              mouseRightPress = true;\r\n              if (!messaging) {\r\n                keysPressed[\"ArrowRight\"] = true;\r\n              }\r\n            });\r\n          document.getElementById(\"right\").addEventListener(\"touchend\", () => {\r\n            mouseRightPress = false;\r\n            delete keysPressed[\"ArrowRight\"];\r\n          });\r\n        }\r\n\r\n        document.addEventListener(\"keydown\", typing);\r\n\r\n        document.addEventListener(\"keyup\", (event) => {\r\n          delete keysPressed[event.key];\r\n        });\r\n\r\n        const mousemove = (evt) => {\r\n          var mousepos = getMousePos(window, evt);\r\n          if (!autoRotating && !lockautoRotating) {\r\n            MouseX_ = mousepos.x;\r\n            MouseY_ = mousepos.y;\r\n            let __angle__ = getCannonAngle();\r\n            send(\"playerCannonMoved\", {\r\n              cannon_angle: __angle__,\r\n              MouseX: MouseX_,\r\n              MouseY: MouseY_,\r\n            });\r\n          }\r\n          MouseX = mousepos.x;\r\n          MouseY = mousepos.y;\r\n        };\r\n        document.addEventListener(\"mousemove\", mousemove);\r\n\r\n        function generateRandomNumber(min, max) {\r\n          return Math.random() * (max - min) + min;\r\n        }\r\n\r\n        const createTeam = () => {\r\n          var teamname = document.getElementById(\"teamname\").value;\r\n          var checked, checked2, checked3;\r\n\r\n          var checked = document.getElementById(\"hidden\").checked;\r\n          var checked2 = document.getElementById(\"private\").checked;\r\n          var checked3 = document.getElementById(\"teamScore\").checked;\r\n          var description = document.getElementById(\"teamDescription\").value;\r\n\r\n          var govType = document.querySelector(\r\n            'input[name=\"teamType\"]:checked'\r\n          ).value;\r\n\r\n          var ScheduledBasedTax =\r\n            document.getElementById(\"ScheduledBased\").value;\r\n\r\n          var ScheduledBasedTaxInterval =\r\n            document.getElementById(\"time-select\").value;\r\n\r\n          var description = document.getElementById(\"Simple\").value;\r\n          document.getElementById(\"teambox\").style.display = \"none\";\r\n\r\n          joinLeave.innerText = \"Leave\";\r\n\r\n          createDelete.innerText = \"Delete\";\r\n          send(\"newTeamCreated\", {\r\n            private: checked2,\r\n            hidden: checked,\r\n            name: teamname,\r\n            description: description,\r\n            govType: govType,\r\n            createTeamScore: checked3,\r\n            simpleTax: document.getElementById(\"Simple\").value,\r\n            playerTax: document.getElementById(\"scoreBased\").value,\r\n            ScheduledBasedTax,\r\n            ScheduledBasedTaxInterval,\r\n          });\r\n          owner_of_team = true;\r\n        };\r\n        document\r\n          .getElementById(\"teamButton\")\r\n          .addEventListener(\"click\", createTeam);\r\n\r\n        function bounceBackAndRecoil(i, Bsize, Bspeed, anlge_) {\r\n          cannonWidth[i] = cannonWidth[i] || 0;\r\n          for (let t = 0; t < 10; t++) {\r\n            setTimeout(() => {\r\n              cannonWidth[i] -= 1;\r\n              send(\"playerCannonWidth\", {\r\n                cannonW: cannonWidth,\r\n              });\r\n            }, 10 * t);\r\n            setTimeout(() => {\r\n              cannonWidth[i] += 1;\r\n              send(\"playerCannonWidth\", {\r\n                cannonW: cannonWidth,\r\n              });\r\n            }, 20 * t); // Updated to prevent overlap\r\n          }\r\n\r\n          let recoilX = -((Bsize / 10) * Bspeed * Math.cos(anlge_));\r\n          let recoilY = -((Bsize / 10) * Bspeed * Math.sin(anlge_));\r\n          for (let i = 0; i < playerSpeed; i++) {\r\n            setTimeout(() => {\r\n              movePlayer(recoilX / 15, recoilY / 15, i == playerSpeed - 1);\r\n            }, 15 * i);\r\n          }\r\n        }\r\n\r\n        function fireOnce(evt, directer) {\r\n          let tankdata = tankmeta[__type__];\r\n          let tankdatacannon = tankdata.cannons;\r\n          if (!autoFiring && !directer) {\r\n            if (evt.button === 2) return;\r\n          }\r\n\r\n          var angle = getCannonAngle();\r\n\r\n          tankdatacannon.forEach((cannon, i) => {\r\n            if (!cannonFireData[i]) return;\r\n            cannonFireData[i] = false;\r\n            setTimeout(() => {\r\n              if (\r\n                cannon.type === \"autoCannon\" ||\r\n                cannon.type === \"SwivelAutoCannon\"\r\n              )\r\n                return;\r\n              if (!directer && cannon.type === \"directer\") return;\r\n\r\n              let bullet_size_l = bullet_size * cannon[\"bulletSize\"];\r\n\r\n              let randomNumber = generateRandomNumber(-0.2, 0.2);\r\n\r\n              if (\r\n                cannon[\"type\"] === \"basicCannon\" ||\r\n                cannon[\"type\"] === \"trap\"\r\n              ) {\r\n                var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\r\n                var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-height\"];\r\n                var angle_ = angle + cannon[\"offset-angle\"];\r\n              } else if (cannon[\"type\"] === \"trapezoid\") {\r\n                var angle_ = angle + cannon[\"offset-angle\"] + randomNumber;\r\n                var xxx = cannon[\"cannon-width-top\"];\r\n                var yyy =\r\n                  cannon[\"cannon-height\"] -\r\n                  bullet_size_l * 2 -\r\n                  (cannon[\"cannon-width-top\"] / 2) * Math.random();\r\n              } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\r\n                var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\r\n                var yyy = cannon[\"cannon-height\"] - bullet_size_l / 2;\r\n                var angle_ = angle + cannon[\"offset-angle\"];\r\n              } else if (cannon[\"type\"] === \"rocketer\") {\r\n                var xxx = cannon[\"cannon-width-bottom\"] + bullet_size_l / 2;\r\n                var yyy =\r\n                  cannon[\"cannon-height\"] - cannon[\"cannon-width-bottom\"];\r\n                var angle_ = angle + cannon[\"offset-angle\"];\r\n              } else {\r\n                var xxx = cannon[\"cannon-height\"] + bullet_size_l / 2;\r\n                var yyy = 0;\r\n                var angle_ = angle + cannon[\"offset-angle\"];\r\n              }\r\n\r\n              let rotated_offset_x =\r\n                (cannon[\"offSet-x\"] + xxx) * Math.cos(angle_) -\r\n                (cannon[\"offSet-y\"] + yyy) * Math.sin(angle_);\r\n              let rotated_offset_y =\r\n                (cannon[\"offSet-x\"] + xxx) * Math.sin(angle_) +\r\n                (cannon[\"offSet-y\"] + yyy) * Math.cos(angle_);\r\n              let bullet_start_x = playerX + rotated_offset_x;\r\n              let bullet_start_y = playerY + rotated_offset_y;\r\n              let identdfire = Date.now() + Math.random();\r\n              let bullet_speed__ = bullet_speed * cannon[\"bulletSpeed\"];\r\n\r\n              bounceBackAndRecoil(i, bullet_size_l, bullet_speed__, angle_);\r\n\r\n              let vertices = 0;\r\n              if (\r\n                cannon[\"type\"] === \"basicCannon\" ||\r\n                cannon[\"type\"] === \"trapezoid\"\r\n              ) {\r\n                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 6);\r\n                var type = \"basic\";\r\n                var health = 8;\r\n              } else if (cannon[\"type\"] === \"trap\") {\r\n                var bulletdistance = bullet_speed__ * 70 * (bullet_size / 20);\r\n                var type = \"trap\";\r\n                var health = 10;\r\n                const rawvertices = calculateTriangleVertices(\r\n                  bullet_start_x,\r\n                  bullet_start_y,\r\n                  bullet_size_l,\r\n                  0\r\n                );\r\n                vertices = rawvertices;\r\n              } else if (cannon[\"type\"] === \"directer\") {\r\n                var bulletdistance = 100;\r\n                var type = \"directer\";\r\n                var health = 10;\r\n                const rawvertices = calculateTriangleVertices(\r\n                  bullet_start_x,\r\n                  bullet_start_y,\r\n                  bullet_size_l,\r\n                  0\r\n                );\r\n                vertices = rawvertices;\r\n              } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\r\n                var bulletdistance = bullet_speed__ * 105 * (bullet_size / 6);\r\n                var type = \"AutoBullet\";\r\n                var health = 8;\r\n              } else if (cannon[\"type\"] === \"rocketer\") {\r\n                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\r\n                var type = \"rocketer\";\r\n                var health = 9;\r\n              } else if (cannon[\"type\"] === \"paver\") {\r\n                var bulletdistance = bullet_speed__ * 100 * (bullet_size / 5);\r\n                var type = \"roadMap\";\r\n                var health = 6;\r\n              }\r\n\r\n              let cannon_life = cannon[\"life-time\"] || 0;\r\n\r\n              let bullet = {\r\n                type: type,\r\n                bullet_distance: bulletdistance,\r\n                speed: bullet_speed__,\r\n                size: bullet_size_l,\r\n                angle: angle_,\r\n                bullet_damage: bullet_damage * cannon[\"bulletSize\"],\r\n                distanceTraveled: 0,\r\n                vertices: vertices,\r\n                bullet_pentration:\r\n                  bullet_pentration * cannon[\"bullet_pentration\"],\r\n                x: bullet_start_x,\r\n                y: bullet_start_y,\r\n                lifespan: cannon_life,\r\n                parentindex: i,\r\n                health: health,\r\n                xstart: playerX,\r\n                ystart: playerY,\r\n                uniqueid: identdfire,\r\n                cannonIndex: i,\r\n              };\r\n\r\n              send(\"bulletFired\", bullet);\r\n            }, cannon.delay * 1000);\r\n            if (\r\n              !(cannonFireData[i] || tankmeta.dronetanks.includes(__type__))\r\n            ) {\r\n              setTimeout(() => {\r\n                cannonFireData[i] = true;\r\n              }, baseFireInterval * tankdata[\"reaload-m\"] * cannon[\"reloadM\"] * __reload__);\r\n            }\r\n          });\r\n        }\r\n\r\n        function FireIntervale(evt) {\r\n          let tankdata = tankmeta[__type__];\r\n          let tankdatacannon = tankdata[\"cannons\"];\r\n          if (autoFiring) return;\r\n          if (!autoFiring && evt) {\r\n            if (evt.button === 2) return;\r\n          }\r\n          tankdatacannon.forEach((cannon, i) => {\r\n            firingInterval = setInterval(\r\n              (event = evt, MouseY__ = MouseY_, MouseX__ = MouseX_) => {\r\n                canFire2 = false;\r\n                let angle = getCannonAngle();\r\n                if (autoFiring) return;\r\n\r\n                let tankdatacannondata = tankdatacannon[i];\r\n                setTimeout(() => {\r\n                  if (\r\n                    cannon.type === \"autoCannon\" ||\r\n                    cannon.type === \"SwivelAutoCannon\"\r\n                  )\r\n                    return;\r\n                  let bullet_size_l = bullet_size * cannon[\"bulletSize\"];\r\n\r\n                  let randomNumber = generateRandomNumber(-0.2, 0.2);\r\n\r\n                  if (\r\n                    cannon[\"type\"] === \"basicCannon\" ||\r\n                    cannon[\"type\"] === \"trap\"\r\n                  ) {\r\n                    var xxx = cannon[\"cannon-width\"] - bullet_size_l / 2;\r\n                    var yyy = cannon[\"cannon-height\"] - cannon[\"cannon-height\"];\r\n                    var angle_ = angle + cannon[\"offset-angle\"];\r\n                  } else if (cannon[\"type\"] === \"trapezoid\") {\r\n                    var angle_ = angle + cannon[\"offset-angle\"] + randomNumber;\r\n                    var xxx = cannon[\"cannon-width-top\"] - bullet_size_l * 1.5;\r\n                    var yyy =\r\n                      cannon[\"cannon-height\"] -\r\n                      bullet_size_l * 2 -\r\n                      (cannon[\"cannon-width-top\"] / 2) * Math.random();\r\n                  } else if (cannon[\"type\"] === \"directer\") {\r\n                    var bulletdistance = 100;\r\n                    var type = \"directer\";\r\n                    var health = 10;\r\n                    const rawvertices = calculateTriangleVertices(\r\n                      bullet_start_x,\r\n                      bullet_start_y,\r\n                      bullet_size_l,\r\n                      0\r\n                    );\r\n                    vertices = rawvertices;\r\n                  } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\r\n                    var xxx = cannon[\"cannon-width\"] - bullet_size_l * 1.5;\r\n                    var yyy = cannon[\"cannon-height\"] - bullet_size_l * 2;\r\n                    var angle_ = angle + cannon[\"offset-angle\"];\r\n                  } else if (cannon[\"type\"] === \"rocketer\") {\r\n                    var xxx = cannon[\"cannon-width-bottom\"] + bullet_size_l * 2;\r\n                    var yyy =\r\n                      cannon[\"cannon-height\"] - cannon[\"cannon-width-bottom\"];\r\n                    var angle_ = angle + cannon[\"offset-angle\"];\r\n                  } else {\r\n                    var xxx = cannon[\"cannon-width-top\"] / 2;\r\n                    var yyy = cannon[\"cannon-width-top\"] / 2;\r\n                    var angle_ = angle + cannon[\"offset-angle\"];\r\n                  }\r\n\r\n                  let rotated_offset_x =\r\n                    (cannon[\"offSet-x\"] + xxx) * Math.cos(angle_) -\r\n                    (cannon[\"offSet-y\"] + yyy) * Math.sin(angle_);\r\n                  let rotated_offset_y =\r\n                    (cannon[\"offSet-x\"] + xxx) * Math.sin(angle_) +\r\n                    (cannon[\"offSet-y\"] + yyy) * Math.cos(angle_);\r\n                  let bullet_start_x = playerX + rotated_offset_x;\r\n                  let bullet_start_y = playerY + rotated_offset_y;\r\n                  // lol\r\n                  let identdfire = Date.now() + Math.random();\r\n                  let bullet_speed__ = bullet_speed * cannon[\"bulletSpeed\"];\r\n\r\n                  bounceBackAndRecoil(i, bullet_size_l, bullet_speed__, angle_);\r\n\r\n                  let vertices = 0;\r\n                  if (\r\n                    cannon[\"type\"] === \"basicCannon\" ||\r\n                    cannon[\"type\"] === \"trapezoid\"\r\n                  ) {\r\n                    var bulletdistance =\r\n                      bullet_speed__ * 100 * (bullet_size / 6);\r\n                    var type = \"basic\";\r\n                    var health = 8;\r\n                  } else if (cannon[\"type\"] === \"trap\") {\r\n                    var bulletdistance =\r\n                      bullet_speed__ * 70 * (bullet_size / 20);\r\n                    var type = \"trap\";\r\n                    var health = 10;\r\n                    const rawvertices = calculateTriangleVertices(\r\n                      bullet_start_x,\r\n                      bullet_start_y,\r\n                      bullet_size_l,\r\n                      0\r\n                    );\r\n                    vertices = rawvertices;\r\n                  } else if (cannon[\"type\"] === \"directer\") {\r\n                    var bulletdistance = 100;\r\n                    var type = \"directer\";\r\n                    var health = 10;\r\n                    bullet_speed__ += 10;\r\n                    const rawvertices = calculateTriangleVertices(\r\n                      bullet_start_x,\r\n                      bullet_start_y,\r\n                      bullet_size_l,\r\n                      0\r\n                    );\r\n                    vertices = rawvertices;\r\n                  } else if (cannon[\"type\"] === \"AutoBulletCannon\") {\r\n                    var bulletdistance =\r\n                      bullet_speed__ * 105 * (bullet_size / 6);\r\n                    var type = \"AutoBullet\";\r\n                    var health = 8;\r\n                  } else if (cannon[\"type\"] === \"rocketer\") {\r\n                    var bulletdistance =\r\n                      bullet_speed__ * 100 * (bullet_size / 5);\r\n                    var type = \"rocketer\";\r\n                    var health = 9;\r\n                  } else if (cannon[\"type\"] === \"paver\") {\r\n                    var bulletdistance =\r\n                      bullet_speed__ * 100 * (bullet_size / 5);\r\n                    var type = \"roadMap\";\r\n                    var health = 6;\r\n                  }\r\n\r\n                  let cannon_life = cannon[\"life-time\"] || 0;\r\n\r\n                  let bullet = {\r\n                    type: type,\r\n                    bullet_distance: bulletdistance,\r\n                    speed: bullet_speed__,\r\n                    size: bullet_size_l,\r\n                    angle: angle_,\r\n                    bullet_damage: bullet_damage * cannon[\"bulletSize\"],\r\n                    distanceTraveled: 0,\r\n                    vertices: vertices,\r\n                    bullet_pentration:\r\n                      bullet_pentration * cannon[\"bullet_pentration\"],\r\n                    x: bullet_start_x,\r\n                    y: bullet_start_y,\r\n                    lifespan: cannon_life,\r\n                    health: health,\r\n                    parentindex: i,\r\n                    xstart: playerX,\r\n                    ystart: playerY,\r\n                    uniqueid: identdfire,\r\n                    cannonIndex: i,\r\n                  };\r\n                  send(\"bulletFired\", bullet);\r\n                }, tankdatacannondata[\"delay\"] * 1000);\r\n              },\r\n              baseFireInterval *\r\n                tankdata[\"reaload-m\"] *\r\n                cannon[\"reloadM\"] *\r\n                __reload__\r\n            );\r\n            name = JSON.stringify(firingInterval + i);\r\n            firingIntervals[name] = firingInterval;\r\n          });\r\n        }\r\n\r\n        const fireCannon = (evt) => {\r\n          if (teampanelopen) return;\r\n          fireOnce(evt, false);\r\n        };\r\n        document.addEventListener(\"mousedown\", fireCannon);\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n          scaleby(0);\r\n        });\r\n\r\n        const perventEvent = (evt) => {\r\n          if (!teampanelopen) {\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n        document.addEventListener(\"click\", perventEvent);\r\n\r\n        let __tankdata__ = tankmeta[__type__];\r\n\r\n        function autoengine() {\r\n          __tankdata__ = tankmeta[__type__];\r\n          if (!tankmeta.dronetanks.includes(__type__) && autoFiring) {\r\n            __tankdata__ = tankmeta[__type__];\r\n            if (firingInterval) {\r\n              clearInterval(firingInterval);\r\n              firingInterval = null;\r\n            }\r\n            fireOnce();\r\n          }\r\n          if (tankmeta.dronetanks.includes(__type__)) {\r\n            let i = 0;\r\n            for (var {} in tankmeta[__type__][\"cannons\"]) {\r\n              if (\r\n                drones <= tankmeta[__type__][\"cannons\"][i][\"max-drones\"] &&\r\n                tankmeta[__type__][\"cannons\"][i].type === \"directer\"\r\n              ) {\r\n                fireOnce(null, true);\r\n                cannonFireData[i] = true;\r\n                drones += 1;\r\n              }\r\n              i++;\r\n            }\r\n          }\r\n\r\n          setTimeout(() => {\r\n            autoengine();\r\n          }, baseFireInterval * __tankdata__[\"reaload-m\"] * __reload__);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          autoengine();\r\n        }, baseFireInterval * __tankdata__[\"reaload-m\"] * __reload__);\r\n\r\n        var Xbutton = document.getElementById(\"Xbutton\");\r\n\r\n        const closeTeamPanel = () => {\r\n          teampanelopen = false;\r\n          var teamcontainer = document.getElementById(\"teamcontainer\");\r\n          var teamMain = document.getElementById(\"teamMain\");\r\n          teamcontainer.style.display = \"none\";\r\n          teamMain.style.display = \"none\";\r\n          document.getElementById(\"confermationScreen\").style.display = \"none\";\r\n          document.getElementById(\"teambox\").style.display = \"none\";\r\n          document.getElementsByTagName(\"body\")[0].style.cursor =\r\n            \"url('https://deip-io3.glitch.me/targetpointer1.cur'), auto\";\r\n        };\r\n        Xbutton.addEventListener(\"click\", closeTeamPanel);\r\n\r\n        var joinLeave = document.getElementById(\"join/leave\");\r\n        const joinLeaveClick = () => {\r\n          if (!joinedTeam) {\r\n            if (selected_class !== null) {\r\n              send(\"playerJoinedTeam\", {\r\n                teamId: selected_class,\r\n              });\r\n              joinLeave.innerText = \"Leave\";\r\n              createDelete.style.display = \"none\";\r\n            }\r\n          } else {\r\n            send(\"playerLeftTeam\", {\r\n              teamId: players[playerId].team,\r\n            });\r\n            createDelete.style.display = \"block\";\r\n            createDelete.innerText = \"Create\";\r\n            if (owner_of_team) {\r\n              owner_of_team = false;\r\n              document.getElementById(\"teambox\").style.display = \"none\";\r\n              document\r\n                .getElementsByClassName(\"outer-box\")[0]\r\n                .classList.remove(\"outer-onwer-box\");\r\n              document\r\n                .getElementsByClassName(\"inner-box\")[0]\r\n                .classList.remove(\"inner-onwer-box\");\r\n              document.getElementById(\"confermationScreen\").style.display =\r\n                \"none\";\r\n              document.getElementById(\"upgradesBox\").style.display = \"none\";\r\n            }\r\n            joinLeave.innerText = \"Join\";\r\n            if (isCrazyGames) window.CrazyGames.SDK.game.hideInviteButton();\r\n            joinedTeam = false;\r\n            socialContainer.style.display = \"none\";\r\n            selected_class = null;\r\n          }\r\n        };\r\n        joinLeave.addEventListener(\"click\", joinLeaveClick);\r\n\r\n        var createDelete = document.getElementById(\"create/delete\");\r\n\r\n        const deleteTeam = () => {\r\n          if (!owner_of_team) {\r\n            document.getElementById(\"teambox\").style.display = \"block\";\r\n          } else if (owner_of_team && joinedTeam) {\r\n            send(\"deleteTeam\", { teamID: teamOn });\r\n          }\r\n        };\r\n        createDelete.addEventListener(\"click\", deleteTeam);\r\n\r\n        const canvasOpener = (evt) => {\r\n          if (\r\n            window.innerWidth - 475 < MouseX &&\r\n            MouseX < window.innerWidth - 275 &&\r\n            MouseY > 10 &&\r\n            MouseY < 110 &&\r\n            !teampanelopen\r\n          ) {\r\n            teampanelopen = true;\r\n            var teamcontainer_ = document.getElementById(\"teamMain\");\r\n            teamcontainer_.style.display = \"block\";\r\n            selected_class = null;\r\n            document.getElementsByTagName(\"body\")[0].style.cursor = \"auto\";\r\n            var teamcontainer = document.getElementById(\"teamcontainer\");\r\n            teamcontainer.style.display = \"block\";\r\n            teamcontainer.style.height = \"95%\";\r\n            teamcontainer.style.margin = \"5px\";\r\n            teamcontainer.innerHTML = \"\";\r\n            buildTeamList();\r\n\r\n            return;\r\n          }\r\n          if (teampanelopen) {\r\n            return;\r\n          }\r\n          if (\r\n            !tankmeta.dronetanks.includes(__type__) &&\r\n            !teampanelopen &&\r\n            !dead\r\n          ) {\r\n            FireIntervale(evt);\r\n          } else {\r\n            if (evt.button === 2 && !dead) {\r\n              send(\"MouseAway\", {});\r\n            }\r\n          }\r\n        };\r\n        document.addEventListener(\"mousedown\", canvasOpener);\r\n\r\n        const mouseStateChange = () => {\r\n          for (const interval in firingIntervals) {\r\n            firingInterval = firingIntervals[interval];\r\n            clearInterval(firingInterval);\r\n            firingInterval = null;\r\n            canFire2 = true;\r\n          }\r\n\r\n          send(\"MousestateUpdate\", {});\r\n        };\r\n        document.addEventListener(\"mouseup\", mouseStateChange);\r\n      }, 0);\r\n    };\r\n\r\n    function drawRoundedLevelBar(\r\n      ctx,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n      radius,\r\n      progress,\r\n      barcolor,\r\n      barXP,\r\n      barbourder,\r\n      filllevel\r\n    ) {\r\n      // Full bar\r\n      ctx.fillStyle = barcolor;\r\n      if (barbourder !== false) {\r\n        ctx.strokeStyle = barbourder;\r\n      }\r\n      ctx.beginPath();\r\n      ctx.roundRect(x, y, width, height, radius);\r\n      ctx.fill();\r\n      if (barbourder) {\r\n        ctx.stroke();\r\n      }\r\n      ctx.closePath();\r\n      // Filled bar (progress)\r\n      var filledWidth = width * progress;\r\n      if (filledWidth < 0) filledWidth = 0;\r\n      ctx.fillStyle = barXP;\r\n      ctx.beginPath();\r\n      ctx.moveTo(x + radius, y);\r\n      if (filledWidth > radius) {\r\n        ctx.lineTo(x + filledWidth - radius, y);\r\n        if (filledWidth < width - radius) {\r\n          ctx.quadraticCurveTo(x + filledWidth, y, x + filledWidth, y + radius);\r\n          ctx.lineTo(x + filledWidth, y + height - radius);\r\n          ctx.quadraticCurveTo(\r\n            x + filledWidth,\r\n            y + height,\r\n            x + filledWidth - radius,\r\n            y + height\r\n          );\r\n        } else {\r\n          ctx.lineTo(x + width - radius, y);\r\n          ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n          ctx.lineTo(x + width, y + height - radius);\r\n          ctx.quadraticCurveTo(\r\n            x + width,\r\n            y + height,\r\n            x + width - radius,\r\n            y + height\r\n          );\r\n          ctx.lineTo(x + filledWidth - radius, y + height);\r\n        }\r\n        ctx.lineTo(x + radius, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        ctx.lineTo(x, y + radius);\r\n        ctx.quadraticCurveTo(x, y, x + radius, y);\r\n      } else {\r\n        ctx.beginPath();\r\n        ctx.roundRect(x, y, filledWidth, height, radius);\r\n      }\r\n      ctx.closePath();\r\n\r\n      ctx.fill();\r\n\r\n      if (filllevel) {\r\n        ctx.fillStyle = \"#0228c2\";\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.font = `bold ${40 * (1 + (1 - scaleFactor))}px Nunito`;\r\n        ctx.strokeText(level, canvas.width / 2, canvas.height - button10 * 6);\r\n        ctx.fillText(level, canvas.width / 2, canvas.height - button10 * 6);\r\n\r\n        try {\r\n          ctx.drawImage(\r\n            img,\r\n            canvas.width / 2 - button40 / 2,\r\n            canvas.height - button10 * 15,\r\n            button40,\r\n            button40\r\n          );\r\n        } catch {}\r\n      }\r\n    }\r\n\r\n    const movePlayer = (dx, dy, last) => {\r\n      movementTimeouts.shift();\r\n      cavansX += dx;\r\n      playerY += dy;\r\n      cavansY += dy;\r\n      playerX += dx;\r\n\r\n      send(\"playerMoved\", {\r\n        x: playerX,\r\n        y: playerY,\r\n        dx: dx,\r\n        dy: dy,\r\n        last: last,\r\n      });\r\n    };\r\n\r\n    function MathHypotenuse(x, y) {\r\n      return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    const checkCollisions = () => {\r\n      for (let playerId_ in players) {\r\n        let player = players[playerId_];\r\n        let distance = MathHypotenuse(player.x - playerX, player.y - playerY);\r\n\r\n        if (\r\n          distance <\r\n            player.size * playerBaseSize + playerSize * playerBaseSize &&\r\n          playerId_ !== playerId &&\r\n          !(\r\n            players[playerId_]?.team === players[playerId]?.team &&\r\n            players[playerId_]?.team !== null &&\r\n            players[playerId]?.team !== null\r\n          )\r\n        ) {\r\n          send(\"playerCollided\", {\r\n            id_other: playerId_,\r\n            damagetaken: player.bodyDamage,\r\n            damagegiven: bodyDamage,\r\n            id_self: playerId,\r\n          });\r\n          playerHealTime = 0;\r\n          send(\"playerHealintterupted\", {});\r\n          canmove = false;\r\n          setTimeout(() => {\r\n            canmove = true;\r\n          }, 10 * playerSpeed);\r\n          if (player.x < playerX /* left */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(-2, 0, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.x > playerX /* right */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(2, 0, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.y > playerY /* up */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(0, -2, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.y < playerY /* down */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(0, 2, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          // Reverse the last movement\r\n        } else if (\r\n          distance <\r\n            player.size * playerBaseSize + playerSize * playerBaseSize &&\r\n          playerId_ !== playerId\r\n        ) {\r\n          canmove = false;\r\n          setTimeout(() => {\r\n            canmove = true;\r\n          }, 10 * playerSpeed);\r\n          if (player.x < playerX /* left */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(-2, 0, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.x > playerX /* right */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(2, 0, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.y > playerY /* up */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(0, -2, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n          if (player.y < playerY /* down */) {\r\n            for (let c = 0; c < playerSpeed; c++) {\r\n              setTimeout(() => {\r\n                movePlayer(0, 2, c === playerSpeed - 1, c);\r\n              }, 50 * c);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleMovement = (dx, dy) => {\r\n      if (\r\n        playerX + dx > mapLeft &&\r\n        playerX + dx < mapRight &&\r\n        playerY + dy > mapTop &&\r\n        playerY + dy < mapBottom\r\n      ) {\r\n        for (let i = 0; i < playerSpeed / 2; i++) {\r\n          var movement = setTimeout(() => {\r\n            movePlayer(dx, dy, i === playerSpeed - 1 || i === 0);\r\n          }, 80 * i);\r\n          movementTimeouts.push({ timeout: movement, bouceBack: true });\r\n        }\r\n        checkCollisions(dx, dy);\r\n      } else if (playerX + dx > mapLeft && dy === 0) {\r\n        movementTimeouts.forEach((timeout) => {\r\n          clearTimeout(timeout.timeout);\r\n        });\r\n        movementTimeouts = [];\r\n        for (let i = 0; i < playerSpeed / 3; i++) {\r\n          var movement = setTimeout(() => {\r\n            movePlayer(-3, 0, i === playerSpeed - 1 || i === 0);\r\n          }, 75 * i);\r\n          movementTimeouts.push({ timeout: movement, bouceBack: true });\r\n        }\r\n      } else if (playerX + dx < mapRight && dy === 0) {\r\n        movementTimeouts.forEach((timeout) => {\r\n          clearTimeout(timeout.timeout);\r\n        });\r\n        movementTimeouts = [];\r\n        for (let i = 0; i < playerSpeed / 3; i++) {\r\n          var movement = setTimeout(() => {\r\n            movePlayer(3, 0, i === playerSpeed - 1 || i === 0);\r\n          }, 75 * i);\r\n          movementTimeouts.push({ timeout: movement, bouceBack: true });\r\n        }\r\n      } else if (playerY > -mapTop) {\r\n        movementTimeouts.forEach((timeout) => {\r\n          clearTimeout(timeout.timeout);\r\n        });\r\n        movementTimeouts = [];\r\n        for (let i = 0; i < playerSpeed / 3; i++) {\r\n          var movement = setTimeout(() => {\r\n            movePlayer(0, -3, i === playerSpeed - 1 || i === 0);\r\n          }, 75 * i);\r\n          movementTimeouts.push({ timeout: movement, bouceBack: true });\r\n        }\r\n      }\r\n      if (playerY < -mapBottom) {\r\n        movementTimeouts.forEach((timeout) => {\r\n          clearTimeout(timeout.timeout);\r\n        });\r\n        movementTimeouts = [];\r\n        for (let i = 0; i < playerSpeed / 3; i++) {\r\n          var movement = setTimeout(() => {\r\n            movePlayer(0, 3, i === playerSpeed - 1 || i === 0);\r\n          }, 75 * i);\r\n          movementTimeouts.push({ timeout: movement, bouceBack: true });\r\n        }\r\n      }\r\n    };\r\n    var oWidth = canvas.width;\r\n    var oHieght = canvas.height;\r\n\r\n    function rotatePointAroundPlayer(\r\n      cannonOffsetX,\r\n      cannonOffsetY,\r\n      playerRotation\r\n    ) {\r\n      // Convert player rotation to radians for math\r\n      const playerRotationRad = playerRotation * (Math.PI / 180);\r\n\r\n      // Rotate cannon's offset position based on player rotation\r\n      const rotatedX =\r\n        cannonOffsetX * Math.cos(playerRotationRad) -\r\n        cannonOffsetY * Math.sin(playerRotationRad);\r\n      const rotatedY =\r\n        cannonOffsetX * Math.sin(playerRotationRad) +\r\n        cannonOffsetY * Math.cos(playerRotationRad);\r\n\r\n      return [rotatedX, rotatedY];\r\n    }\r\n\r\n    var scaleFactor = 1;\r\n\r\n    function scaleby(scaleDown) {\r\n      scaleFactor -= scaleDown;\r\n      oWidth = window.innerWidth;\r\n      oHieght = window.innerHeight;\r\n      canvas.width = oWidth;\r\n      canvas.height = oHieght;\r\n      var upscaleX_ = oWidth / (canvas.width * scaleFactor);\r\n      var upscaleY_ = oHieght / (canvas.height * scaleFactor);\r\n      canvas.width *= upscaleX_;\r\n      canvas.height *= upscaleY_;\r\n      ctx.scale(scaleFactor, scaleFactor);\r\n      send(\"FOVUpdate\", {\r\n        scaleFactor: scaleFactor,\r\n        canvasW: canvas.width,\r\n        canvasH: canvas.height,\r\n        screenW: oWidth,\r\n        screenH: oHieght,\r\n      });\r\n      Ghostcanvas.width = oWidth;\r\n      Ghostcanvas.height = oHieght;\r\n      boundrectcanvas = Ghostcanvas.getBoundingClientRect();\r\n      var canW1 = canW;\r\n      var canH1 = canH;\r\n      canW = canvas.width;\r\n      canH = canvas.height;\r\n      playerX -= canW1 / 2;\r\n      playerY -= canH1 / 2;\r\n      playerX += canW / 2;\r\n      playerY += canH / 2;\r\n      playerX -= canW / 2 - canW1 / 2;\r\n      playerY -= canH / 2 - canH1 / 2;\r\n      cavansX -= canW / 2 - canW1 / 2;\r\n      cavansY -= canH / 2 - canH1 / 2;\r\n      teamwidth = 0.15625 * canvas.width; // 297.1875\r\n      teamheight = 0.33333333333333333333333333 * canvas.height;\r\n      innerteamwidth = 0.14322916666 * canvas.width;\r\n      innerteamheight = 0.308333333333333333333 * canvas.height;\r\n      innerteamwidthreal = 0.14322916666 * window.innerWidth;\r\n      innerteamheightreal = 0.308333333333333333333 * window.innerHeight;\r\n      buttton140 = 0.07291666666 * canvas.width; // tested screen height is 1031x1920\r\n      button275 = 0.14322916666 * canvas.width;\r\n      button375 = 137.499999994 * upscaleX_ + 237.5 * upscaleX_;\r\n      button462_5 = 87.5 * upscaleX_ + button375;\r\n      button475 = 100 * upscaleX_ + button375;\r\n      button80 = 0.07759456838 * canvas.height;\r\n      button40 = 0.0208333333 * canvas.width;\r\n      button10 = 0.00969932104 * canvas.height;\r\n      button110 = 0.10669253152 * canvas.height;\r\n      barWidth = 0.3125 * canvas.width;\r\n      barHeight = 0.02909796314 * canvas.height;\r\n      document.getElementById(\"gridLight\").style[\r\n        \"grid-template-columns\"\r\n      ] = `repeat(10, ${999 * scaleFactor + 1}px)`;\r\n      document.getElementById(\"gridLight\").style[\r\n        \"grid-template-rows\"\r\n      ] = `repeat(10, ${999 * scaleFactor + 1}px)`;\r\n      document.getElementById(\"gridLight\").style.width = `${\r\n        10000 * scaleFactor\r\n      }px`;\r\n      document.getElementById(\"gridLight\").style.height = `${\r\n        10000 * scaleFactor\r\n      }px`;\r\n      document.getElementById(\"gridLight\").childNodes.forEach((node) => {\r\n        node.style.width = `${999 * scaleFactor}px`;\r\n        node.style.height = `${999 * scaleFactor}px`;\r\n      });\r\n      document.getElementById(\"gridDark\").style[\r\n        \"grid-template-columns\"\r\n      ] = `repeat(10, ${999 * scaleFactor + 1}px)`;\r\n      document.getElementById(\"gridDark\").style[\r\n        \"grid-template-rows\"\r\n      ] = `repeat(10, ${999 * scaleFactor + 1}px)`;\r\n      document.getElementById(\"gridDark\").style.width = `${\r\n        10000 * scaleFactor\r\n      }px`;\r\n      document.getElementById(\"gridDark\").style.height = `${\r\n        10000 * scaleFactor\r\n      }px`;\r\n      document.getElementById(\"gridDark\").childNodes.forEach((node) => {\r\n        node.style.width = `${999 * scaleFactor}px`;\r\n        node.style.height = `${999 * scaleFactor}px`;\r\n      });\r\n    }\r\n\r\n    function calculateTriangleVertices(x, y, sideLength, angle) {\r\n      const height = (Math.sqrt(3) / 2) * sideLength; // Height of an equilateral triangle\r\n      const radius = height / Math.sqrt(3); // Circumradius of the triangle\r\n\r\n      const vertices = [];\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        const theta = angle + i * ((2 * Math.PI) / 3); // 120-degree increments\r\n        const vx = x + radius * Math.cos(theta);\r\n        const vy = y + radius * Math.sin(theta);\r\n        vertices.push({ x: vx, y: vy });\r\n      }\r\n\r\n      return vertices;\r\n    }\r\n\r\n    class notify {\r\n      constructor(\r\n        ctx,\r\n        announcements,\r\n        width = 500,\r\n        height = 27,\r\n        dropDownTime = 500,\r\n        font = \"bold 20px arial\",\r\n        textAling = \"center\",\r\n        margin = 3,\r\n        startHeight = 100,\r\n        shovespeed = 10\r\n      ) {\r\n        this.announcements = announcements;\r\n        this.ctx = ctx;\r\n        this.anoucmentW = width;\r\n        this.anoucmentW2 = width / 2;\r\n        this.anoucmentH = height;\r\n        this.dropDownTime = dropDownTime;\r\n        this.font = font;\r\n        this.textAling = textAling;\r\n        this.boundrectH = height + margin;\r\n        this.startHeight = startHeight;\r\n        this.shovespeed = shovespeed;\r\n        this.shovespeed5 = shovespeed * 5;\r\n        this.boundrectH10 = this.boundrectH - 10;\r\n      }\r\n      run() {\r\n        var shovedown = 50;\r\n        var shoved_down_anoucment = {};\r\n        var exW = 1; // scale factors\r\n        var exH = 1; // scale factors\r\n        var i = 0;\r\n        this.announcements.forEach((anoucment) => {\r\n          if (Date.now() <= anoucment.shovedowndate) {\r\n            i++;\r\n            var shovedownper = 0;\r\n            this.ctx.globalAlpha = anoucment.trans;\r\n            this.ctx.fillStyle = anoucment.color;\r\n            this.ctx.font = \"bold 20px arial\";\r\n            this.ctx.textAlign = \"center\";\r\n            if (\r\n              Date.now() >= anoucment.expiretime &&\r\n              Date.now() <= anoucment.shovedowndate\r\n            ) {\r\n              shovedown =\r\n                this.shovespeed5 /\r\n                ((anoucment.shovedowndate - Date.now()) / this.dropDownTime);\r\n              shovedown = shovedown <= 0 ? 0 : shovedown;\r\n              shoved_down_anoucment = anoucment;\r\n            }\r\n            shovedownper = shovedown;\r\n            if (Date.now() <= anoucment.expiretime) {\r\n              shovedownper =\r\n                shovedownper >= this.shovespeed5\r\n                  ? this.shovespeed5\r\n                  : shovedownper;\r\n              shovedownper = shovedownper <= 0 ? 0 : shovedownper;\r\n            }\r\n            if (Date.now() <= shoved_down_anoucment.shovedowndate) {\r\n              var r =\r\n                (shoved_down_anoucment.shovedowndate - Date.now()) /\r\n                  this.shovespeed <\r\n                this.boundrectH\r\n                  ? (shoved_down_anoucment.shovedowndate - Date.now()) /\r\n                    this.shovespeed\r\n                  : this.boundrectH;\r\n              shovedownper -= r;\r\n              shovedownper += this.boundrectH;\r\n            }\r\n            shovedownper = shovedownper <= 0 ? 0 : shovedownper;\r\n            this.ctx.globalAlpha -=\r\n              (canvas.height / 2 -\r\n                (this.startHeight -\r\n                  shovedownper -\r\n                  this.boundrectH10 +\r\n                  i * this.boundrectH * exH)) /\r\n              canvas.height;\r\n            this.ctx.beginPath();\r\n            this.ctx.roundRect(\r\n              canvas.width / 2 - this.anoucmentW2 * exW,\r\n              this.startHeight -\r\n                shovedownper -\r\n                this.boundrectH10 +\r\n                i * this.boundrectH * exH,\r\n              this.anoucmentW * exW,\r\n              this.anoucmentH * exH,\r\n              anoucment.rounding\r\n            );\r\n            this.ctx.fill();\r\n            this.ctx.closePath();\r\n            this.ctx.fillText(\r\n              anoucment.text,\r\n              canvas.width / 2,\r\n              (this.startHeight - shovedownper + i * this.boundrectH) * exH\r\n            );\r\n          }\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n      }\r\n    }\r\n\r\n    var newnotify = new notify(ctx, announcements);\r\n\r\n    function drawself(exW, exH) {\r\n      pentarotate += 0.1;\r\n      newnotify.announcements = announcements;\r\n      ctx.fillStyle = squareColor;\r\n      let angle = getCannonAngle();\r\n      if (!messaging) {\r\n        if (canmove) {\r\n          if (keysPressed[\"]\"]) {\r\n            players[playerId].score += 50;\r\n            score = players[playerId].score;\r\n            levelHANDLER();\r\n          } else if (\r\n            (keysPressed[\"ArrowLeft\"] && keysPressed[\"ArrowUp\"]) ||\r\n            (keysPressed[\"a\"] && keysPressed[\"w\"])\r\n          ) {\r\n            handleMovement(-1, -1);\r\n          } else if (\r\n            (keysPressed[\"ArrowLeft\"] && keysPressed[\"ArrowDown\"]) ||\r\n            (keysPressed[\"a\"] && keysPressed[\"s\"])\r\n          ) {\r\n            handleMovement(-1, 1);\r\n          } else if (\r\n            (keysPressed[\"ArrowRight\"] && keysPressed[\"ArrowUp\"]) ||\r\n            (keysPressed[\"d\"] && keysPressed[\"w\"])\r\n          ) {\r\n            handleMovement(1, -1);\r\n          } else if (\r\n            (keysPressed[\"ArrowRight\"] && keysPressed[\"ArrowDown\"]) ||\r\n            (keysPressed[\"d\"] && keysPressed[\"s\"])\r\n          ) {\r\n            handleMovement(1, 1);\r\n          } else if (keysPressed[\"ArrowUp\"] || keysPressed[\"w\"]) {\r\n            handleMovement(0, -1);\r\n          } else if (keysPressed[\"ArrowDown\"] || keysPressed[\"s\"]) {\r\n            handleMovement(0, 1);\r\n          } else if (keysPressed[\"ArrowLeft\"] || keysPressed[\"a\"]) {\r\n            handleMovement(-1, 0);\r\n          } else if (keysPressed[\"ArrowRight\"] || keysPressed[\"d\"]) {\r\n            handleMovement(1, 0);\r\n          }\r\n        }\r\n        if (canKeyPress) {\r\n          if (keysPressed[\"-\"]) {\r\n            scaleby(0.1);\r\n            waitpls();\r\n          } else if (keysPressed[\"1\"]) {\r\n            if (statsTree[\"Health\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Health\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Health\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"2\"]) {\r\n            if (statsTree[\"Body Damage\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Body Damage\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Body Damage\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"3\"]) {\r\n            if (statsTree[\"Regen\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Regen\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Regen\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"4\"]) {\r\n            if (statsTree[\"Bullet Pentration\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Bullet Pentration\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Bullet Pentration\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"5\"]) {\r\n            if (statsTree[\"Bullet Speed\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Bullet Speed\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Bullet Speed\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"6\"]) {\r\n            if (statsTree[\"Bullet Damage\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Bullet Damage\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Bullet Damage\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"7\"]) {\r\n            if (statsTree[\"Bullet Reload\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Bullet Reload\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Bullet Reload\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"8\"]) {\r\n            if (statsTree[\"Speed\"] < maxUP && upgradePoints > 0) {\r\n              statsTree[\"Speed\"] += 1;\r\n              upgradePoints -= 1;\r\n              send(\"statUpgrade\", {\r\n                Upgradetype: \"Speed\",\r\n                UpgradeLevel: 1,\r\n              });\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"=\"]) {\r\n            FOV += 0.1;\r\n          } else if (keysPressed[\"e\"]) {\r\n            send(\"autoFiringUpdate\", { autoFiring: !autoFiring });\r\n            if (lockautoRotating) return;\r\n            autoFiring = !autoFiring;\r\n            if (!autoFiring) {\r\n              canFire = true;\r\n            }\r\n            waitpls();\r\n          } else if (keysPressed[\"c\"]) {\r\n            if (autoRotating && !lockautoRotating) {\r\n              send(\"unrotating\", {});\r\n            } else {\r\n              send(\"rotate\", {\r\n                autoAngle: angle * (180 / pi),\r\n                autoIntevals: autoIntevals,\r\n                playerSize: playerSize,\r\n                FOV: scaleFactor,\r\n                canvaswidth: canvas.width,\r\n                canvasheight: canvas.height,\r\n              });\r\n            }\r\n            autoRotating = !autoRotating;\r\n            waitpls();\r\n          }\r\n        }\r\n      }\r\n\r\n      newnotify.run();\r\n\r\n      let tankdata = tankmeta[__type__];\r\n\r\n      let tankdatacannon = tankdata[\"cannons\"];\r\n\r\n      let FOVplayerz = playerSize * FOV;\r\n\r\n      if (tankdata.decor) {\r\n        tankdata.decor.forEach((decor_) => {\r\n          if (decor_.type === \"octaspinner\") {\r\n            ctx.fillStyle = \"black\";\r\n            ctx.save();\r\n            ctx.translate(canW / 2 + decor_.offsetX, canH / 2 + decor_.offsetY);\r\n            ctx.rotate(angle + decor_.offsetAngle);\r\n\r\n            ctx.beginPath();\r\n            for (let i = 0; i < 8; i++) {\r\n              // calculate the rotation\r\n              const rotation = ((Math.PI * 2) / 8) * i;\r\n\r\n              // for the first point move to\r\n              if (i === 0) {\r\n                ctx.moveTo(\r\n                  decor_.size * Math.cos(rotation),\r\n                  decor_.size * Math.sin(rotation)\r\n                );\r\n              } else {\r\n                // for the rest draw a line\r\n                ctx.lineTo(\r\n                  decor_.size * Math.cos(rotation),\r\n                  decor_.size * Math.sin(rotation)\r\n                );\r\n              }\r\n            }\r\n\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.restore();\r\n          }\r\n        });\r\n      }\r\n\r\n      let gradient = ctx.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        (playerSize * playerBaseSize) / 1.5,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radiusConfig.radius\r\n      );\r\n\r\n      gradient.addColorStop(radiusConfig.build[0], \"#FFFFFF00\");\r\n      gradient.addColorStop(radiusConfig.build[1], \"#61f7ff\");\r\n      gradient.addColorStop(radiusConfig.build[2], \"#FFFFFF00\");\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radiusConfig.radius,\r\n        0,\r\n        2 * Math.PI,\r\n        false\r\n      );\r\n\r\n      ctx.fillStyle = gradient;\r\n      ctx.fill();\r\n\r\n      ctx.closePath();\r\n\r\n      for (let i = 0; i < Object.keys(tankdatacannon).length; i++) {\r\n        ctx.fillStyle = \"#b3b3b3\";\r\n        let tankdatacannondata = tankdatacannon[i];\r\n        let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\r\n        let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n        if (tankdatacannondata[\"type\"] === \"basicCannon\") {\r\n          ctx.save();\r\n          // Translate to the center of the square\r\n          ctx.translate(canW / 2, canH / 2);\r\n          let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          // Draw the square\r\n          let basex =\r\n            -cannon_widthFOV / 2 +\r\n            cannon_heightFOV +\r\n            tankdatacannondata[\"offSet-x\"] -\r\n            cannonWidth[i];\r\n\r\n          let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n          ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n          // Add a border to the cannon\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n          // Restore the previous transformation matrix\r\n          ctx.restore();\r\n        } else if (\r\n          tankdatacannondata[\"type\"] === \"trapezoid\" ||\r\n          tankdatacannondata[\"type\"] === \"directer\"\r\n        ) {\r\n          ctx.save();\r\n          // Translate to the center of the square\r\n          ctx.translate(canW / 2, canH / 2);\r\n          let tankdatacannondata = tankdatacannon[i];\r\n          var angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          let cannwidthtop =\r\n            tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\r\n          let cannwidthbottom =\r\n            tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\r\n          let cannonHeight = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n          // Draw the square\r\n          let basex =\r\n            cannwidthbottom / 2 +\r\n            cannon_heightFOV +\r\n            tankdatacannondata[\"offSet-x\"] -\r\n            cannonWidth[i];\r\n          let basey =\r\n            -cannon_heightFOV / 2 +\r\n            cannon_heightFOV / 2 +\r\n            tankdatacannondata[\"offSet-y\"];\r\n\r\n          const cannonWidth_top = cannwidthtop;\r\n          const cannonWidth_bottom = cannwidthbottom;\r\n\r\n          var canwB2 = cannonWidth_bottom / 2;\r\n          var canwH2 = cannonWidth_top / 2;\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.fill();\r\n\r\n          // Add a border to the cannon\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.stroke(); // Draw the border\r\n          ctx.restore();\r\n        }\r\n\r\n        if (\r\n          tankdatacannondata[\"type\"] === \"trap\" ||\r\n          tankdatacannondata[\"type\"] === \"paver\"\r\n        ) {\r\n          ctx.save();\r\n          // Translate to the center of the square\r\n          ctx.translate(canW / 2, canH / 2);\r\n          let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          let trapR = tankdatacannondata[\"trap-to-cannon-ratio\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          // Draw the square\r\n          let basex =\r\n            -cannon_widthFOV / 2 +\r\n            cannon_heightFOV +\r\n            tankdatacannondata[\"offSet-x\"] -\r\n            cannonWidth[i];\r\n          let reH = cannon_widthFOV * (1 - trapR);\r\n          let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n          ctx.fillRect(\r\n            basex * playerSize * FOV,\r\n            basey * playerSize * FOV,\r\n            cannon_widthFOV - reH,\r\n            cannon_heightFOV\r\n          );\r\n\r\n          ctx.strokeStyle = \"lightgrey\";\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(\r\n            basex * playerSize * FOV,\r\n            basey * playerSize * FOV,\r\n            cannon_widthFOV - reH,\r\n            cannon_heightFOV\r\n          );\r\n\r\n          var cannonHeight = reH;\r\n          var cannonWidth_top = cannon_heightFOV * 1.4;\r\n          var cannonWidth_bottom = cannon_heightFOV;\r\n\r\n          basex = basex + (cannon_widthFOV - trapR);\r\n\r\n          var canwB2 = cannonWidth_bottom / 2;\r\n          var canwH2 = cannonWidth_top / 2;\r\n          basey += canwB2 - trapR;\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.fill();\r\n\r\n          // Add a border to the cannon\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.stroke(); // Draw the border\r\n          ctx.restore();\r\n          if (tankdatacannondata[\"type\"] === \"paver\") {\r\n            cannon_widthFOV /= 2;\r\n            cannon_heightFOV /= 2;\r\n            ctx.save();\r\n            ctx.translate(canW / 2, canH / 2);\r\n\r\n            let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n            ctx.rotate(angle + angle_offset);\r\n            // Draw the square\r\n            let basex =\r\n              -cannon_widthFOV / 2 +\r\n              cannon_heightFOV +\r\n              tankdatacannondata[\"offSet-x\"] -\r\n              cannonWidth[i];\r\n            let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n            ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n\r\n            // Add a border to the cannon\r\n            ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n            ctx.lineWidth = 3; // Set border width\r\n            ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n            // Restore the previous transformation matrix\r\n            ctx.restore();\r\n          }\r\n        }\r\n        if (tankdatacannondata[\"type\"] === \"SwivelAutoCannon\") {\r\n          ctx.save();\r\n          let cannonangle;\r\n          let cannonWidth_;\r\n          autocannons.forEach((cannonA) => {\r\n            if (cannonA.playerid === playerId && cannonA.autoindex === i) {\r\n              cannonangle = cannonA.angle;\r\n              cannonWidth_ = cannonA.cannonWidth;\r\n            }\r\n          });\r\n          var offSet_x = tankdatacannondata[\"offSet-x\"];\r\n          if (tankdatacannondata[\"offSet-x\"] === \"playerX\") {\r\n            offSet_x = playerSize * playerBaseSize;\r\n          }\r\n          if (tankdatacannondata[\"offSet-x-multpliyer\"]) {\r\n            offSet_x *= -1;\r\n          }\r\n          let angle0 = getCannonAngle();\r\n          var [x, y] = rotatePointAroundPlayer(\r\n            offSet_x,\r\n            0,\r\n            angle0 * (180 / Math.PI)\r\n          );\r\n\r\n          ctx.translate(canW / 2 + x, y + canH / 2);\r\n\r\n          let angle = cannonangle;\r\n\r\n          let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          // Draw the square\r\n\r\n          let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\r\n          let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n          ctx.beginPath();\r\n          ctx.fillRect(\r\n            basex - 5,\r\n            basey - 2.5,\r\n            cannon_widthFOV + 10 - cannonWidth_,\r\n            cannon_heightFOV + 5\r\n          );\r\n\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(\r\n            basex - 5,\r\n            basey - 2.5,\r\n            cannon_widthFOV + 10 - cannonWidth_,\r\n            cannon_heightFOV + 5\r\n          ); // Draw the border\r\n          // Restore the previous transformation matrix\r\n          ctx.rotate(-(angle + angle_offset));\r\n          ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\r\n\r\n          ctx.fill();\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n          ctx.restore();\r\n        } else if (tankdatacannondata[\"type\"] === \"AutoBulletCannon\") {\r\n          ctx.save();\r\n          // Translate to the center of the square\r\n          ctx.translate(canW / 2, canH / 2);\r\n          let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          // Draw the square\r\n\r\n          let basex =\r\n            -cannon_widthFOV / 2 +\r\n            cannon_heightFOV +\r\n            tankdatacannondata[\"offSet-x\"] -\r\n            cannonWidth[i];\r\n          let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n          ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n          // Add a border to the cannon\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n          // Restore the previous transformation matrix\r\n          ctx.beginPath();\r\n          ctx.arc(\r\n            basex + 40 + cannon_widthFOV / 4,\r\n            basey + cannon_heightFOV / 2,\r\n            (playerSize * FOV * playerBaseSize) / 4,\r\n            0,\r\n            2 * Math.PI,\r\n            false\r\n          );\r\n          ctx.fill();\r\n          ctx.lineWidth = 5;\r\n          ctx.strokeStyle = \"lightgrey\";\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n          ctx.restore();\r\n        } else if (tankdatacannondata[\"type\"] === \"rocketer\") {\r\n          ctx.save();\r\n          // Translate to the center of the square\r\n          ctx.translate(canW / 2, canH / 2);\r\n          let tankdatacannondata = tankdatacannon[i];\r\n          var angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          let cannwidthtop =\r\n            tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\r\n          let cannwidthbottom =\r\n            tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\r\n          let cannonHeight = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n          // Draw the square\r\n          let basex =\r\n            cannwidthbottom / 2 +\r\n            cannon_heightFOV +\r\n            tankdatacannondata[\"offSet-x\"] -\r\n            cannonWidth[i];\r\n          let basey =\r\n            -cannon_heightFOV / 2 +\r\n            cannon_heightFOV / 2 +\r\n            tankdatacannondata[\"offSet-y\"];\r\n\r\n          const cannonWidth_top = cannwidthtop;\r\n          const cannonWidth_bottom = cannwidthbottom;\r\n\r\n          var canwB2 = cannonWidth_bottom / 2;\r\n          var canwH2 = cannonWidth_top / 2;\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.fill();\r\n\r\n          // Add a border to the cannon\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.beginPath();\r\n          ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n          ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n          ctx.lineTo(basex, basey + canwH2);\r\n          ctx.lineTo(basex, basey - canwH2);\r\n          ctx.closePath(); // Close the path\r\n          ctx.stroke();\r\n\r\n          ctx.fillRect(\r\n            cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - playerSize)),\r\n            basey - canwH2,\r\n            cannon_heightFOV - 40,\r\n            cannwidthtop\r\n          );\r\n\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(\r\n            cannon_heightFOV + (cannon_heightFOV - 25) * (1 + (1 - playerSize)),\r\n            basey - canwH2,\r\n            cannon_heightFOV - 40,\r\n            cannwidthtop\r\n          );\r\n\r\n          ctx.restore();\r\n        }\r\n        zlevelbullets.forEach((NEW_bullet__) => {\r\n          var realx =\r\n            NEW_bullet__.x - Math.abs(NEW_bullet__.size * 2 * (FOV - 1));\r\n          var realy =\r\n            NEW_bullet__.y - Math.abs(NEW_bullet__.size * 2 * (FOV - 1));\r\n          if (NEW_bullet__.transparency) {\r\n            ctx.globalAlpha = NEW_bullet__.transparency;\r\n          }\r\n          ctx.beginPath();\r\n          if (NEW_bullet__.type === \"basic\") {\r\n            if (NEW_bullet__.id === playerId) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let realsize = NEW_bullet__.size * FOV;\r\n\r\n            ctx.arc(\r\n              realx - (NEW_bullet__.xstart - (NEW_bullet__.xstart - cavansX)),\r\n              realy - (NEW_bullet__.ystart - (NEW_bullet__.ystart - cavansY)),\r\n              realsize,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n          ctx.globalAlpha = 1;\r\n        });\r\n\r\n        zlevelbullets = [];\r\n      }\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        playerSize * playerBaseSize,\r\n        0,\r\n        2 * Math.PI,\r\n        false\r\n      );\r\n      if (state === \"start\" || state === \"damaged\") {\r\n        let backwardsObj = { 1: 4, 2: 3, 3: 2, 4: 1, 5: 0.1 };\r\n        let percentage =\r\n          statecycle % 10 <= 5\r\n            ? statecycle % 10\r\n            : backwardsObj[(statecycle % 10) - 5];\r\n        percentage /= 10;\r\n        let newrgb = mix([130, 130, 130], [255, 255, 255], percentage);\r\n        ctx.fillStyle = `rgb(${newrgb[0]} ${newrgb[1]} ${newrgb[2]})`;\r\n      } else {\r\n        ctx.fillStyle = \"#828282\";\r\n      }\r\n      ctx.fill();\r\n      ctx.lineWidth = 5;\r\n      ctx.strokeStyle = \"#aaaaaa\";\r\n      ctx.stroke();\r\n\r\n      if (skinID !== 0) {\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(angle);\r\n        ctx.drawImage(\r\n          images[skinID],\r\n          0 - playerSize * playerBaseSize,\r\n          0 - playerSize * playerBaseSize,\r\n          playerBaseSize * 2,\r\n          playerBaseSize * 2\r\n        );\r\n        ctx.restore();\r\n      }\r\n\r\n      // Draw background bar\r\n      ctx.fillStyle = \"black\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(canvas.width / 2 - 45, canvas.height / 2 + 55, 90, 10, 5);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.font = `bold ${20 * exW}px Nunito`;\r\n      ctx.strokeText(score, canvas.width / 2, canvas.height / 2 - 55);\r\n      ctx.fillText(score, canvas.width / 2, canvas.height / 2 - 55);\r\n\r\n      ctx.strokeText(username, canvas.width / 2, canvas.height / 2 - 75);\r\n      ctx.fillText(username, canvas.width / 2, canvas.height / 2 - 75);\r\n      for (let i = 0; i < Object.keys(tankdatacannon).length; i++) {\r\n        ctx.fillStyle = \"#b3b3b3\";\r\n        let tankdatacannondata = tankdatacannon[i];\r\n        let cannon_widthFOV = tankdatacannondata[\"cannon-width\"] * FOVplayerz;\r\n        let cannon_heightFOV = tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n        let cannonangle;\r\n        var cannonWidth_;\r\n        autocannons.forEach((cannonA) => {\r\n          if (cannonA.playerid === playerId && cannonA.autoindex === i) {\r\n            cannonangle = cannonA.angle;\r\n            cannonWidth_ = cannonA.cannonWidth;\r\n          }\r\n        });\r\n        if (tankdatacannondata[\"type\"] === \"autoCannon\") {\r\n          ctx.save();\r\n          var offSet_x = tankdatacannondata[\"offSet-x\"];\r\n          if (tankdatacannondata[\"offSet-x\"] === \"playerX\") {\r\n            offSet_x = playerSize * playerBaseSize;\r\n          }\r\n          if (tankdatacannondata[\"offSet-x-multpliyer\"]) {\r\n            offSet_x *= -1;\r\n          }\r\n          let angle0 = getCannonAngle();\r\n          var [x, y] = rotatePointAroundPlayer(\r\n            offSet_x,\r\n            0,\r\n            angle0 * (180 / Math.PI)\r\n          );\r\n\r\n          ctx.translate(canvas.width / 2 + x, y + canvas.height / 2);\r\n\r\n          let angle = cannonangle;\r\n\r\n          let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n          ctx.rotate(angle + angle_offset);\r\n          // Draw the square\r\n\r\n          let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\r\n          let basey = -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n          ctx.beginPath();\r\n          ctx.fillRect(\r\n            basex - 5,\r\n            basey - 2.5,\r\n            cannon_widthFOV + 10 - cannonWidth_,\r\n            cannon_heightFOV + 5\r\n          );\r\n\r\n          ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n          ctx.lineWidth = 3; // Set border width\r\n          ctx.strokeRect(\r\n            basex - 5,\r\n            basey - 2.5,\r\n            cannon_widthFOV + 10 - cannonWidth_,\r\n            cannon_heightFOV + 5\r\n          ); // Draw the border\r\n          // Restore the previous transformation matrix\r\n          ctx.rotate(-(angle + angle_offset));\r\n          ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\r\n\r\n          ctx.fill();\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n          ctx.restore();\r\n        }\r\n      }\r\n      // Draw health bar\r\n      const healthWidth = (playerHealth / maxhealth) * 90;\r\n      ctx.fillStyle = \"green\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(\r\n        canvas.width / 2 - 45,\r\n        canvas.height / 2 + 55,\r\n        healthWidth,\r\n        10,\r\n        5\r\n      );\r\n      ctx.fill();\r\n      ctx.closePath();\r\n\r\n      ctx.save();\r\n\r\n      ctx.translate(canW - 150 * exW, canH - 150 * exW);\r\n      ctx.fillStyle = \"#fcfafa\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(0, 0, 125 * exW, 125 * exW, 5);\r\n      ctx.fill();\r\n      ctx.moveTo(0, 0);\r\n      ctx.lineWidth = 1 * exW;\r\n      ctx.strokeStyle = \"#e3e3e3\";\r\n      for (let i = 0; i < 13; i++) {\r\n        ctx.moveTo(i * 10.3 * exW, 0);\r\n        ctx.lineTo(i * 10.3 * exW, 125 * exW);\r\n        ctx.stroke();\r\n      }\r\n      ctx.closePath();\r\n      ctx.moveTo(0, 0);\r\n      ctx.lineWidth = 1 * exW;\r\n      ctx.strokeStyle = \"#e3e3e3\";\r\n      for (let i = 0; i < 13; i++) {\r\n        ctx.moveTo(0, i * 10.3 * exW);\r\n        ctx.lineTo(125 * exW, i * 10.3 * exW);\r\n        ctx.stroke();\r\n      }\r\n      ctx.closePath();\r\n      ctx.lineWidth = 5;\r\n      ctx.strokeStyle = \"grey\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(0, 0, 125 * exW, 125 * exW, 5);\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n\r\n      ctx.textAlign = \"center\";\r\n      ctx.strokeText(\r\n        \"players: \" + Object.keys(players).length,\r\n        (125 / 2) * exW,\r\n        -25 * exH\r\n      );\r\n      ctx.fillText(\r\n        \"players: \" + Object.keys(players).length,\r\n        (125 / 2) * exW,\r\n        -25 * exH\r\n      );\r\n\r\n      ctx.globalAlpha = 0.5;\r\n      ctx.fillStyle = \"#579bfa\";\r\n      const centerX = 62.5 * exW;\r\n      const centerY = 62.5 * exW;\r\n      const radius = 30 * exW;\r\n      const angle_o_0_ = pentarotate; // Convert angle to radians\r\n      vertices = [];\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        const theta = (i * 2 * Math.PI) / 5 + angle_o_0_; // Divide circle into 5 parts and add rotation angle\r\n        const x = centerX + radius * Math.cos(theta);\r\n        const y = centerY + radius * Math.sin(theta);\r\n        vertices.push({ x, y });\r\n      }\r\n      // Draw filled pentagon\r\n      ctx.beginPath();\r\n      ctx.moveTo(vertices[0].x, vertices[0].y);\r\n      for (let i = 1; i < vertices.length; i++) {\r\n        ctx.lineTo(vertices[i].x, vertices[i].y);\r\n      }\r\n      ctx.closePath();\r\n      ctx.fill();\r\n\r\n      // Draw pentagon outline\r\n      ctx.strokeStyle = \"#3976cc\";\r\n      ctx.beginPath();\r\n      ctx.moveTo(vertices[0].x, vertices[0].y);\r\n      for (let i = 1; i < vertices.length; i++) {\r\n        ctx.lineTo(vertices[i].x, vertices[i].y);\r\n      }\r\n      ctx.closePath();\r\n      ctx.globalAlpha = 1;\r\n      ctx.beginPath();\r\n      ctx.translate(\r\n        ((playerX + 2500) / 80 + 35) * exW,\r\n        ((playerY + 2500) / 80 + 35) * exH\r\n      );\r\n      ctx.rotate(angle + (90 * Math.PI) / 180);\r\n      ctx.arc(\r\n        ((playerX + 2500) / 80 + 35) * exW,\r\n        ((playerY + 2500) / 80 + 35) * exH,\r\n        playerSize * FOV * 2,\r\n        0,\r\n        2 * Math.PI,\r\n        false\r\n      );\r\n      let realitemsize = playerSize * exW * 2;\r\n      let h = 3;\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, -(h / 2) * exH);\r\n      ctx.lineTo(-(realitemsize / 2) * exW, (h / 2) * exH);\r\n      ctx.lineTo((realitemsize / 2) * exW, (h / 2) * exH);\r\n      ctx.closePath();\r\n      ctx.fillStyle = \"blue\";\r\n      ctx.fill();\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeStyle = \"darkblue\";\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      ctx.beginPath();\r\n      ctx.rotate(-(angle + (90 * Math.PI) / 180));\r\n      minimapLevels.forEach((playerobject) => {\r\n        if (playerobject.id === playerId) return;\r\n        ctx.arc(playerobject.x, playerobject.y, 4, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = \"blue\";\r\n        ctx.fill();\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeStyle = \"darkblue\";\r\n      });\r\n      ctx.restore();\r\n      if (messaging) {\r\n        ctx.globalAlpha = 0.5;\r\n        ctx.fillStyle = \"#a3a3a3\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.globalAlpha = 0.8;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#96ceff\";\r\n        ctx.strokeStyle = \"#41a4fa\";\r\n        let boxlen = button10 * 30 + typedtext.length * (button10 * 1.2);\r\n        ctx.roundRect(\r\n          canvas.width / 2 - boxlen / 2,\r\n          canvas.height / 2 - button10 * 2.5,\r\n          boxlen,\r\n          button10 * 5,\r\n          5\r\n        );\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.globalAlpha = 1;\r\n        ctx.textAlign = \"left\";\r\n        ctx.font = `bold ${30 * exW}px Nunito`;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillText(\r\n          typedtext,\r\n          canvas.width / 2 - (boxlen / 2 - 5),\r\n          canvas.height / 2 + button10 * 1.5\r\n        );\r\n        ctx.closePath();\r\n        var textwidth = ctx.measureText(typedtext).width + 3;\r\n        if (blinking) {\r\n          ctx.beginPath();\r\n          ctx.lineWidth = 1;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.moveTo(\r\n            canvas.width / 2 - (boxlen / 2 - 5) + textwidth,\r\n            canvas.height / 2 - button10 * 1.5\r\n          );\r\n          ctx.lineTo(\r\n            canvas.width / 2 - (boxlen / 2 - 5) + textwidth,\r\n            canvas.height / 2 + button10 * 1.5\r\n          );\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n        }\r\n      }\r\n      if (\r\n        window.innerWidth - 475 < MouseX &&\r\n        MouseX < window.innerWidth - 275 &&\r\n        MouseY > 10 &&\r\n        MouseY < 110\r\n      ) {\r\n        ctx.strokeStyle = \"#4fe5ff\";\r\n        ctx.lineWidth = 7;\r\n      } else {\r\n        ctx.strokeStyle = \"#0e589d\";\r\n        ctx.lineWidth = 5;\r\n      }\r\n\r\n      ctx.fillStyle = \"#45bbff\";\r\n\r\n      ctx.beginPath();\r\n      ctx.roundRect(\r\n        canvas.width - button475,\r\n        button10,\r\n        button10 * 20,\r\n        button10 * 10,\r\n        5\r\n      );\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      ctx.fillStyle = \"#00a0fd\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(\r\n        canvas.width - button462_5,\r\n        button10 * 2.5,\r\n        button10 * 17.5,\r\n        button10 * 7,\r\n        5\r\n      );\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      ctx.textAlign = \"center\";\r\n      ctx.font = `bold ${40 * (2 - scaleFactor)}px Nunito`;\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillText(\"Teams\", canvas.width - button375, button10 * 7.5);\r\n\r\n      if (setprogress > progress) {\r\n        progress += 0.07;\r\n        if (setprogress === 0 || setprogress > 1) {\r\n          progress = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    function drawbar(item) {\r\n      ctx.fillStyle = \"black\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(-45, 35, 90, 10, 5);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      const healthWidth = (item.health / item.maxhealth) * 90;\r\n      ctx.fillStyle = \"green\";\r\n      ctx.beginPath();\r\n      ctx.roundRect(-45, 35, healthWidth, 10, 5);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n    }\r\n\r\n    function draw(timestamp) {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      var upscaleX = 1 + (1 - oWidth / canvas.width);\r\n      var upscaleY = 1 + (1 - oHieght / canvas.height);\r\n      let deltaTime = (timestamp - lastTime) / 1000;\r\n      lastTime = timestamp;\r\n\r\n      let currentFPS = 1 / deltaTime;\r\n      frameTimes.push(currentFPS);\r\n\r\n      if (frameTimes.length > 60) {\r\n        frameTimes.shift();\r\n      }\r\n\r\n      fps = Math.round(frameTimes.reduce((a, b) => a + b) / frameTimes.length);\r\n\r\n      explosions.forEach((exsplosion) => {\r\n        if (\r\n          exsplosion.x + exsplosion.size > 0 + cavansX &&\r\n          exsplosion.x < canvas.width + cavansX + exsplosion.size &&\r\n          exsplosion.y - cavansY > 0 - exsplosion.size &&\r\n          exsplosion.y - exsplosion.size < canvas.height + cavansY\r\n        ) {\r\n          exsplosion.rings.reduce((a, ring) => {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n              exsplosion.x - cavansX,\r\n              exsplosion.y - cavansY,\r\n              exsplosion.size + a,\r\n              0,\r\n              Math.PI * 2\r\n            );\r\n            ctx.fillStyle = ring.color;\r\n            ctx.strokeStyle = ring.color;\r\n            ctx.globalAlpha =\r\n              exsplosion.trans - ring.transMinus <= 0\r\n                ? 0.001\r\n                : exsplosion.trans - ring.transMinus;\r\n            ctx.lineWidth = ring.size;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            a += ring.size;\r\n            ctx.globalAlpha = 1;\r\n            return a;\r\n          }, 0);\r\n        }\r\n      });\r\n      ctx.lineWidth = 1;\r\n\r\n      ctx.lineJoin = \"round\";\r\n      food_list.forEach((item) => {\r\n        var realx = item.x;\r\n        var realy = item.y;\r\n\r\n        if (\r\n          realx + item.size > cavansX &&\r\n          realx < canvas.width + cavansX + item.size &&\r\n          realy - cavansY > -item.size &&\r\n          realy - item.size < canvas.height + cavansY &&\r\n          item.health >= 0\r\n        ) {\r\n          ctx.save();\r\n          if (item.transparency) {\r\n            ctx.globalAlpha = item.transparency;\r\n            if (item.transparency < 0) {\r\n              ctx.globalAlpha = 0;\r\n            }\r\n          }\r\n\r\n          ctx.translate(realx - cavansX, realy - cavansY);\r\n\r\n          ctx.rotate(item.angle * pi180);\r\n\r\n          if (item.type === \"square\") {\r\n            ctx.fillStyle = item.color;\r\n            ctx.fillRect(-item.size / 2, -item.size / 2, item.size, item.size);\r\n            ctx.strokeStyle = \"GoldenRod\";\r\n            ctx.lineWidth = 5;\r\n            ctx.strokeRect(\r\n              -item.size / 2,\r\n              -item.size / 2,\r\n              item.size,\r\n              item.size\r\n            );\r\n\r\n            ctx.rotate(-item.angle * pi180);\r\n            if (item.health < item.maxhealth) {\r\n              drawbar(item);\r\n            }\r\n          }\r\n\r\n          if (item.type === \"triangle\") {\r\n            let realitemsize = item.size;\r\n            const h = realitemsize * (Math.sqrt(3) / 2);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(-realitemsize / 2, h / 3);\r\n            ctx.lineTo(realitemsize / 2, h / 3);\r\n            ctx.lineTo(0, (-2 * h) / 3);\r\n\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = item.color;\r\n            ctx.fill();\r\n            ctx.strokeStyle = \"Darkred\";\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.rotate(-item.angle * pi180);\r\n\r\n            if (item.health < item.maxhealth) {\r\n              drawbar(item);\r\n            }\r\n          }\r\n\r\n          if (item.type === \"pentagon\") {\r\n            ctx.fillStyle = item.color;\r\n            const centerX = 0;\r\n            const centerY = 0;\r\n            const radius = item.size * FOV;\r\n            const angle = item.angle * pi180; // Convert angle to radians\r\n            vertices = [];\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n              const theta = (i * 2 * Math.PI) / 5 + angle; // Divide circle into 5 parts and add rotation angle\r\n              const x = centerX + radius * Math.cos(theta);\r\n              const y = centerY + radius * Math.sin(theta);\r\n              vertices.push({ x, y });\r\n            }\r\n            // Draw filled pentagon\r\n            ctx.beginPath();\r\n            ctx.moveTo(vertices[0].x, vertices[0].y);\r\n            for (let i = 1; i < vertices.length; i++) {\r\n              ctx.lineTo(vertices[i].x, vertices[i].y);\r\n            }\r\n            ctx.closePath();\r\n            ctx.fill();\r\n\r\n            // Draw pentagon outline\r\n            ctx.strokeStyle = \"#3976cc\";\r\n            ctx.beginPath();\r\n            ctx.moveTo(vertices[0].x, vertices[0].y);\r\n            for (let i = 1; i < vertices.length; i++) {\r\n              ctx.lineTo(vertices[i].x, vertices[i].y);\r\n            }\r\n            ctx.closePath();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n\r\n            // Rotate context back to original position (if needed)\r\n            ctx.rotate(-item.angle * pi180);\r\n\r\n            // Draw health bar if health is less than 100%\r\n            if (item.health < item.maxhealth) {\r\n              ctx.fillStyle = \"black\";\r\n              ctx.beginPath();\r\n              ctx.roundRect(\r\n                centerX - 60,\r\n                centerY + (35 + (item.size - 50)),\r\n                120 + (item.size - 50),\r\n                10,\r\n                5\r\n              );\r\n              ctx.fill();\r\n              ctx.closePath();\r\n              const healthWidth =\r\n                (item.health / item.maxhealth) * (120 + (item.size - 50));\r\n              ctx.fillStyle = \"green\";\r\n              ctx.beginPath();\r\n              ctx.roundRect(\r\n                centerX - 60,\r\n                centerY + (35 + (item.size - 50)),\r\n                healthWidth,\r\n                10,\r\n                5\r\n              );\r\n              ctx.fill();\r\n              ctx.closePath();\r\n            }\r\n          }\r\n\r\n          if (/octagon/.test(item.type)) {\r\n            var realcolor =\r\n              item.type.replace(\"octagon\", \"\") === teamOn\r\n                ? \"#b3ffff\"\r\n                : \"#A0DDFA\";\r\n            ctx.fillStyle = realcolor;\r\n\r\n            const centerX = 0;\r\n            const centerY = 0;\r\n            const radius = item.size * FOV;\r\n            const angle = item.angle * pi180; // Convert angle to radians\r\n            vertices = [];\r\n\r\n            for (let i = 0; i < 8; i++) {\r\n              const theta = (i * 2 * Math.PI) / 8 + angle; // Divide circle into 8 parts and add rotation angle\r\n              const x = centerX + radius * Math.cos(theta);\r\n              const y = centerY + radius * Math.sin(theta);\r\n              vertices.push({ x, y });\r\n            }\r\n            // Draw filled pentagon\r\n            ctx.beginPath();\r\n            ctx.moveTo(vertices[0].x, vertices[0].y);\r\n            for (let i = 1; i < vertices.length; i++) {\r\n              ctx.lineTo(vertices[i].x, vertices[i].y);\r\n            }\r\n            ctx.closePath();\r\n            ctx.fill();\r\n\r\n            // Draw pentagon outline\r\n            ctx.strokeStyle =\r\n              item.type.replace(\"octagon\", \"\") === teamOn\r\n                ? \"#b1fcfc\"\r\n                : \"#98D6F4\";\r\n            ctx.beginPath();\r\n            ctx.moveTo(vertices[0].x, vertices[0].y);\r\n            for (let i = 1; i < vertices.length; i++) {\r\n              ctx.lineTo(vertices[i].x, vertices[i].y);\r\n            }\r\n            ctx.closePath();\r\n            ctx.lineWidth = 25;\r\n            ctx.stroke();\r\n\r\n            // Rotate context back to original position (if needed)\r\n            ctx.rotate(-item.angle * pi180);\r\n\r\n            // Draw health bar if health is less than 100%\r\n            if (item.health < item.maxhealth) {\r\n              ctx.fillStyle = \"black\";\r\n              ctx.beginPath();\r\n              ctx.roundRect(\r\n                centerX - 60,\r\n                centerY + (35 + (item.size - 50)),\r\n                120 + (item.size - 50),\r\n                10,\r\n                5\r\n              );\r\n              ctx.fill();\r\n              ctx.closePath();\r\n              const healthWidth =\r\n                (item.health / item.maxhealth) * (120 + (item.size - 50));\r\n              ctx.fillStyle = \"green\";\r\n              ctx.beginPath();\r\n              ctx.roundRect(\r\n                centerX - 60,\r\n                centerY + (35 + (item.size - 50)),\r\n                healthWidth,\r\n                10,\r\n                5\r\n              );\r\n              ctx.fill();\r\n              ctx.closePath();\r\n            }\r\n          }\r\n          ctx.restore();\r\n\r\n          if (item.type === \"square:boss\") {\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            var boss = bosses.find((boss_) => boss_.id === item.randomID);\r\n            boss =\r\n              boss === undefined\r\n                ? {\r\n                    id: 0,\r\n                    cannons: [\r\n                      { cannonW: 0 },\r\n                      { cannonW: 0 },\r\n                      { cannonW: 0 },\r\n                      { cannonW: 0 },\r\n                    ],\r\n                  }\r\n                : boss;\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n              ctx.fillStyle = \"#b3b3b3\";\r\n              let angle = item.angle * (pi / 180);\r\n\r\n              let angle_offset = i * (90 * (pi / 180));\r\n\r\n              ctx.rotate(angle + angle_offset);\r\n              var xplus = item.size / 2 - 60;\r\n\r\n              // Draw the square\r\n              const cannonWidth_bottom = 30 * 1 * FOV;\r\n              let cannon_heightFOV = 70;\r\n              let t = i + 1 < boss.cannons.length ? i + 1 : 0;\r\n              let basex =\r\n                cannonWidth_bottom / 2 +\r\n                cannon_heightFOV +\r\n                xplus -\r\n                boss.cannons[t].cannonW;\r\n              let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2;\r\n\r\n              const cannonHeight = cannon_heightFOV;\r\n              const cannonWidth_top = 80 * 1 * FOV;\r\n\r\n              var canwB2 = cannonWidth_bottom / 2;\r\n              var canwH2 = cannonWidth_top / 2;\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.fill();\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.stroke(); // Draw the border\r\n\r\n              ctx.rotate(-(angle + angle_offset));\r\n            }\r\n            ctx.restore();\r\n\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(item.angle * pi180);\r\n            ctx.fillStyle = item.color;\r\n            ctx.fillRect(\r\n              -item.size / 2,\r\n              -item.size / 2,\r\n              item.size * FOV,\r\n              item.size * FOV\r\n            );\r\n            ctx.strokeStyle = \"GoldenRod\";\r\n            ctx.lineWidth = 5;\r\n            ctx.strokeRect(\r\n              -item.size / 2,\r\n              -item.size / 2,\r\n              item.size * FOV,\r\n              item.size * FOV\r\n            );\r\n\r\n            ctx.rotate(-item.angle * pi180);\r\n            if (item.health < item.maxhealth) {\r\n              drawbar(item);\r\n            }\r\n            ctx.restore();\r\n          }\r\n\r\n          if (item.type === \"triangle:boss\") {\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            var boss = bosses.find((boss_) => boss_.id === item.randomID);\r\n            boss =\r\n              boss === undefined\r\n                ? {\r\n                    id: 0,\r\n                    cannons: [{ cannonW: 0 }],\r\n                  }\r\n                : boss;\r\n\r\n            ctx.fillStyle = \"#b3b3b3\";\r\n\r\n            let angle = item.angle * (pi / 180);\r\n\r\n            let angle_offset = pi;\r\n\r\n            ctx.rotate(angle + angle_offset);\r\n            var xplus = item.size / 2 - 120;\r\n\r\n            // Draw the square\r\n            const cannonWidth_bottom = 30 * 1 * FOV;\r\n            let cannon_heightFOV = 70;\r\n            let basex =\r\n              cannonWidth_bottom / 2 +\r\n              cannon_heightFOV +\r\n              xplus -\r\n              boss.cannons[0].cannonW;\r\n            let basey = -cannon_heightFOV / 2 + cannon_heightFOV / 2;\r\n\r\n            const cannonHeight = cannon_heightFOV;\r\n            const cannonWidth_top = 80 * 1 * FOV;\r\n\r\n            var canwB2 = cannonWidth_bottom / 2;\r\n            var canwH2 = cannonWidth_top / 2;\r\n            ctx.beginPath();\r\n            ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n            ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n            ctx.lineTo(basex, basey + canwH2);\r\n            ctx.lineTo(basex, basey - canwH2);\r\n            ctx.closePath(); // Close the path\r\n            ctx.fill();\r\n\r\n            // Add a border to the cannon\r\n            ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n            ctx.lineWidth = 3; // Set border width\r\n            ctx.beginPath();\r\n            ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n            ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n            ctx.lineTo(basex, basey + canwH2);\r\n            ctx.lineTo(basex, basey - canwH2);\r\n            ctx.closePath(); // Close the path\r\n            ctx.stroke(); // Draw the border\r\n\r\n            ctx.rotate(-(angle + angle_offset));\r\n\r\n            ctx.restore();\r\n\r\n            ctx.save(); // Save the current transformation state\r\n\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(item.angle * pi180 + 90 * pi180);\r\n            ctx.fillStyle = item.color;\r\n\r\n            let realitemsize = item.size;\r\n            const h = (realitemsize * Math.sqrt(3)) / 2; // Equilateral triangle height\r\n\r\n            ctx.beginPath();\r\n\r\n            ctx.moveTo(-realitemsize / 2, h / 3);\r\n            ctx.lineTo(realitemsize / 2, h / 3);\r\n            ctx.lineTo(0, (-2 * h) / 3);\r\n            ctx.closePath();\r\n\r\n            ctx.fill();\r\n            ctx.strokeStyle = \"#ff66f7\";\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.rotate(-item.angle * pi180 - 90 * pi180);\r\n\r\n            if (item.health < item.maxhealth) {\r\n              drawbar(item);\r\n            }\r\n            ctx.restore();\r\n          }\r\n          ctx.globalAlpha = 1;\r\n        }\r\n      });\r\n      ctx.lineJoin = \"miter\";\r\n\r\n      let unZbullets = [];\r\n\r\n      roads.forEach((road) => {\r\n        if (true) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(road[2].road.x - cavansX, road[2].road.y - cavansY);\r\n          let sameTeam =\r\n            players[road[2].road.id].team === players[playerId].team &&\r\n            players[road[2].road.id].team !== null &&\r\n            players[playerId].team !== null;\r\n          if (road[2].road.id === playerId || sameTeam) {\r\n            ctx.fillStyle = \"#3999f9\";\r\n            ctx.strokeStyle = \"#5f79f5\";\r\n          }\r\n          road.forEach((mapMark) => {\r\n            ctx.lineTo(mapMark.road.x - cavansX, mapMark.road.y - cavansY);\r\n          });\r\n          ctx.globalAlpha = 0.8;\r\n          ctx.stroke();\r\n          ctx.globalAlpha = 0.3;\r\n          ctx.fill();\r\n          ctx.closePath();\r\n          ctx.globalAlpha = 1;\r\n        }\r\n      });\r\n\r\n      bullets.forEach((bullet) => {\r\n        var realstartx = bullet.xstart - (bullet.xstart - cavansX);\r\n        var realstarty = bullet.ystart - (bullet.ystart - cavansY);\r\n        var realx = bullet.x;\r\n        var realy = bullet.y;\r\n        if (\r\n          realx + bullet.size > cavansX &&\r\n          realx - bullet.size < canvas.width + cavansX &&\r\n          realy + bullet.size > cavansY &&\r\n          realy - bullet.size < canvas.height + cavansY\r\n        ) {\r\n          if (bullet.Zlevel !== 3) {\r\n            unZbullets.push(bullet);\r\n            return;\r\n          }\r\n          if (bullet.transparency) {\r\n            ctx.globalAlpha = bullet.transparency;\r\n          }\r\n          ctx.beginPath();\r\n\r\n          if (bullet.type === \"basic\") {\r\n            var sameTeam =\r\n              players[bullet.id]?.team === players[playerId]?.team &&\r\n              players[bullet.id]?.team !== null &&\r\n              players[playerId]?.team !== null;\r\n\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let realsize = bullet.size;\r\n\r\n            ctx.arc(\r\n              realx - realstartx,\r\n              realy - realstarty,\r\n              realsize,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n          ctx.globalAlpha = 1;\r\n        }\r\n      });\r\n\r\n      unZbullets.forEach((bullet) => {\r\n        var realx = bullet.x;\r\n        var realy = bullet.y;\r\n\r\n        if (\r\n          realx + bullet.size > cavansX &&\r\n          realx - bullet.size < canvas.width + cavansX &&\r\n          realy + bullet.size > cavansY &&\r\n          realy - bullet.size < canvas.height + cavansY\r\n        ) {\r\n          if (bullet.Zlevel === 2 && bullet.id === playerId) {\r\n            zlevelbullets.push(bullet);\r\n            return;\r\n          }\r\n          if (bullet.transparency) {\r\n            ctx.globalAlpha = bullet.transparency;\r\n          }\r\n          ctx.beginPath();\r\n\r\n          if (bullet.type === \"basic\" || bullet.type === \"sheild\") {\r\n            if (bullet.type !== \"sheild\") {\r\n              var sameTeam =\r\n                players[bullet.id]?.team === players[playerId]?.team &&\r\n                players[bullet.id]?.team !== null &&\r\n                players[playerId]?.team !== null;\r\n            } else {\r\n              ctx.globalCompositeOperation = \"destination-over\";\r\n              var sameTeam = bullet.teamID === teamOn;\r\n            }\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let realsize = bullet.size;\r\n\r\n            ctx.arc(\r\n              realx - (bullet.xstart - (bullet.xstart - cavansX)),\r\n              realy - (bullet.ystart - (bullet.ystart - cavansY)),\r\n              realsize,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            ctx.globalCompositeOperation = \"source-over\";\r\n          } else if (bullet.type === \"FreeNecromancer\") {\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(bullet.angle);\r\n            ctx.fillStyle = \"#f2c705\";\r\n            ctx.fillRect(\r\n              -bullet.size / 2,\r\n              -bullet.size / 2,\r\n              bullet.size,\r\n              bullet.size\r\n            );\r\n            ctx.strokeStyle = \"#e0b700\";\r\n            ctx.lineWidth = 5;\r\n            ctx.strokeRect(\r\n              -bullet.size / 2,\r\n              -bullet.size / 2,\r\n              bullet.size,\r\n              bullet.size\r\n            );\r\n            ctx.restore();\r\n          } else if (bullet.type === \"trap\") {\r\n            var sameTeam =\r\n              players[bullet.id].team === players[playerId].team &&\r\n              players[bullet.id].team !== null &&\r\n              players[playerId].team !== null;\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let vertices = bullet.vertices;\r\n\r\n            let x1 =\r\n              vertices[2].x - (bullet.xstart - (bullet.xstart - cavansX));\r\n            let y1 =\r\n              vertices[2].y - (bullet.ystart - (bullet.ystart - cavansY)); // Top point\r\n            let x2 =\r\n              vertices[1].x - (bullet.xstart - (bullet.xstart - cavansX));\r\n            let y2 =\r\n              vertices[1].y - (bullet.ystart - (bullet.ystart - cavansY)); // Bottom-left point\r\n            let x3 =\r\n              vertices[0].x - (bullet.xstart - (bullet.xstart - cavansX));\r\n            let y3 =\r\n              vertices[0].y - (bullet.ystart - (bullet.ystart - cavansY)); // Bottom-right point\r\n\r\n            const controlOffset = 5;\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n\r\n            const controlPoint1 = { x: (x1 + x3) / 2, y: (y1 + y3) / 2 };\r\n\r\n            // Control point for curve from bottom-left to bottom-right\r\n            const controlPoint2 = {\r\n              x: (x2 + x1) / 2,\r\n              y: (y2 + y3) / 2 + controlOffset,\r\n            };\r\n\r\n            // Control point for curve from bottom-right to top\r\n            const controlPoint3 = {\r\n              x: (x1 + x3) / 2 + controlOffset,\r\n              y: (y1 + y3) / 2,\r\n            };\r\n\r\n            // Draw the curved edge from top to bottom-left\r\n\r\n            ctx.quadraticCurveTo(controlPoint1.x, controlPoint1.y, x2, y2);\r\n\r\n            // Draw the curved edge from bottom-left to bottom-right\r\n            ctx.quadraticCurveTo(controlPoint2.x, controlPoint2.y, x3, y3);\r\n\r\n            // Draw the curved edge from bottom-right to top\r\n            ctx.quadraticCurveTo(controlPoint3.x, controlPoint3.y, x1, y1);\r\n\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          } else if (bullet.type === \"directer\") {\r\n            var sameTeam =\r\n              players[bullet.id].team === players[playerId].team &&\r\n              players[bullet.id].team !== null &&\r\n              players[playerId].team !== null;\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(bullet.angle + 90 * (pi / 180));\r\n            let realitemsize = bullet.size * 3 * FOV;\r\n            const h = realitemsize * sqrt23;\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, -h / 2);\r\n            ctx.lineTo(-realitemsize / 2, h / 2);\r\n            ctx.lineTo(realitemsize / 2, h / 2);\r\n            ctx.closePath();\r\n\r\n            ctx.fill();\r\n            ctx.stroke();\r\n          } else if (bullet.type === \"roadMap\") {\r\n            var sameTeam =\r\n              players[bullet.id].team === players[playerId].team &&\r\n              players[bullet.id].team !== null &&\r\n              players[playerId].team !== null;\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            for (let i = 0; i < 2; i++) {\r\n              ctx.rotate(bullet.angle + i * 180 * (pi / 180));\r\n              //ctx.rotate(i * 90 * pi / 180)\r\n              let realitemsize = bullet.size * 3 * FOV;\r\n              const h = realitemsize * sqrt23;\r\n\r\n              ctx.beginPath();\r\n              ctx.moveTo(0, -h / 2);\r\n              ctx.lineTo(-realitemsize / 2, h / 2);\r\n              ctx.lineTo(realitemsize / 2, h / 2);\r\n              ctx.closePath();\r\n\r\n              ctx.fill();\r\n              ctx.stroke();\r\n            }\r\n          } else if (bullet.type === \"FreeSwarm\") {\r\n            ctx.fillStyle = \"#ff7df8\";\r\n            ctx.strokeStyle = \"#ff66f7\";\r\n\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(bullet.angle);\r\n            let realitemsize = bullet.size * 3 * FOV;\r\n            const h = realitemsize * sqrt23;\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, -h / 2);\r\n            ctx.lineTo(-realitemsize / 2, h / 2);\r\n            ctx.lineTo(realitemsize / 2, h / 2);\r\n            ctx.closePath();\r\n\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n          } else if (bullet.type === \"AutoBullet\") {\r\n            var sameTeam =\r\n              players[bullet.id].team === players[playerId].team &&\r\n              players[bullet.id].team !== null &&\r\n              players[playerId].team !== null;\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let realsize = bullet.size * FOV;\r\n\r\n            ctx.arc(\r\n              realx - (bullet.xstart - (bullet.xstart - cavansX)),\r\n              realy - (bullet.ystart - (bullet.ystart - cavansY)),\r\n              realsize,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            let autoCAN_ = null;\r\n            autocannons.forEach((can) => {\r\n              if (can.playerid === bullet.uniqueid) {\r\n                autoCAN_ = can;\r\n              }\r\n            });\r\n            ctx.save();\r\n            ctx.translate(\r\n              realx - (bullet.xstart - (bullet.xstart - cavansX)),\r\n              realy - (bullet.ystart - (bullet.ystart - cavansY))\r\n            );\r\n            var cannon_widthFOV = bullet.size / 2;\r\n            var cannon_heightFOV = bullet.size / 2;\r\n            ctx.rotate(autoCAN_.angle);\r\n            let basex = -cannon_widthFOV / 2 + cannon_heightFOV - cannonWidth;\r\n            let basey = -cannon_heightFOV / 2;\r\n\r\n            ctx.fillStyle = \"#b3b3b3\";\r\n            ctx.fillRect(\r\n              basex,\r\n              basey - 5,\r\n              cannon_widthFOV + 15,\r\n              cannon_heightFOV + 10\r\n            );\r\n\r\n            ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n            ctx.lineWidth = 3; // Set border width\r\n            ctx.strokeRect(\r\n              basex,\r\n              basey - 5,\r\n              cannon_widthFOV + 15,\r\n              cannon_heightFOV + 10\r\n            ); // Draw the border\r\n            // Restore the previous transformation matrix\r\n            ctx.rotate(-autoCAN_.angle);\r\n            ctx.closePath();\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, cannon_widthFOV / 2 + 7, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          } else if (bullet.type === \"rocketer\") {\r\n            ctx.save();\r\n            ctx.translate(realx - cavansX, realy - cavansY);\r\n            ctx.rotate(bullet.angle);\r\n            let cannwidthtop =\r\n              tankmeta[players[bullet.id].__type__][\"cannons\"][\r\n                bullet.parentindex\r\n              ][\"cannon-width-top\"] / 1.7;\r\n            let cannwidthbottom =\r\n              tankmeta[players[bullet.id].__type__][\"cannons\"][\r\n                bullet.parentindex\r\n              ][\"cannon-width-bottom\"] / 1.7;\r\n            const cannonWidth_top = cannwidthtop;\r\n            const cannonWidth_bottom = cannwidthbottom;\r\n\r\n            ctx.fillStyle = \"#b3b3b3\";\r\n            var canwB2 = cannonWidth_bottom / 2;\r\n            var canwH2 = cannonWidth_top / 2;\r\n            ctx.beginPath();\r\n            ctx.moveTo(0 - cannonWidth_top, 0 - canwB2); // Move to the top-left corner\r\n            ctx.lineTo(0 - cannonWidth_top, 0 + canwB2); // Draw to the bottom-left corner\r\n            ctx.lineTo(0, 0 + canwH2);\r\n            ctx.lineTo(0, 0 - canwH2);\r\n            ctx.closePath(); // Close the path\r\n            ctx.fill();\r\n\r\n            // Add a border to the cannon\r\n            ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n            ctx.lineWidth = 3; // Set border width\r\n            ctx.beginPath();\r\n            ctx.moveTo(0 - cannonWidth_top, 0 - canwB2); // Move to the top-left corner\r\n            ctx.lineTo(0 - cannonWidth_top, 0 + canwB2); // Draw to the bottom-left corner\r\n            ctx.lineTo(0, 0 + canwH2);\r\n            ctx.lineTo(0, 0 - canwH2);\r\n            ctx.closePath(); // Close the path\r\n            ctx.stroke();\r\n            ctx.restore();\r\n            var sameTeam =\r\n              players[bullet.id].team === players[playerId].team &&\r\n              players[bullet.id].team !== null &&\r\n              players[playerId].team !== null;\r\n            if (bullet.id === playerId || sameTeam) {\r\n              ctx.fillStyle = \"blue\";\r\n              ctx.strokeStyle = \"darkblue\";\r\n            } else {\r\n              ctx.fillStyle = \"red\";\r\n              ctx.strokeStyle = \"darkred\";\r\n            }\r\n            let realsize = bullet.size * FOV;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n              realx - (bullet.xstart - (bullet.xstart - cavansX)),\r\n              realy - (bullet.ystart - (bullet.ystart - cavansY)),\r\n              realsize,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            ctx.fill();\r\n            ctx.lineWidth = 5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n          ctx.restore();\r\n          ctx.globalAlpha = 1;\r\n        }\r\n      });\r\n\r\n      for (const playerId__ in players) {\r\n        if (players.hasOwnProperty(playerId__) && playerId__ != playerId) {\r\n          let player = players[playerId__];\r\n\r\n          let tankdata = tankmeta[player.__type__];\r\n\r\n          let tankdatacannon = tankdata[\"cannons\"];\r\n\r\n          let playerX = player.x;\r\n          let playerY = player.y;\r\n\r\n          let FOVplayerz = player.size;\r\n\r\n          if (tankdata.decor) {\r\n            tankdata.decor.forEach((decor_) => {\r\n              if (decor_.type === \"octaspinner\") {\r\n                ctx.fillStyle = \"black\";\r\n                ctx.save();\r\n                ctx.translate(\r\n                  playerX - cavansX + decor_.offsetX,\r\n                  playerY - cavansY + decor_.offsetY\r\n                );\r\n                let angle = player.cannon_angle;\r\n                ctx.rotate(angle + decor_.offsetAngle);\r\n\r\n                ctx.beginPath();\r\n                for (let i = 0; i < 8; i++) {\r\n                  // calculate the rotation\r\n                  const rotation = ((Math.PI * 2) / 8) * i;\r\n\r\n                  // for the first point move to\r\n                  if (i === 0) {\r\n                    ctx.moveTo(\r\n                      decor_.size * Math.cos(rotation),\r\n                      decor_.size * Math.sin(rotation)\r\n                    );\r\n                  } else {\r\n                    // for the rest draw a line\r\n                    ctx.lineTo(\r\n                      decor_.size * Math.cos(rotation),\r\n                      decor_.size * Math.sin(rotation)\r\n                    );\r\n                  }\r\n                }\r\n\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                ctx.restore();\r\n              }\r\n            });\r\n          }\r\n\r\n          let gradient = ctx.createRadialGradient(\r\n            playerX - cavansX,\r\n            playerY - cavansY,\r\n            (playerSize * playerBaseSize) / 1.5,\r\n            playerX - cavansX,\r\n            playerY - cavansY,\r\n            radiusConfig.radius\r\n          );\r\n\r\n          gradient.addColorStop(radiusConfig.build[0], \"#FFFFFF00\");\r\n          if (sameTeam) {\r\n            gradient.addColorStop(radiusConfig.build[1], \"#61f7ff\");\r\n          } else {\r\n            gradient.addColorStop(radiusConfig.build[1], \"#ff2121\");\r\n          }\r\n\r\n          gradient.addColorStop(radiusConfig.build[2], \"#FFFFFF00\");\r\n\r\n          ctx.beginPath();\r\n          ctx.arc(\r\n            playerX - cavansX,\r\n            playerY - cavansY,\r\n            radiusConfig.radius,\r\n            0,\r\n            2 * Math.PI,\r\n            false\r\n          );\r\n          ctx.fillStyle = gradient;\r\n          ctx.fill();\r\n\r\n          ctx.closePath();\r\n\r\n          for (let i = 0; i < Object.keys(tankdatacannon).length; i++) {\r\n            ctx.fillStyle = \"#b3b3b3\";\r\n            let tankdatacannondata = tankdatacannon[i];\r\n\r\n            let cannon_widthFOV =\r\n              tankdatacannondata[\"cannon-width\"] * FOVplayerz;\r\n            let cannon_heightFOV =\r\n              tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n            if (tankdatacannondata[\"type\"] === \"basicCannon\") {\r\n              ctx.save();\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let angle = player.cannon_angle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n              let basex =\r\n                -cannon_widthFOV / 2 +\r\n                cannon_heightFOV +\r\n                tankdatacannondata[\"offSet-x\"] -\r\n                player.cannonW[i];\r\n              let basey =\r\n                -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n              ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n              // Restore the previous transformation matrix\r\n              ctx.restore();\r\n            } else if (\r\n              tankdatacannondata[\"type\"] === \"trapezoid\" ||\r\n              tankdatacannondata[\"type\"] === \"directer\"\r\n            ) {\r\n              ctx.save();\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let angle = player.cannon_angle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n              const cannonWidth_bottom =\r\n                tankdatacannondata[\"cannon-width-bottom\"] * player.size * FOV;\r\n\r\n              let basex =\r\n                cannonWidth_bottom / 2 +\r\n                cannon_heightFOV +\r\n                tankdatacannondata[\"offSet-x\"] -\r\n                player.cannonW[i];\r\n              let basey =\r\n                -cannon_heightFOV / 2 +\r\n                cannon_heightFOV / 2 -\r\n                tankdatacannondata[\"offSet-y\"];\r\n\r\n              const cannonHeight = cannon_heightFOV;\r\n              const cannonWidth_top =\r\n                tankdatacannondata[\"cannon-width-top\"] * player.size * FOV;\r\n\r\n              var canwB2 = cannonWidth_bottom / 2;\r\n              var canwH2 = cannonWidth_top / 2;\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.fill();\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.stroke(); // Draw the border\r\n              ctx.restore();\r\n            } else if (\r\n              tankdatacannondata[\"type\"] === \"trap\" ||\r\n              tankdatacannondata[\"type\"] === \"paver\"\r\n            ) {\r\n              let cannonheight = tankdatacannondata[\"cannon-height\"];\r\n              ctx.save();\r\n\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let angle = player.cannon_angle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              let trapR = tankdatacannondata[\"trap-to-cannon-ratio\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n              let basex =\r\n                -cannon_widthFOV / 2 +\r\n                cannonheight +\r\n                tankdatacannondata[\"offSet-x\"] -\r\n                player.cannonW[i];\r\n              let reH = cannon_widthFOV * (1 - trapR);\r\n              let basey =\r\n                -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n              ctx.fillRect(\r\n                basex,\r\n                basey,\r\n                cannon_widthFOV - reH,\r\n                cannon_heightFOV\r\n              );\r\n              // Add a border to the cannon\r\n\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(\r\n                basex,\r\n                basey,\r\n                cannon_widthFOV - reH,\r\n                cannon_heightFOV\r\n              );\r\n              // Restore the previous transformation matrix\r\n              const cannonHeight = reH;\r\n              const cannonWidth_top = cannon_heightFOV * 1.4;\r\n              const cannonWidth_bottom = cannon_heightFOV;\r\n\r\n              basex = basex + (cannon_widthFOV - trapR);\r\n\r\n              var canwB2 = cannonWidth_bottom / 2;\r\n              var canwH2 = cannonWidth_top / 2;\r\n              basey += canwB2;\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.fill();\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.stroke(); // Draw the border\r\n              ctx.restore();\r\n              if (tankdatacannondata[\"type\"] === \"paver\") {\r\n                cannon_widthFOV /= 2;\r\n                cannon_heightFOV /= 2;\r\n                ctx.save();\r\n                ctx.translate(playerX - cavansX, playerY - cavansY);\r\n                let angle = player.cannon_angle;\r\n\r\n                let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n                ctx.rotate(angle + angle_offset);\r\n                // Draw the square\r\n                let basex =\r\n                  -cannon_widthFOV / 2 +\r\n                  cannon_heightFOV +\r\n                  tankdatacannondata[\"offSet-x\"] -\r\n                  player.cannonW[i];\r\n                let basey =\r\n                  -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n                ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n\r\n                // Add a border to the cannon\r\n                ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n                ctx.lineWidth = 3; // Set border width\r\n                ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n                // Restore the previous transformation matrix\r\n                ctx.restore();\r\n              }\r\n            } else if (tankdatacannondata[\"type\"] === \"AutoBulletCannon\") {\r\n              ctx.save();\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let angle = player.cannon_angle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n\r\n              let basex =\r\n                -cannon_widthFOV / 2 +\r\n                cannon_heightFOV +\r\n                tankdatacannondata[\"offSet-x\"] -\r\n                player.cannonW[i];\r\n              let basey =\r\n                -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n              ctx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n\r\n              ctx.beginPath();\r\n              ctx.arc(\r\n                basex + 40 + cannon_widthFOV / 4,\r\n                basey + cannon_heightFOV / 2,\r\n                (playerSize * FOV * playerBaseSize) / 4,\r\n                0,\r\n                2 * Math.PI,\r\n                false\r\n              );\r\n              ctx.fill();\r\n              ctx.lineWidth = 5;\r\n              ctx.strokeStyle = \"lightgrey\";\r\n              ctx.stroke();\r\n              ctx.closePath();\r\n              ctx.restore();\r\n            } else if (tankdatacannondata[\"type\"] === \"rocketer\") {\r\n              ctx.save();\r\n              // Translate to the center of the square\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let tankdatacannondata = tankdatacannon[i];\r\n              var angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              let angle = player.cannon_angle;\r\n              ctx.rotate(angle + angle_offset);\r\n              let cannwidthtop =\r\n                tankdatacannondata[\"cannon-width-top\"] * FOVplayerz;\r\n              let cannwidthbottom =\r\n                tankdatacannondata[\"cannon-width-bottom\"] * FOVplayerz;\r\n              let cannonHeight =\r\n                tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n              // Draw the square\r\n              let basex =\r\n                cannwidthbottom / 2 +\r\n                cannon_heightFOV +\r\n                tankdatacannondata[\"offSet-x\"] -\r\n                player.cannonW[i];\r\n              let basey =\r\n                -cannon_heightFOV / 2 +\r\n                cannon_heightFOV / 2 +\r\n                tankdatacannondata[\"offSet-y\"];\r\n\r\n              const cannonWidth_top = cannwidthtop;\r\n              const cannonWidth_bottom = cannwidthbottom;\r\n\r\n              var canwB2 = cannonWidth_bottom / 2;\r\n              var canwH2 = cannonWidth_top / 2;\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.fill();\r\n\r\n              // Add a border to the cannon\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.beginPath();\r\n              ctx.moveTo(basex - cannonHeight, basey - canwB2); // Move to the top-left corner\r\n              ctx.lineTo(basex - cannonHeight, basey + canwB2); // Draw to the bottom-left corner\r\n              ctx.lineTo(basex, basey + canwH2);\r\n              ctx.lineTo(basex, basey - canwH2);\r\n              ctx.closePath(); // Close the path\r\n              ctx.stroke();\r\n\r\n              ctx.fillRect(\r\n                cannon_heightFOV +\r\n                  (cannon_heightFOV - 25) * (1 + (1 - player.size)),\r\n                basey - canwH2,\r\n                cannon_heightFOV - 40,\r\n                cannwidthtop\r\n              );\r\n\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(\r\n                cannon_heightFOV +\r\n                  (cannon_heightFOV - 25) * (1 + (1 - player.size)),\r\n                basey - canwH2,\r\n                cannon_heightFOV - 40,\r\n                cannwidthtop\r\n              );\r\n\r\n              ctx.restore();\r\n            }\r\n          }\r\n\r\n          ctx.beginPath();\r\n\r\n          ctx.arc(\r\n            playerX - cavansX,\r\n            playerY - cavansY,\r\n            player.size * playerBaseSize,\r\n            0,\r\n            2 * Math.PI,\r\n            false\r\n          );\r\n\r\n          var sameTeam =\r\n            players[player.id].team === players[playerId].team &&\r\n            players[player.id].team !== null &&\r\n            players[playerId].team !== null;\r\n          if (player.state === \"start\" || player.state === \"damaged\") {\r\n            let backwardsObj = { 1: 4, 2: 3, 3: 2, 4: 1, 5: 0.1 };\r\n            let percentage =\r\n              player.statecycle % 10 <= 5\r\n                ? player.statecycle % 10\r\n                : backwardsObj[(player.statecycle % 10) - 5];\r\n            percentage /= 10;\r\n            let newrgb2 = mix([130, 130, 130], [255, 255, 255], percentage);\r\n            ctx.fillStyle = `rgb(${newrgb2[0]} ${newrgb2[1]} ${newrgb2[2]})`;\r\n          } else {\r\n            ctx.fillStyle = \"#828282\";\r\n            ctx.strokeStyle = \"#aaaaaa\";\r\n          }\r\n          ctx.fill();\r\n          ctx.lineWidth = 5;\r\n\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n\r\n          if (player.skin !== \"0.webp\") {\r\n            ctx.save();\r\n            ctx.translate(playerX - cavansX, playerY - cavansY);\r\n            ctx.rotate(player.cannon_angle);\r\n            ctx.drawImage(\r\n              inverted[player.skin],\r\n              0 - player.size * playerBaseSize,\r\n              0 - player.size * playerBaseSize,\r\n              playerBaseSize * 2,\r\n              playerBaseSize * 2\r\n            );\r\n            ctx.restore();\r\n          }\r\n\r\n          // Draw background bar\r\n          let mymessages = [];\r\n          playerMessages.forEach((massege) => {\r\n            if (massege.id === player.id) {\r\n              mymessages.push(massege);\r\n            }\r\n          });\r\n          if (canSeeChat) {\r\n            mymessages.forEach((message) => {\r\n              ctx.save();\r\n              if (message.hidetime < Date.now()) {\r\n                if (1 > 1 - (Date.now() - message.hidetime) / 500) {\r\n                  ctx.globalAlpha = 1 - (Date.now() - message.hidetime) / 500;\r\n                }\r\n              }\r\n              ctx.translate(\r\n                playerX - cavansX,\r\n                playerY -\r\n                  cavansY -\r\n                  player.size * 40 -\r\n                  30 * mymessages.length -\r\n                  25\r\n              );\r\n              ctx.fillStyle = \"black\";\r\n              ctx.textAlign = \"center\";\r\n              ctx.font = `bold ${21 * upscaleX}px Nunito`;\r\n              ctx.fillText(message.text, 0, 0);\r\n              ctx.globalAlpha = 1;\r\n              ctx.restore();\r\n            });\r\n          }\r\n          ctx.beginPath();\r\n          ctx.fillStyle = \"black\";\r\n          ctx.roundRect(\r\n            playerX - cavansX - 50 * FOV,\r\n            playerY - cavansY + 55 * FOV,\r\n            90 * FOV,\r\n            10 * player.size * FOV,\r\n            (10 * player.size) / 2\r\n          );\r\n          ctx.fill();\r\n          ctx.closePath();\r\n\r\n          // Draw health bar\r\n          ctx.beginPath();\r\n          const healthWidth =\r\n            (player.health / player.maxhealth) * 90 * player.size * FOV;\r\n          ctx.fillStyle = \"green\";\r\n          ctx.roundRect(\r\n            playerX - cavansX - 50 * FOV,\r\n            playerY - cavansY + 55 * FOV,\r\n            healthWidth,\r\n            10 * player.size * FOV,\r\n            (10 * player.size) / 2\r\n          );\r\n          ctx.fill();\r\n          ctx.closePath();\r\n          // cannons on top of player\r\n          for (let i = 0; i < Object.keys(tankdatacannon).length; i++) {\r\n            ctx.fillStyle = \"#b3b3b3\";\r\n\r\n            let tankdatacannondata = tankdatacannon[i];\r\n            let cannon_widthFOV =\r\n              tankdatacannondata[\"cannon-width\"] * FOVplayerz;\r\n            let cannon_heightFOV =\r\n              tankdatacannondata[\"cannon-height\"] * FOVplayerz;\r\n            let cannonangle;\r\n            var cannonWidth_;\r\n            autocannons.forEach((cannonA) => {\r\n              if (cannonA.playerid === playerId__ && cannonA.autoindex === i) {\r\n                cannonangle = cannonA.angle;\r\n                cannonWidth_ = cannonA.cannonWidth;\r\n              }\r\n            });\r\n            if (tankdatacannondata[\"type\"] === \"autoCannon\") {\r\n              ctx.save();\r\n              var [x, y] = rotatePointAroundPlayer();\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n              let angle = cannonangle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n\r\n              var offSet_x = tankdatacannondata[\"offSet-x\"];\r\n              if (tankdatacannondata[\"offSet-x\"] === \"playerX\") {\r\n                offSet_x = player.size * 2;\r\n              }\r\n\r\n              let basex = -cannon_widthFOV / 2 + cannon_heightFOV + offSet_x;\r\n              let basey =\r\n                -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n              ctx.beginPath();\r\n              ctx.fillRect(\r\n                basex - 5,\r\n                basey - 2.5,\r\n                cannon_widthFOV + 10 - cannonWidth_,\r\n                cannon_heightFOV + 5\r\n              );\r\n\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(\r\n                basex - 5,\r\n                basey - 2.5,\r\n                cannon_widthFOV + 10 - cannonWidth_,\r\n                cannon_heightFOV + 5\r\n              ); // Draw the border\r\n              // Restore the previous transformation matrix\r\n              ctx.rotate(-(angle + angle_offset));\r\n              ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\r\n\r\n              ctx.fill();\r\n              ctx.stroke();\r\n              ctx.closePath();\r\n              ctx.restore();\r\n            } else if (tankdatacannondata[\"type\"] === \"SwivelAutoCannon\") {\r\n              ctx.save();\r\n              let cannonangle;\r\n              let cannonWidth_;\r\n              autocannons.forEach((cannonA) => {\r\n                if (cannonA.playerid === player.id && cannonA.autoindex === i) {\r\n                  cannonangle = cannonA.angle;\r\n                  cannonWidth_ = cannonA.cannonWidth;\r\n                }\r\n              });\r\n              var offSet_x = tankdatacannondata[\"offSet-x\"];\r\n              if (tankdatacannondata[\"offSet-x\"] === \"playerX\") {\r\n                offSet_x = playerSize * playerBaseSize;\r\n              }\r\n              if (tankdatacannondata[\"offSet-x-multpliyer\"]) {\r\n                offSet_x *= -1;\r\n              }\r\n              let angle0 = getCannonAngle();\r\n              var [x, y] = rotatePointAroundPlayer(\r\n                offSet_x,\r\n                0,\r\n                angle0 * (180 / Math.PI)\r\n              );\r\n\r\n              ctx.translate(playerX - cavansX, playerY - cavansY);\r\n\r\n              let angle = cannonangle;\r\n\r\n              let angle_offset = tankdatacannondata[\"offset-angle\"];\r\n              ctx.rotate(angle + angle_offset);\r\n              // Draw the square\r\n\r\n              let basex = -cannon_widthFOV / 2 + cannon_heightFOV + 0;\r\n              let basey =\r\n                -cannon_heightFOV / 2 + tankdatacannondata[\"offSet-y\"];\r\n\r\n              ctx.beginPath();\r\n              ctx.fillRect(\r\n                basex - 5,\r\n                basey - 2.5,\r\n                cannon_widthFOV + 10 - cannonWidth_,\r\n                cannon_heightFOV + 5\r\n              );\r\n\r\n              ctx.strokeStyle = \"lightgrey\"; // Set border color\r\n              ctx.lineWidth = 3; // Set border width\r\n              ctx.strokeRect(\r\n                basex - 5,\r\n                basey - 2.5,\r\n                cannon_widthFOV + 10 - cannonWidth_,\r\n                cannon_heightFOV + 5\r\n              ); // Draw the border\r\n              // Restore the previous transformation matrix\r\n              ctx.rotate(-(angle + angle_offset));\r\n              ctx.arc(0, 0, cannon_widthFOV / 2, 0, 2 * Math.PI, false);\r\n\r\n              ctx.fill();\r\n              ctx.stroke();\r\n              ctx.closePath();\r\n              ctx.restore();\r\n            }\r\n          }\r\n\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.fillStyle = \"white\";\r\n          ctx.textAlign = \"center\";\r\n          ctx.font = \"bold 20px Nunito\";\r\n          ctx.strokeText(\r\n            player.score,\r\n            playerX - cavansX,\r\n            playerY - cavansY - 55\r\n          );\r\n          ctx.fillText(player.score, playerX - cavansX, playerY - cavansY - 55);\r\n\r\n          if (canSeeNames) {\r\n            ctx.strokeText(\r\n              player.username,\r\n              playerX - cavansX,\r\n              playerY - cavansY - 75\r\n            );\r\n            ctx.fillText(\r\n              player.username,\r\n              playerX - cavansX,\r\n              playerY - cavansY - 75\r\n            );\r\n          }\r\n\r\n          // Draw border\r\n          ctx.lineWidth = 1;\r\n          ctx.strokeStyle = \"grey\";\r\n          ctx.strokeRect(\r\n            playerX - cavansX - 50,\r\n            playerY - cavansY + 55,\r\n            90 * player.size * FOV,\r\n            10 * player.size * FOV\r\n          );\r\n        }\r\n      }\r\n\r\n      ctx.fillStyle = squareColor;\r\n\r\n      if (!dead) {\r\n        drawself(upscaleX, upscaleY);\r\n      }\r\n\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.lineWidth = 5;\r\n      ctx.beginPath();\r\n      ctx.moveTo(mapLeft, mapTop);\r\n      ctx.lineTo(mapRight, mapTop);\r\n      ctx.lineTo(mapRight, mapBottom);\r\n      ctx.lineTo(mapLeft, mapBottom);\r\n      ctx.lineTo(mapLeft, mapTop);\r\n      ctx.stroke();\r\n      gridLightstyle.top = `calc(-${(10000 * scaleFactor) / 2}px - ${\r\n        cavansY * scaleFactor\r\n      }px)`;\r\n      gridLightstyle.left = `calc(-${(10000 * scaleFactor) / 2}px - ${\r\n        cavansX * scaleFactor\r\n      }px)`;\r\n      gridDarkstyle.top = `calc(-${(10000 * scaleFactor) / 2}px - ${\r\n        cavansY * scaleFactor\r\n      }px)`;\r\n      gridDarkstyle.left = `calc(-${(10000 * scaleFactor) / 2}px - ${\r\n        cavansX * scaleFactor\r\n      }px)`;\r\n\r\n      // Call the function to draw the level bar\r\n      drawRoundedLevelBar(\r\n        ctx,\r\n        canvas.width / 2 - barWidth / 2,\r\n        canvas.height - canvas.height * 0.03879728419,\r\n        barWidth,\r\n        barHeight,\r\n        borderRadius,\r\n        progress + 0.05,\r\n        \"black\",\r\n        \"#00f7ff\",\r\n        false,\r\n        true\r\n      );\r\n      let I_ = 0;\r\n      if (upgradePoints > 0) {\r\n        ctx.font = \"26px Nunito\";\r\n        ctx.strokeStyle = \"#89faa7\";\r\n        ctx.strokeText(\r\n          `+${upgradePoints}`,\r\n          20 + (145 * upscaleX) / 2,\r\n          canvas.height - 34 * upscaleY * 9\r\n        );\r\n        ctx.textAlign = \"center\";\r\n        ctx.font = \"bold 25px Nunito\";\r\n        ctx.fillStyle = \"#14fc52\";\r\n        ctx.fillText(\r\n          `+${upgradePoints}`,\r\n          20 + (145 * upscaleX) / 2,\r\n          canvas.height - 34 * upscaleY * 9\r\n        );\r\n      }\r\n\r\n      for (let CCC = Object.keys(statsTree).length - 1; CCC >= 0; CCC -= 1) {\r\n        let stat_ = statsTree[Object.keys(statsTree)[CCC]];\r\n        let stat = Object.keys(statsTree)[CCC];\r\n        let color = colorUpgrades[CCC] || \"red\";\r\n        drawRoundedLevelBar(\r\n          ctx,\r\n          20,\r\n          canvas.height - 34 * upscaleY * I_ - 40,\r\n          145 * upscaleX,\r\n          25 * upscaleY,\r\n          borderRadius,\r\n          stat_ / 8,\r\n          \"black\",\r\n          color,\r\n          \"#242424\",\r\n          false\r\n        );\r\n        ctx.textAlign = \"center\";\r\n        ctx.font = `bold ${15 * (1 + (1 - scaleFactor))}px Nunito`;\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillText(\r\n          `${stat}:${stat_}`,\r\n          20 + (145 * upscaleX) / 2,\r\n          canvas.height - 34 * upscaleY * I_ - 40 + 17.5 * upscaleY\r\n        );\r\n        I_++;\r\n      }\r\n      if (joinedTeam) {\r\n        for (let CCC = Object.keys(statsTree).length - 1; CCC >= 0; CCC -= 1) {\r\n          let MYteam = pubteams.find((team) => {\r\n            return team.teamID === players[playerId].team;\r\n          });\r\n          let stat_ = MYteam.stats[Object.keys(MYteam.stats)[CCC]];\r\n          let stat = Object.keys(MYteam.stats)[CCC];\r\n          let color = teamColorUpgrades[CCC] || \"red\";\r\n          drawRoundedLevelBar(\r\n            ctx,\r\n            20,\r\n            canvas.height - 300 * upscaleY * I_ - 40,\r\n            145 * upscaleX,\r\n            25 * upscaleY,\r\n            borderRadius,\r\n            stat_ / 8,\r\n            \"black\",\r\n            color,\r\n            \"#242424\",\r\n            false\r\n          );\r\n          ctx.textAlign = \"center\";\r\n          ctx.font = `bold ${15 * (1 + (1 - scaleFactor))}px Nunito`;\r\n          ctx.fillStyle = \"white\";\r\n          ctx.fillText(\r\n            `${stat}:${stat_}`,\r\n            20 + (145 * upscaleX) / 2,\r\n            canvas.height - 300 * upscaleY * I_ - 40 + 17.5 * upscaleY\r\n          );\r\n          I_++;\r\n        }\r\n      }\r\n      ctx.font = \"bold 30px Nunito\";\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.strokeText(\"leaderboard\", canvas.width - 125 * upscaleX, 25);\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillStyle = \"#00f7ff\";\r\n      ctx.fillText(\"leaderboard\", canvas.width - 125 * upscaleX, 25);\r\n\r\n      if (canSeeLeaderBoard) {\r\n        leader_board.forEach((entre, i) => {\r\n          var totalwidth;\r\n          if (leader_board[0].score) {\r\n            totalwidth = entre.score / leader_board[0].score;\r\n          }\r\n          if (!leader_board[0].score) {\r\n            totalwidth = 1;\r\n          }\r\n          drawRoundedLevelBar(\r\n            ctx,\r\n            canvas.width - 257.5 * upscaleX,\r\n            50 + i * 30,\r\n            245 * upscaleX,\r\n            27 * upscaleY,\r\n            borderRadius,\r\n            entre.score / leader_board[0].score,\r\n            \"#23badb\",\r\n            \"#4eddfc\",\r\n            \"#242424\",\r\n            false\r\n          );\r\n\r\n          ctx.textAlign = \"center\";\r\n          ctx.font = \"bold 20px Nunito\";\r\n          ctx.fillStyle = \"black\";\r\n          ctx.fillText(\r\n            `${entre.name} ➠ ${entre.score}`,\r\n            canvas.width - 125 * upscaleX,\r\n            72 + i * 30 * upscaleY\r\n          );\r\n          ctx.drawImage(\r\n            badgelevels[entre.badge],\r\n            canvas.width - (40 + 205 * upscaleX) * upscaleX,\r\n            52 + i * 30 * upscaleY,\r\n            button40,\r\n            (40 * upscaleY) / 1.8\r\n          );\r\n        });\r\n      }\r\n\r\n      requestAnimationFrame(draw);\r\n    }\r\n  }\r\n\r\n  async function getBagdeData() {\r\n    const url =\r\n      window.location.href === \"https://tankshark.fun/\"\r\n        ? \"https://websocketpointer.duckdns.org/currentbadge\"\r\n        : \"http://localhost:4500/currentbadge\";\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userId: getCookie(\"userId\") }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n  document.getElementById(\"subfeedback\").addEventListener(\"click\", subfeedback);\r\n\r\n  async function subfeedback() {\r\n    const url =\r\n      window.location.href === \"https://tankshark.fun/\"\r\n        ? \"https://websocketpointer.duckdns.org/submit-feedback\"\r\n        : \"http://localhost:4500/submit-feedback\";\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: document.getElementById(\"namesub\").value,\r\n          message: document.getElementById(\"feedback\").value,\r\n        }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n  let settingsopen = false;\r\n  var settings = document.getElementById(\"settingsOpener\");\r\n\r\n  const settingsOpener = () => {\r\n    settingsopen = !settingsopen;\r\n    document.getElementById(\"settingsBox\").style.display = settingsopen\r\n      ? \"block\"\r\n      : \"none\";\r\n  };\r\n  settings.addEventListener(\"click\", settingsOpener);\r\n\r\n  async function getLeaderBoardData() {\r\n    const url =\r\n      window.location.href === \"https://tankshark.fun/\"\r\n        ? \"https://websocketpointer.duckdns.org/leaderboard\"\r\n        : \"http://localhost:4500/leaderboard\";\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }\r\n\r\n  async function buildLeaderBoard() {\r\n    var leaderboard = await getLeaderBoardData();\r\n    var leaderBoard = document.getElementById(\"leaderBoard\");\r\n    leaderBoard.innerHTML = \"\";\r\n    leaderboard.leader_board.forEach((leader) => {\r\n      var holderDiv = document.createElement(\"div\");\r\n      var holderName = document.createElement(\"p\");\r\n      var holderImg = document.createElement(\"img\");\r\n      leaderBoard.appendChild(holderDiv);\r\n      holderDiv.appendChild(holderImg);\r\n      holderImg.src =\r\n        window.location.href !== \"https://tankshark.fun/\"\r\n          ? `/public${leader.badge.badge}`\r\n          : `${leader.badge.badge}`;\r\n      holderDiv.classList.add(\"entrie-box\");\r\n      holderDiv.appendChild(holderName);\r\n      holderName.innerHTML = `${leader.username}, ${leader.score}`;\r\n      holderName.classList.add(\"normalized-text-color\");\r\n      holderImg.style.width = \"20px\";\r\n      holderImg.style.hieght = \"20px\";\r\n      holderImg.alt = \"io leaderboard badge\";\r\n    });\r\n  }\r\n\r\n  buildLeaderBoard();\r\n\r\n  async function ping() {\r\n    const urls =\r\n      window.location.href !== \"https://tankshark.fun/\"\r\n        ? [\r\n            \"http://localhost:4500/ping\",\r\n            \"https://websocketpointer.duckdns.org/ping\",\r\n            \"http://127.0.0.1:4000/ping\",\r\n            \"http://192.168.9.100:4500/ping\",\r\n          ]\r\n        : [\"https://websocketpointer.duckdns.org/ping\"];\r\n    var passed = false;\r\n    Promise.all(\r\n      urls.map(async (url) => {\r\n        try {\r\n          const response = await fetch(url);\r\n          if (!response.ok) {\r\n            throw new Error(`Response status: ${response.status}`);\r\n          }\r\n          passed = true;\r\n        } catch (error) {\r\n          console.log(error.message);\r\n        }\r\n      })\r\n    ).then(() => {\r\n      if (false) {\r\n        window.location.href =\r\n          window.location.href !== \"https://tankshark.fun/\"\r\n            ? \"/public/server-down.html\"\r\n            : \"/server-down.html\";\r\n      }\r\n    });\r\n  }\r\n\r\n  if (window.location.href === \"https://tankshark.fun/\") {\r\n    document.getElementById(\"squareimg\").src = \"/how-to-imgs/square.webp\";\r\n    document.getElementById(\"triangleimg\").src = \"/how-to-imgs/triangle.webp\";\r\n    document.getElementById(\"pentagonimg\").src = \"/how-to-imgs/pentagon.webp\";\r\n  }\r\n\r\n  ping();\r\n\r\n  var levelData = null;\r\n\r\n  async function build() {\r\n    levelData = await getBagdeData();\r\n    badgeLevelDiv.innerHTML = \"\";\r\n\r\n    var buildOutEle = {};\r\n    levelData.levelData.reverse().forEach((level, i) => {\r\n      var imageDiv = document.createElement(\"div\");\r\n      badgeLevelDiv.appendChild(imageDiv);\r\n\r\n      imageDiv.classList.add(\"levelContainer\");\r\n      var imageForDiv = document.createElement(\"img\");\r\n\r\n      if (level.maxScore >= levelData.playerScore || level.maxScore == null) {\r\n        imageDiv.classList.add(\"disabledBadge\");\r\n        imageForDiv.style.filter = \"brightness(50%)\";\r\n      }\r\n      if (\r\n        level.maxScore >= levelData.playerScore &&\r\n        level.minScore <= levelData.playerScore\r\n      ) {\r\n        let minScore = level.minScore;\r\n        let maxScore = level.maxScore;\r\n        var clacPercetage =\r\n          255 * ((maxScore - levelData.playerScore) / (maxScore - minScore));\r\n\r\n        if (maxScore - levelData.playerScore === maxScore - minScore) {\r\n          clacPercetage = 0;\r\n        }\r\n\r\n        var appendStyle = `linear-gradient(0deg, rgba(${clacPercetage}, ${clacPercetage}, ${clacPercetage}, 0.4), rgba(0, 0, 0, 0.4))`;\r\n\r\n        imageDiv.style.backgroundImage = appendStyle;\r\n\r\n        var strokeDashoffset =\r\n          45 *\r\n          2 *\r\n          Math.PI *\r\n          ((maxScore - levelData.playerScore) / (maxScore - minScore));\r\n\r\n        imageDiv.innerHTML = `\r\n          <svg width=\"10vh\" height=\"10vh\" viewBox=\"0 0 130 100\">\r\n            <defs>\r\n              <radialGradient id=\"grad1\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\r\n                <stop offset=\"0%\" stop-color=\"#00F7FF12\" />\r\n                <stop offset=\"50%\" stop-color=\"#00F7FF\" />\r\n                <stop offset=\"100%\" stop-color=\"#00F7FF12\" />\r\n              </radialGradient>\r\n              <radialGradient id=\"grad2\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\r\n                <stop offset=\"0%\" stop-color=\"#FFFFFF00\" />\r\n                <stop offset=\"100%\" stop-color=\"#00F7FF\" />\r\n              </radialGradient>\r\n            </defs>\r\n            <g stroke-width=\"9\" stroke=\"url(#grad1)\" fill=\"none\" stroke-width=\"30\">\r\n              <circle r=\"65\" cx=\"65\" cy=\"50\" opacity=\"1\" stroke=\"url(#grad1)\" stroke-width=\"30\"></circle>\r\n              <circle r=\"45\" cx=\"65\" cy=\"50\"></circle>\r\n            </g>\r\n            <circle cx=\"65\" cy=\"50\" r=\"45\" stroke=\"black\" stroke-width=\"8\" fill=\"none\"> </circle>\r\n            <circle cx=\"65\" cy=\"50\" r=\"45\" class=\"meter-1\" id=\"fillcircle\"> </circle>\r\n            <image x=\"35\" y=\"20\" width=\"60\" height=\"60\" href='${\r\n              window.location.href !== \"https://tankshark.fun/\"\r\n                ? window.location.origin + \"/public/\" + level.badge\r\n                : window.location.origin + level.badge\r\n            }'> </image>\r\n          </svg>\r\n        `;\r\n        const fillCircle = document.getElementById(\"fillcircle\");\r\n        const circumference = 45 * 2 * Math.PI; // Calculate the circumference of the circle\r\n        fillCircle.style.setProperty(\"stroke-dasharray\", `${circumference}`);\r\n        fillCircle.style.setProperty(\"stroke-dashoffset\", strokeDashoffset);\r\n        imageForDiv.style.opacity = \"0.1\";\r\n        imageForDiv.style.width = \"0.1px\";\r\n        var progressBar = document.createElement(\"progress\");\r\n        progressBar.value =\r\n          (maxScore - levelData.playerScore) / (maxScore - minScore);\r\n        progressBar.style.width = \"100%\";\r\n        progressBar.style.marginRight = \"10px\";\r\n\r\n        //imageDiv.appendChild(progressBar);\r\n        progressBar.classList.add(\"lineBreak\");\r\n        progressBar.style.display = \"block\";\r\n        progressBar.style[\"background-color\"] = \"#0A0A0A\";\r\n        buildOutEle = imageDiv;\r\n      }\r\n\r\n      imageForDiv.src =\r\n        window.location.href !== \"https://tankshark.fun/\"\r\n          ? `/public${level.badge}`\r\n          : `${level.badge}`;\r\n      imageForDiv.alt = `badge level: ${level}`;\r\n      imageDiv.appendChild(imageForDiv);\r\n      imageForDiv.style.height = \"4.5vw\";\r\n      imageForDiv.style.minHeight = \"70px\";\r\n      imageDiv.style.minHeight = \"80px\";\r\n      if (\r\n        level.maxScore >= levelData.playerScore &&\r\n        level.minScore <= levelData.playerScore\r\n      ) {\r\n        imageForDiv.style.visibility = \"hidden\";\r\n        imageDiv.style.setProperty(\r\n          \"border-color\",\r\n          \"var(--border-color-400)\",\r\n          \"important\"\r\n        );\r\n      } else {\r\n        imageForDiv[\"aspect-ratio\"] = \"1 / 1\";\r\n      }\r\n    });\r\n  }\r\n\r\n  let pointerAngle = 0;\r\n\r\n  build();\r\n\r\n  var canAnimateProfile = true;\r\n\r\n  var darkmode = document.getElementById(\"darkModeCheck\");\r\n  var chatshown = document.getElementById(\"chatcheck\");\r\n  var leaderboardshown = document.getElementById(\"leaderBoardCheck\");\r\n  var namesshown = document.getElementById(\"namesCheck\");\r\n\r\n  const themeChanger = () => {\r\n    document.getElementById(\"getdarkMode\").classList.toggle(\"moveee\");\r\n    darkMode = !darkMode;\r\n    localStorage.setItem(\"theme\", darkMode);\r\n    var newTheme = darkMode ? \"dark\" : \"light\";\r\n    document.querySelector(\"html\").setAttribute(\"data-theme\", newTheme);\r\n    if (darkMode) {\r\n      document.getElementById(\"gridDark\").style.display = \"grid\";\r\n      document.getElementById(\"gridLight\").style.display = \"none\";\r\n    }\r\n    if (!darkMode) {\r\n      document.getElementById(\"gridDark\").style.display = \"none\";\r\n      document.getElementById(\"gridLight\").style.display = \"grid\";\r\n    }\r\n  };\r\n  darkmode.addEventListener(\"click\", themeChanger);\r\n\r\n  const chatToggle = () => {\r\n    canSeeChat = !canSeeChat;\r\n    localStorage.setItem(\"canSeeChat\", canSeeChat);\r\n    document.getElementById(\"getChatShown\").classList.toggle(\"moveee\");\r\n  };\r\n  chatshown.addEventListener(\"click\", chatToggle);\r\n\r\n  const leaderBoardToggle = () => {\r\n    canSeeLeaderBoard = !canSeeLeaderBoard;\r\n    localStorage.setItem(\"canSeeLeaderBoard\", canSeeLeaderBoard);\r\n    document.getElementById(\"getleaderBoardShown\").classList.toggle(\"moveee\");\r\n  };\r\n  leaderboardshown.addEventListener(\"click\", leaderBoardToggle);\r\n\r\n  const namesToggle = () => {\r\n    canSeeNames = !canSeeNames;\r\n    localStorage.setItem(\"canSeeNames\", canSeeNames);\r\n    document.getElementById(\"getnamesShown\").classList.toggle(\"moveee\");\r\n  };\r\n  namesshown.addEventListener(\"click\", namesToggle);\r\n\r\n  var playerCanvas = document.getElementById(\"playerCanvas\");\r\n  let profileCtx = playerCanvas.getContext(\"2d\");\r\n\r\n  function createProfile() {\r\n    profileCtx.clearRect(0, 0, playerCanvas.width, playerCanvas.height);\r\n    let gradient = profileCtx.createRadialGradient(\r\n      playerCanvas.width / 2,\r\n      playerCanvas.height / 2,\r\n      40,\r\n      playerCanvas.width / 2,\r\n      playerCanvas.height / 2,\r\n      50\r\n    );\r\n\r\n    gradient.addColorStop(0.1, \"#00000000\");\r\n    gradient.addColorStop(0.5, \"#61f7ff\");\r\n    gradient.addColorStop(1, \"#FFFFFF00\");\r\n\r\n    profileCtx.beginPath();\r\n    profileCtx.arc(\r\n      playerCanvas.width / 2,\r\n      playerCanvas.height / 2,\r\n      50,\r\n      0,\r\n      2 * Math.PI,\r\n      false\r\n    );\r\n    profileCtx.fillStyle = gradient;\r\n    profileCtx.fill();\r\n\r\n    profileCtx.closePath();\r\n\r\n    profileCtx.fillStyle = \"#b3b3b3\";\r\n    profileCtx.save();\r\n    // Translate to the center of the square\r\n    profileCtx.translate(playerCanvas.width / 2, playerCanvas.height / 2);\r\n\r\n    profileCtx.rotate(pointerAngle);\r\n    let cannon_heightFOV = 30;\r\n    let cannon_widthFOV = 120;\r\n    // Draw the square\r\n    let basex = -cannon_widthFOV / 2 + cannon_heightFOV;\r\n\r\n    let basey = -cannon_heightFOV / 2;\r\n\r\n    profileCtx.fillRect(basex, basey, cannon_widthFOV, cannon_heightFOV);\r\n    // Add a border to the cannon\r\n    profileCtx.strokeStyle = \"lightgrey\"; // Set border color\r\n    profileCtx.lineWidth = 3; // Set border width\r\n    profileCtx.strokeRect(basex, basey, cannon_widthFOV, cannon_heightFOV); // Draw the border\r\n    // Restore the previous transformation matrix\r\n    profileCtx.restore();\r\n    profileCtx.beginPath();\r\n    profileCtx.arc(\r\n      playerCanvas.width / 2,\r\n      playerCanvas.height / 2,\r\n      40,\r\n      0,\r\n      2 * Math.PI,\r\n      false\r\n    );\r\n    profileCtx.fillStyle = \"#828282\";\r\n    profileCtx.fill();\r\n    profileCtx.lineWidth = 5;\r\n\r\n    profileCtx.strokeStyle = \"#aaaaaa\";\r\n\r\n    profileCtx.stroke();\r\n    if (skinID !== 0) {\r\n      let imageSRC = images[skinID];\r\n      profileCtx.save();\r\n      profileCtx.translate(playerCanvas.width / 2, playerCanvas.height / 2);\r\n      profileCtx.rotate(pointerAngle);\r\n      profileCtx.drawImage(imageSRC, -40, -40, 80, 80);\r\n      profileCtx.restore();\r\n    }\r\n    if (canAnimateProfile) requestAnimationFrame(createProfile);\r\n  }\r\n\r\n  darkMode = localStorage.getItem(\"theme\");\r\n  canSeeNames = localStorage.getItem(\"canSeeNames\");\r\n  canSeeLeaderBoard = localStorage.getItem(\"canSeeLeaderBoard\");\r\n  canSeeChat = localStorage.getItem(\"canSeeChat\");\r\n\r\n  darkMode = darkMode === \"true\";\r\n\r\n  if (darkMode == null) localStorage.setItem(\"theme\", false);\r\n  if (canSeeNames == null) localStorage.setItem(\"canSeeNames\", true);\r\n  if (canSeeChat == null) localStorage.setItem(\"canSeeChat\", true);\r\n  if (canSeeLeaderBoard == null)\r\n    localStorage.setItem(\"canSeeLeaderBoard\", true);\r\n  darkMode ??= false;\r\n\r\n  canSeeNames = canSeeNames === \"true\" || canSeeNames === null;\r\n  canSeeChat = canSeeChat === \"true\" || canSeeChat === null;\r\n  canSeeLeaderBoard =\r\n    canSeeLeaderBoard === \"true\" || canSeeLeaderBoard === null;\r\n\r\n  if (isCrazyGames) {\r\n    if (window.CrazyGames.SDK.game.settings.disableChat) {\r\n      canSeeChat = false;\r\n    }\r\n  }\r\n\r\n  var newTheme = darkMode ? \"dark\" : \"light\";\r\n  if (darkMode)\r\n    document.getElementById(\"getdarkMode\").classList.toggle(\"moveee\");\r\n  if (canSeeNames)\r\n    document.getElementById(\"getnamesShown\").classList.toggle(\"moveee\");\r\n  if (canSeeChat)\r\n    document.getElementById(\"getChatShown\").classList.toggle(\"moveee\");\r\n  if (canSeeLeaderBoard)\r\n    document.getElementById(\"getleaderBoardShown\").classList.toggle(\"moveee\");\r\n  document.querySelector(\"html\").setAttribute(\"data-theme\", newTheme);\r\n  if (darkMode) {\r\n    document.getElementById(\"gridDark\").style.display = \"grid\";\r\n    document.getElementById(\"gridLight\").style.display = \"none\";\r\n  }\r\n  if (!darkMode) {\r\n    document.getElementById(\"gridDark\").style.display = \"none\";\r\n    document.getElementById(\"gridLight\").style.display = \"grid\";\r\n  }\r\n\r\n  // set theme on button press\r\n\r\n  requestAnimationFrame(createProfile);\r\n\r\n  const getProfilePointer = (evt) => {\r\n    var mousepos = getMousePos(playerCanvas, evt);\r\n    pointerAngle = getMouseAngle(playerCanvas, mousepos.x, mousepos.y);\r\n  };\r\n\r\n  document.addEventListener(\"mousemove\", (evt) => getProfilePointer(evt));\r\n\r\n  var badgeLevelDiv = document.getElementById(\"badgeLevelDiv\");\r\n\r\n  playerCanvas.style[\"background-image\"] =\r\n    window.location.href !== \"https://tankshark.fun/\"\r\n      ? `url(${window.location.origin}/public/assets/cropped/hexbackground.webp)`\r\n      : `url(${window.location.origin}/assets/cropped/hexbackground.webp)`;\r\n\r\n  var skinGrid = document.getElementById(\"skins-grid\");\r\n\r\n  const skinsTabCloser = () => {\r\n    document.getElementById(\"skinCon\").style.display = \"none\";\r\n    skinShown = false;\r\n  };\r\n  document.getElementById(\"close\").addEventListener(\"click\", skinsTabCloser);\r\n\r\n  var skin = \"0.webp\";\r\n  var skinID = 0;\r\n  var selected_ele = {};\r\n\r\n  document.getElementById(\"skinsButton\").addEventListener(\"click\", () => {\r\n    document.getElementById(\"skinCon\").style.display = \"block\";\r\n  });\r\n\r\n  for (let i = 0; i < 11; i++) {\r\n    var skinDiv = document.createElement(\"div\");\r\n    var skinImg = document.createElement(\"img\");\r\n    skinGrid.appendChild(skinDiv);\r\n    skinDiv.appendChild(skinImg);\r\n    skinImg.src =\r\n      window.location.href !== \"https://tankshark.fun/\"\r\n        ? `/public/skins/${i}.webp`\r\n        : `/skins/${i}.webp`;\r\n\r\n    skinImg.classList.add(\"_100per_\");\r\n    skinDiv.classList.add(\"skin-div\");\r\n    var selectSkin = () => {\r\n      skinID = i;\r\n      skin = `${i}.webp`;\r\n      [...document.getElementById(\"skins-grid\").children].forEach((skin) => {\r\n        skin.classList.remove(\"selected-skin\");\r\n      });\r\n      document\r\n        .getElementById(\"skins-grid\")\r\n        .children[i + 1].classList.add(\"selected-skin\");\r\n      selected_ele = skinImg;\r\n    };\r\n    skinDiv.addEventListener(\"click\", selectSkin);\r\n  }\r\n\r\n  var skinShown = false;\r\n  const skinsTabOpener = () => {\r\n    skinShown = !skinShown;\r\n    document.getElementById(\"skinCon\").style.display = skinShown\r\n      ? \"grid\"\r\n      : \"none\";\r\n  };\r\n  document\r\n    .getElementById(\"skinButton\")\r\n    .addEventListener(\"click\", skinsTabOpener);\r\n\r\n  const startGame = () => {\r\n    if (isCrazyGames) {\r\n      window.CrazyGames.SDK.game.gameplayStart();\r\n      window.CrazyGames.SDK.banner.clearAllBanners();\r\n    }\r\n    username = document.getElementById(\"username\").value;\r\n    document.removeEventListener(\"mousemove\", (evt) => getProfilePointer(evt));\r\n    canAnimateProfile = false;\r\n    document.getElementById(\"full-screen\").style.display = \"flex\";\r\n\r\n    if (username) {\r\n      setTimeout(() => {\r\n        document.getElementById(\"landing-page\").style.display = \"none\";\r\n        document.getElementById(\"game\").style.display = \"block\";\r\n        if (username !== \"A\") {\r\n          document.addEventListener(\"contextmenu\", (event) =>\r\n            event.preventDefault()\r\n          );\r\n        }\r\n        ongame();\r\n      }, 100);\r\n    } else {\r\n      setTimeout(() => {\r\n        function generateRandomNumber(min, max) {\r\n          return Math.random() * (max - min) + min;\r\n        }\r\n        username = \"unknown-\" + Math.round(generateRandomNumber(0, 1000));\r\n        document.getElementById(\"landing-page\").style.display = \"none\";\r\n        document.getElementById(\"game\").style.display = \"block\";\r\n        /*document.addEventListener(\"contextmenu\", (event) =>\r\n          event.preventDefault()\r\n        );*/\r\n        ongame();\r\n      }, 100);\r\n    }\r\n  };\r\n  if (isCrazyGames) {\r\n    if (window.CrazyGames.SDK.game.isInstantMultiplayer) {\r\n      startGame();\r\n    }\r\n  }\r\n  window.addEventListener(\"load\", () => {\r\n    document\r\n      .getElementById(\"playButton\")\r\n      .addEventListener(\"mousedown\", startGame);\r\n  });\r\n})();\r\n\r\nconsole.log(\r\n  \"%c%s %c%s %c%s %c%s %c%s %c%s %c%s\",\r\n  \"color:white\",\r\n  \"Wellcome\",\r\n  \"color:red\",\r\n  \"skill issues!!!\",\r\n  \"color:white\",\r\n  \"Don't run scripts in here from stragers (Or anyone). Just don't\",\r\n  \"color:red\",\r\n  \"A good person is a person that clicks the X button of dev tools\",\r\n  \"color:white\",\r\n  \"\\n\\n\\n\\n\",\r\n  \"color:red\",\r\n  \"X\",\r\n  \"color:white\",\r\n  \"\\n ⬆\\n ⬆\\n ⬆\\n ⬆\\n ⬆\\n\"\r\n);\r\n"],"names":["username","badgelevels","getMousePos","canvas","evt","x","clientX","y","clientY","badgesToLoad","forEach","badge","img","Image","src","window","location","href","getMouseAngle","elePos","getMiddleOfElement","element","rect","getBoundingClientRect","left","width","top","height","Math","atan2","getCookie","cname","name1","ca","decodedCookie","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","images","imagePaths","path","push","inverted","image___","canSeeChat","darkMode","canSeeLeaderBoard","canSeeNames","ongame","socket","WebSocket","getElementById","value","binaryType","playerId","createElement","Ghostcanvas","ctx","getContext","willReadFrequently","innerWidth","innerHeight","appendChild","id","style","position","itemprop","getElementsByTagName","cursor","origin","pi180","PI","lastTime","performance","now","frameTimes","tankmeta","basic","fov","upgradeLevel","upgrades","cannons","gridDark","gridLight","food_list","players","playerX","playerY","playerHealth","maxhealth","playerHealTime","playerReheal","playerSpeed","playerSize","playerBaseSize","bodyDamage","__type__","selected_class","level","upgradePoints","dead","joinedTeam","teamOn","owner_of_team","score","announcements","playerMessages","messaging","blinking","canmove","canKeyPress","speedBoost","keysPressed","movementTimeouts","autoRotating","lockautoRotating","MouseX_","MouseY_","MouseX","MouseY","firingIntervals","firingInterval","bullets","zlevelbullets","roads","autoFiring","autoIntevals","baseFireInterval","cannonFireData","bullet_damage","cannonWidth","drones","autocannons","cavansX","cavansY","canW","canH","FOV","gridDarkstyle","gridLightstyle","sqrt23","sqrt","pi","pentarotate","state","statecycle","progress","setprogress","barWidth","barHeight","teampanelopen","leader_board","button475","button462_5","button375","button40","button10","nolist","Regenspeed","bosses","explosions","requests","pubteams","teamOver","userId","typedtext","radiusConfig","vertices","errors","squareColor","__reload__","colorUpgrades","teamColorUpgrades","scaleUp","imgsrcs","minimapLevels","levels","socialContainer","statsTree","Health","Regen","Speed","waitpls","setTimeout","send","type","data","readyState","OPEN","JSON","stringify","e","reload","alert","console","log","display","getCannonAngle","mix","rgb","rgb2","percent","otherrgbs","_return","f","Error","newrgb","map","d","Date","setTime","getTime","exdays","expires","toUTCString","levelUpgrader","tankdata","out","undefined","Object","keys","KEY","tankstiles","animation","innerHTML","upgrade","img__","tileImg","addEventListener","stopPropagation","tankdatacannon__","scaleby","health","speed","size","scaleFactor","cannon_","popcannon","playerid","CannonID","clearInterval","cannon","autoID","random","angle","_type_","_CAN","cannonINT","__tankdata__","index","___cannon___","cannon__","autoindex","offSet_x","angle0","rotatePointAroundPlayer","bullet_speed","bullet_size","bullet_pentration","extracannon_","_cannon","levelHANDLER","Number","isNaN","plus","buildTeamList","MYteam","find","team","teamID","lowerLevelPlayers","amLower","includes","player","teamcontainer","item","classList","add","owner","innerText","crown","powers","canKick","kick","children","remove","added","canPremote","lowerlevelpowers","canDedicatePower","canDemote","canDededicatePower","premoteArrow","addplayer","premote","MYteamID","removeEventListener","demoteArrow","premdemoteArrowoteArrow","downArrow","name","infoConteiner","info","govType","simpleTax","playerTax","ScheduledBasedTax","ScheduledBasedTaxInterval","constitution","overflow","float","isDown","rotate","Array","from","child","getElementsByClassName","upgradeType","teamId","stat","postText","drawRoundedLevelBar","radius","barcolor","barXP","barbourder","filllevel","fillStyle","strokeStyle","beginPath","roundRect","fill","stroke","closePath","filledWidth","moveTo","lineTo","quadraticCurveTo","textAlign","font","strokeText","fillText","drawImage","message","onbeforeunload","confirm","preventDefault","returnValue","onopen","resolveDraw","resolveDraw2","resolveDraw3","resolveDraw4","time","Promise","allSettled","resolve","reject","then","timeEnd","draw","timestamp","clearRect","upscaleX","oWidth","upscaleY","oHieght","deltaTime","shift","reduce","a","b","exsplosion","rings","ring","arc","color","globalAlpha","trans","transMinus","lineWidth","lineJoin","realx","realy","save","transparency","translate","fillRect","strokeRect","drawbar","realitemsize","h","theta","centerX","cos","centerY","sin","healthWidth","test","replace","restore","boss","boss_","randomID","cannonW","angle_offset","xplus","cannonWidth_bottom","t","basex","canwB2","canwH2","cannonWidth_top","basey","unZbullets","playerId__","road","sameTeam","mapMark","bullet","realstartx","xstart","realstarty","ystart","Zlevel","realsize","globalCompositeOperation","x1","y1","x2","y2","x3","y3","controlPoint1","controlPoint2","controlPoint3","autoCAN_","can","uniqueid","cannon_widthFOV","cannon_heightFOV","cannwidthtop","parentindex","cannwidthbottom","hasOwnProperty","tankdatacannon","FOVplayerz","decor","decor_","offsetX","offsetY","cannon_angle","offsetAngle","rotation","gradient","createRadialGradient","addColorStop","build","tankdatacannondata","cannonHeight","cannonheight","trapR","reH","backwardsObj","percentage","newrgb2","skin","mymessages","massege","hidetime","text","cannonangle","cannonA","cannonWidth_","drawself","exW","exH","newnotify","handleMovement","Upgradetype","UpgradeLevel","autoAngle","canvaswidth","canvasheight","run","NEW_bullet__","abs","skinID","angle_o_0_","playerobject","boxlen","textwidth","measureText","I_","CCC","stat_","stats","entre","requestAnimationFrame","teamKey","urlParams","URLSearchParams","get","playerData","cannonH","canvasW","canvasH","screenWidth","screenHeight","visible","isCrazy","onload","onmessage","event","parse","decodeMessage","GameObjectList","root","protobuf","Root","fromJSON","nested","GameObject","fields","weight","objects","rule","lookupType","buffer","Uint8Array","decode","colorGradeint","j","div","divstyle","backgroundColor","border","k","requester","yes","no","conteiner","allowYes","allowNo","newname","once","exspiretime","index_","splice","HEALTime","HEALTH","cannon_ooo","cannon_ID","receiver","entries","newPlayers","key","healer","timeout","clearTimeout","fireOnce","FireIntervale","respawn","close","reward","player1","player2","kill","droneID","StatUpgradetype","levelmultiplyer","playerID","BULLETS","warn","PlayerId","playerDamage","bouceBack","playerSpeed2","movePlayer","response","socialBox","contentdiv","pContent","imgDiv","imglike","gentratedNames","namestring","dislikers","likers","insertBefore","cvalue","newid","speedMultiplyer","miniMapButton","vis","visibilityState","dx","dy","last","setInterval","generateRandomNumber","min","max","bounceBackAndRecoil","Bsize","Bspeed","anlge_","recoilX","recoilY","directer","button","bullet_size_l","randomNumber","xxx","yyy","angle_","rotated_offset_x","rotated_offset_y","bullet_start_x","bullet_start_y","identdfire","bullet_speed__","bulletdistance","calculateTriangleVertices","cannon_life","bullet_distance","distanceTraveled","lifespan","cannonIndex","delay","dronetanks","MouseY__","MouseX__","outerHeight","outerWidth","slice","blink","mousepos","__angle__","checked","checked2","checked3","teamname","description","querySelector","joinLeave","createDelete","private","hidden","createTeamScore","autoengine","Xbutton","teamMain","teamcontainer_","margin","interval","checkCollisions","playerId_","distance","id_other","damagetaken","damagegiven","id_self","movement","cannonOffsetX","cannonOffsetY","playerRotation","playerRotationRad","scaleDown","upscaleX_","upscaleY_","scale","screenW","screenH","canW1","canH1","teamwidth","teamheight","innerteamwidth","innerteamheight","innerteamwidthreal","innerteamheightreal","buttton140","button275","button80","button110","childNodes","node","sideLength","vx","vy","constructor","dropDownTime","textAling","startHeight","shovespeed","anoucmentW","anoucmentW2","anoucmentH","boundrectH","shovespeed5","boundrectH10","shovedown","shoved_down_anoucment","anoucment","shovedowndate","shovedownper","expiretime","rounding","getBagdeData","url","fetch","method","headers","Accept","body","ok","status","json","error","subfeedback","settingsopen","getLeaderBoardData","ping","all","urls","settings","buildLeaderBoard","leaderboard","leaderBoard","leader","holderDiv","holderName","holderImg","hieght","alt","levelData","pointerAngle","badgeLevelDiv","reverse","imageDiv","imageForDiv","maxScore","playerScore","filter","minScore","clacPercetage","appendStyle","backgroundImage","strokeDashoffset","fillCircle","circumference","setProperty","opacity","progressBar","marginRight","minHeight","visibility","canAnimateProfile","darkmode","chatshown","leaderboardshown","namesshown","toggle","localStorage","setItem","newTheme","setAttribute","playerCanvas","profileCtx","getItem","createProfile","imageSRC","getProfilePointer","skinGrid","skinShown","skinDiv","skinImg","selectSkin","startGame","round"],"version":3,"file":"public.3be83d56.js.map","sourceRoot":"../"}